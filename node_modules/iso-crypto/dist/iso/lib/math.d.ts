export interface Point {
    readonly x: bigint;
    readonly y: bigint;
}
/**
 * Curve specification.
 *
 * Defines a curve using equation `y^2 â‰¡ (x^3 + a*x + b) % p`.
 *
 * Values like `n` and `b` are ignored as they are not required for this specific use cases.
 */
interface Curve {
    /**
     * Prime. `p` in equation.
     */
    readonly p: bigint;
    /**
     * `a` in equation.
     */
    readonly a: bigint;
    /**
     * `b` in equation
     */
    readonly b: bigint;
    /**
     * Base Point, lies on curve. Public Key given a Private Key of 1.
     */
    readonly g: Point;
}
/**
 * Curves as described by {@link https://www.secg.org/sec2-v2.pdf}
 */
export declare const curves: {
    p256: {
        p: bigint;
        a: bigint;
        b: bigint;
        g: {
            x: bigint;
            y: bigint;
        };
    };
    p384: {
        p: bigint;
        a: bigint;
        b: bigint;
        g: {
            x: bigint;
            y: bigint;
        };
    };
    p521: {
        p: bigint;
        a: bigint;
        b: bigint;
        g: {
            x: bigint;
            y: bigint;
        };
    };
};
/**
 * Derives coordinates of ECC public key given private key (random number) and curve.
 * Implements Double-and-add method.
 *
 * @see {@link https://en.wikipedia.org/wiki/Elliptic_curve_point_multiplication}
 *
 * @param privateKey - random number in curve range
 * @param curve - Curve specification
 * @returns public key point
 */
export declare const derivePublicKey: (privateKey: bigint, curve: Curve) => Point;
export declare const deriveYCoordinate: (x: bigint, odd: boolean, curve: Curve) => bigint;
export {};
//# sourceMappingURL=math.d.ts.map