import { type InputText } from '../lib/types.js';
/**
 * Compress an ECC Public Key.
 *
 * Idempotent, accepts an already compressed key and will return it unchanged.
 *
 * "Compressed" public keys are effectively ~50% the size of the original key.
 *
 * @param publicKey - public key to compress
 * @param [curve] - curve algorithm, defaults to p256
 * @returns compressed public key
 */
export declare const compressEccPublicKey: (publicKey: InputText, curve?: "p256" | "p384" | "p521") => Uint8Array;
/**
 * Decompress an ECC Public Key.
 *
 * Idempotent, accepts an already "uncompressed" key and will return it unchanged.
 *
 * @param publicKey - public key to decompress
 * @param [curve] - curve algorithm, defaults to p256
 * @returns uncompressed public key
 */
export declare const decompressEccPublicKey: (publicKey: InputText, curve?: "p256" | "p384" | "p521") => Uint8Array;
//# sourceMappingURL=compression.d.ts.map