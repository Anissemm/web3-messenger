{
  "version": 3,
  "sources": ["../../../../node_modules/keypair/index.js", "../../../../node_modules/quick-encrypt/index.js"],
  "sourcesContent": ["var forge = {};\nvar aes = forge.aes = {};\nvar md = forge.md = {};\nvar pki = forge.pki = {};\nvar rsa = forge.pki.rsa = forge.rsa = {};\nvar util = forge.util = {};\n\n/**\n * Expose `keypair`.\n */\n\nmodule.exports = function (opts) {\n  if (!opts) opts = {};\n  if (typeof opts.bits == 'undefined') opts.bits = 2048;\n  var keypair = forge.rsa.generateKeyPair(opts);\n  keypair = {\n    public: fix(forge.pki.publicKeyToRSAPublicKeyPem(keypair.publicKey, 72)),\n    private: fix(forge.pki.privateKeyToPem(keypair.privateKey, 72))\n  };\n  return keypair;\n};\n\nfunction fix (str) {\n  return str.replace(/\\r/g, '') + '\\n'\n}\n\n/**\n * util.fillString\n */\n\nutil.fillString = function(c, n) {\n  var s = '';\n  while(n > 0) {\n    if(n & 1) {\n      s += c;\n    }\n    n >>>= 1;\n    if(n > 0) {\n      c += c;\n    }\n  }\n  return s;\n};\n\n/**\n * md.sha1\n */\n\nvar sha1 = forge.sha1 = forge.md.sha1 = {};\n\n// sha-1 padding bytes not initialized yet\nvar _padding = null;\nvar _initialized = false;\n\n/**\n * Initializes the constant tables.\n */\nvar _init = function() {\n  // create padding\n  _padding = String.fromCharCode(128);\n  _padding += forge.util.fillString(String.fromCharCode(0x00), 64);\n\n  // now initialized\n  _initialized = true;\n};\n\n/**\n * Updates a SHA-1 state with the given byte buffer.\n *\n * @param s the SHA-1 state to update.\n * @param w the array to use to store words.\n * @param bytes the byte buffer to update with.\n */\nvar _update = function(s, w, bytes) {\n  // consume 512 bit (64 byte) chunks\n  var t, a, b, c, d, e, f, i;\n  var len = bytes.length();\n  while(len >= 64) {\n    // the w array will be populated with sixteen 32-bit big-endian words\n    // and then extended into 80 32-bit words according to SHA-1 algorithm\n    // and for 32-79 using Max Locktyukhin's optimization\n\n    // initialize hash value for this chunk\n    a = s.h0;\n    b = s.h1;\n    c = s.h2;\n    d = s.h3;\n    e = s.h4;\n\n    // round 1\n    for(i = 0; i < 16; ++i) {\n      t = bytes.getInt32();\n      w[i] = t;\n      f = d ^ (b & (c ^ d));\n      t = ((a << 5) | (a >>> 27)) + f + e + 0x5A827999 + t;\n      e = d;\n      d = c;\n      c = (b << 30) | (b >>> 2);\n      b = a;\n      a = t;\n    }\n    for(; i < 20; ++i) {\n      t = (w[i - 3] ^ w[i - 8] ^ w[i - 14] ^ w[i - 16]);\n      t = (t << 1) | (t >>> 31);\n      w[i] = t;\n      f = d ^ (b & (c ^ d));\n      t = ((a << 5) | (a >>> 27)) + f + e + 0x5A827999 + t;\n      e = d;\n      d = c;\n      c = (b << 30) | (b >>> 2);\n      b = a;\n      a = t;\n    }\n    // round 2\n    for(; i < 32; ++i) {\n      t = (w[i - 3] ^ w[i - 8] ^ w[i - 14] ^ w[i - 16]);\n      t = (t << 1) | (t >>> 31);\n      w[i] = t;\n      f = b ^ c ^ d;\n      t = ((a << 5) | (a >>> 27)) + f + e + 0x6ED9EBA1 + t;\n      e = d;\n      d = c;\n      c = (b << 30) | (b >>> 2);\n      b = a;\n      a = t;\n    }\n    for(; i < 40; ++i) {\n      t = (w[i - 6] ^ w[i - 16] ^ w[i - 28] ^ w[i - 32]);\n      t = (t << 2) | (t >>> 30);\n      w[i] = t;\n      f = b ^ c ^ d;\n      t = ((a << 5) | (a >>> 27)) + f + e + 0x6ED9EBA1 + t;\n      e = d;\n      d = c;\n      c = (b << 30) | (b >>> 2);\n      b = a;\n      a = t;\n    }\n    // round 3\n    for(; i < 60; ++i) {\n      t = (w[i - 6] ^ w[i - 16] ^ w[i - 28] ^ w[i - 32]);\n      t = (t << 2) | (t >>> 30);\n      w[i] = t;\n      f = (b & c) | (d & (b ^ c));\n      t = ((a << 5) | (a >>> 27)) + f + e + 0x8F1BBCDC + t;\n      e = d;\n      d = c;\n      c = (b << 30) | (b >>> 2);\n      b = a;\n      a = t;\n    }\n    // round 4\n    for(; i < 80; ++i) {\n      t = (w[i - 6] ^ w[i - 16] ^ w[i - 28] ^ w[i - 32]);\n      t = (t << 2) | (t >>> 30);\n      w[i] = t;\n      f = b ^ c ^ d;\n      t = ((a << 5) | (a >>> 27)) + f + e + 0xCA62C1D6 + t;\n      e = d;\n      d = c;\n      c = (b << 30) | (b >>> 2);\n      b = a;\n      a = t;\n    }\n\n    // update hash state\n    s.h0 += a;\n    s.h1 += b;\n    s.h2 += c;\n    s.h3 += d;\n    s.h4 += e;\n\n    len -= 64;\n  }\n};\n\n/**\n * Creates a SHA-1 message digest object.\n *\n * @return a message digest object.\n */\nsha1.create = function() {\n  // do initialization as necessary\n  if(!_initialized) {\n    _init();\n  }\n\n  // SHA-1 state contains five 32-bit integers\n  var _state = null;\n\n  // input buffer\n  var _input = forge.util.createBuffer();\n\n  // used for word storage\n  var _w = new Array(80);\n\n  // message digest object\n  var md = {\n    algorithm: 'sha1',\n    blockLength: 64,\n    digestLength: 20,\n    // length of message so far (does not including padding)\n    messageLength: 0\n  };\n\n  /**\n   * Starts the digest.\n   */\n  md.start = function() {\n    md.messageLength = 0;\n    _input = forge.util.createBuffer();\n    _state = {\n      h0: 0x67452301,\n      h1: 0xEFCDAB89,\n      h2: 0x98BADCFE,\n      h3: 0x10325476,\n      h4: 0xC3D2E1F0\n    };\n  };\n  // start digest automatically for first time\n  md.start();\n\n  /**\n   * Updates the digest with the given message input. The given input can\n   * treated as raw input (no encoding will be applied) or an encoding of\n   * 'utf8' maybe given to encode the input using UTF-8.\n   *\n   * @param msg the message input to update with.\n   * @param encoding the encoding to use (default: 'raw', other: 'utf8').\n   */\n  md.update = function(msg, encoding) {\n    if(encoding === 'utf8') {\n      msg = forge.util.encodeUtf8(msg);\n    }\n\n    // update message length\n    md.messageLength += msg.length;\n\n    // add bytes to input buffer\n    _input.putBytes(msg);\n\n    // process bytes\n    _update(_state, _w, _input);\n\n    // compact input buffer every 2K or if empty\n    if(_input.read > 2048 || _input.length() === 0) {\n      _input.compact();\n    }\n  };\n\n   /**\n    * Produces the digest.\n    *\n    * @return a byte buffer containing the digest value.\n    */\n   md.digest = function() {\n    /* Note: Here we copy the remaining bytes in the input buffer and\n      add the appropriate SHA-1 padding. Then we do the final update\n      on a copy of the state so that if the user wants to get\n      intermediate digests they can do so. */\n\n    /* Determine the number of bytes that must be added to the message\n      to ensure its length is congruent to 448 mod 512. In other words,\n      a 64-bit integer that gives the length of the message will be\n      appended to the message and whatever the length of the message is\n      plus 64 bits must be a multiple of 512. So the length of the\n      message must be congruent to 448 mod 512 because 512 - 64 = 448.\n\n      In order to fill up the message length it must be filled with\n      padding that begins with 1 bit followed by all 0 bits. Padding\n      must *always* be present, so if the message length is already\n      congruent to 448 mod 512, then 512 padding bits must be added. */\n\n    // 512 bits == 64 bytes, 448 bits == 56 bytes, 64 bits = 8 bytes\n    // _padding starts with 1 byte with first bit is set in it which\n    // is byte value 128, then there may be up to 63 other pad bytes\n    var len = md.messageLength;\n    var padBytes = forge.util.createBuffer();\n    padBytes.putBytes(_input.bytes());\n    padBytes.putBytes(_padding.substr(0, 64 - ((len + 8) % 64)));\n\n    /* Now append length of the message. The length is appended in bits\n      as a 64-bit number in big-endian order. Since we store the length\n      in bytes, we must multiply it by 8 (or left shift by 3). So here\n      store the high 3 bits in the low end of the first 32-bits of the\n      64-bit number and the lower 5 bits in the high end of the second\n      32-bits. */\n    padBytes.putInt32((len >>> 29) & 0xFF);\n    padBytes.putInt32((len << 3) & 0xFFFFFFFF);\n    var s2 = {\n      h0: _state.h0,\n      h1: _state.h1,\n      h2: _state.h2,\n      h3: _state.h3,\n      h4: _state.h4\n    };\n    _update(s2, _w, padBytes);\n    var rval = forge.util.createBuffer();\n    rval.putInt32(s2.h0);\n    rval.putInt32(s2.h1);\n    rval.putInt32(s2.h2);\n    rval.putInt32(s2.h3);\n    rval.putInt32(s2.h4);\n    return rval;\n  };\n\n  return md;\n};\n\n\n/**\n * util.ByteBuffer\n */\n\n/**\n * Constructor for a byte buffer.\n *\n * @param b the bytes to wrap (as a UTF-8 string) (optional).\n */\nutil.ByteBuffer = function(b) {\n  // the data in this buffer\n  this.data = b || '';\n  // the pointer for reading from this buffer\n  this.read = 0;\n};\n\n/**\n * Gets the number of bytes in this buffer.\n *\n * @return the number of bytes in this buffer.\n */\nutil.ByteBuffer.prototype.length = function() {\n  return this.data.length - this.read;\n};\n\n/**\n * Gets whether or not this buffer is empty.\n *\n * @return true if this buffer is empty, false if not.\n */\nutil.ByteBuffer.prototype.isEmpty = function() {\n  return (this.data.length - this.read) === 0;\n};\n\n/**\n * Puts a byte in this buffer.\n *\n * @param b the byte to put.\n */\nutil.ByteBuffer.prototype.putByte = function(b) {\n  this.data += String.fromCharCode(b);\n};\n\n/**\n * Puts a byte in this buffer N times.\n *\n * @param b the byte to put.\n * @param n the number of bytes of value b to put.\n */\nutil.ByteBuffer.prototype.fillWithByte = function(b, n) {\n  b = String.fromCharCode(b);\n  var d = this.data;\n  while(n > 0) {\n    if(n & 1) {\n      d += b;\n    }\n    n >>>= 1;\n    if(n > 0) {\n      b += b;\n    }\n  }\n  this.data = d;\n};\n\n/**\n * Puts bytes in this buffer.\n *\n * @param bytes the bytes (as a UTF-8 encoded string) to put.\n */\nutil.ByteBuffer.prototype.putBytes = function(bytes) {\n  this.data += bytes;\n};\n\n/**\n * Puts a UTF-16 encoded string into this buffer.\n *\n * @param str the string to put.\n */\nutil.ByteBuffer.prototype.putString = function(str) {\n  this.data += util.encodeUtf8(str);\n};\n\n/**\n * Puts a 16-bit integer in this buffer in big-endian order.\n *\n * @param i the 16-bit integer.\n */\nutil.ByteBuffer.prototype.putInt16 = function(i) {\n  this.data +=\n    String.fromCharCode(i >> 8 & 0xFF) +\n    String.fromCharCode(i & 0xFF);\n};\n\n/**\n * Puts a 24-bit integer in this buffer in big-endian order.\n *\n * @param i the 24-bit integer.\n */\nutil.ByteBuffer.prototype.putInt24 = function(i) {\n  this.data +=\n    String.fromCharCode(i >> 16 & 0xFF) +\n    String.fromCharCode(i >> 8 & 0xFF) +\n    String.fromCharCode(i & 0xFF);\n};\n\n/**\n * Puts a 32-bit integer in this buffer in big-endian order.\n *\n * @param i the 32-bit integer.\n */\nutil.ByteBuffer.prototype.putInt32 = function(i) {\n  this.data +=\n    String.fromCharCode(i >> 24 & 0xFF) +\n    String.fromCharCode(i >> 16 & 0xFF) +\n    String.fromCharCode(i >> 8 & 0xFF) +\n    String.fromCharCode(i & 0xFF);\n};\n\n/**\n * Puts a 16-bit integer in this buffer in little-endian order.\n *\n * @param i the 16-bit integer.\n */\nutil.ByteBuffer.prototype.putInt16Le = function(i) {\n  this.data +=\n    String.fromCharCode(i & 0xFF) +\n    String.fromCharCode(i >> 8 & 0xFF);\n};\n\n/**\n * Puts a 24-bit integer in this buffer in little-endian order.\n *\n * @param i the 24-bit integer.\n */\nutil.ByteBuffer.prototype.putInt24Le = function(i) {\n  this.data +=\n    String.fromCharCode(i & 0xFF) +\n    String.fromCharCode(i >> 8 & 0xFF) +\n    String.fromCharCode(i >> 16 & 0xFF);\n};\n\n/**\n * Puts a 32-bit integer in this buffer in little-endian order.\n *\n * @param i the 32-bit integer.\n */\nutil.ByteBuffer.prototype.putInt32Le = function(i) {\n  this.data +=\n    String.fromCharCode(i & 0xFF) +\n    String.fromCharCode(i >> 8 & 0xFF) +\n    String.fromCharCode(i >> 16 & 0xFF) +\n    String.fromCharCode(i >> 24 & 0xFF);\n};\n\n/**\n * Puts an n-bit integer in this buffer in big-endian order.\n *\n * @param i the n-bit integer.\n * @param n the number of bits in the integer.\n */\nutil.ByteBuffer.prototype.putInt = function(i, n) {\n  do {\n    n -= 8;\n    this.data += String.fromCharCode((i >> n) & 0xFF);\n  }\n  while(n > 0);\n};\n\n/**\n * Puts the given buffer into this buffer.\n *\n * @param buffer the buffer to put into this one.\n */\nutil.ByteBuffer.prototype.putBuffer = function(buffer) {\n  this.data += buffer.getBytes();\n};\n\n/**\n * Gets a byte from this buffer and advances the read pointer by 1.\n *\n * @return the byte.\n */\nutil.ByteBuffer.prototype.getByte = function() {\n  return this.data.charCodeAt(this.read++);\n};\n\n/**\n * Gets a uint16 from this buffer in big-endian order and advances the read\n * pointer by 2.\n *\n * @return the uint16.\n */\nutil.ByteBuffer.prototype.getInt16 = function() {\n  var rval = (\n    this.data.charCodeAt(this.read) << 8 ^\n    this.data.charCodeAt(this.read + 1));\n  this.read += 2;\n  return rval;\n};\n\n/**\n * Gets a uint24 from this buffer in big-endian order and advances the read\n * pointer by 3.\n *\n * @return the uint24.\n */\nutil.ByteBuffer.prototype.getInt24 = function() {\n  var rval = (\n    this.data.charCodeAt(this.read) << 16 ^\n    this.data.charCodeAt(this.read + 1) << 8 ^\n    this.data.charCodeAt(this.read + 2));\n  this.read += 3;\n  return rval;\n};\n\n/**\n * Gets a uint32 from this buffer in big-endian order and advances the read\n * pointer by 4.\n *\n * @return the word.\n */\nutil.ByteBuffer.prototype.getInt32 = function() {\n  var rval = (\n    this.data.charCodeAt(this.read) << 24 ^\n    this.data.charCodeAt(this.read + 1) << 16 ^\n    this.data.charCodeAt(this.read + 2) << 8 ^\n    this.data.charCodeAt(this.read + 3));\n  this.read += 4;\n  return rval;\n};\n\n/**\n * Gets a uint16 from this buffer in little-endian order and advances the read\n * pointer by 2.\n *\n * @return the uint16.\n */\nutil.ByteBuffer.prototype.getInt16Le = function() {\n  var rval = (\n    this.data.charCodeAt(this.read) ^\n    this.data.charCodeAt(this.read + 1) << 8);\n  this.read += 2;\n  return rval;\n};\n\n/**\n * Gets a uint24 from this buffer in little-endian order and advances the read\n * pointer by 3.\n *\n * @return the uint24.\n */\nutil.ByteBuffer.prototype.getInt24Le = function() {\n  var rval = (\n    this.data.charCodeAt(this.read) ^\n    this.data.charCodeAt(this.read + 1) << 8 ^\n    this.data.charCodeAt(this.read + 2) << 16);\n  this.read += 3;\n  return rval;\n};\n\n/**\n * Gets a uint32 from this buffer in little-endian order and advances the read\n * pointer by 4.\n *\n * @return the word.\n */\nutil.ByteBuffer.prototype.getInt32Le = function() {\n  var rval = (\n    this.data.charCodeAt(this.read) ^\n    this.data.charCodeAt(this.read + 1) << 8 ^\n    this.data.charCodeAt(this.read + 2) << 16 ^\n    this.data.charCodeAt(this.read + 3) << 24);\n  this.read += 4;\n  return rval;\n};\n\n/**\n * Gets an n-bit integer from this buffer in big-endian order and advances the\n * read pointer by n/8.\n *\n * @param n the number of bits in the integer.\n *\n * @return the integer.\n */\nutil.ByteBuffer.prototype.getInt = function(n) {\n  var rval = 0;\n  do {\n    rval = (rval << n) + this.data.charCodeAt(this.read++);\n    n -= 8;\n  }\n  while(n > 0);\n  return rval;\n};\n\n/**\n * Reads bytes out into a UTF-8 string and clears them from the buffer.\n *\n * @param count the number of bytes to read, undefined or null for all.\n *\n * @return a UTF-8 string of bytes.\n */\nutil.ByteBuffer.prototype.getBytes = function(count) {\n  var rval;\n  if(count) {\n    // read count bytes\n    count = Math.min(this.length(), count);\n    rval = this.data.slice(this.read, this.read + count);\n    this.read += count;\n  }\n  else if(count === 0) {\n    rval = '';\n  }\n  else {\n    // read all bytes, optimize to only copy when needed\n    rval = (this.read === 0) ? this.data : this.data.slice(this.read);\n    this.clear();\n  }\n  return rval;\n};\n\n/**\n * Gets a UTF-8 encoded string of the bytes from this buffer without modifying\n * the read pointer.\n *\n * @param count the number of bytes to get, omit to get all.\n *\n * @return a string full of UTF-8 encoded characters.\n */\nutil.ByteBuffer.prototype.bytes = function(count) {\n  return (typeof(count) === 'undefined' ?\n    this.data.slice(this.read) :\n    this.data.slice(this.read, this.read + count));\n};\n\n/**\n * Gets a byte at the given index without modifying the read pointer.\n *\n * @param i the byte index.\n *\n * @return the byte.\n */\nutil.ByteBuffer.prototype.at = function(i) {\n  return this.data.charCodeAt(this.read + i);\n};\n\n/**\n * Puts a byte at the given index without modifying the read pointer.\n *\n * @param i the byte index.\n * @param b the byte to put.\n */\nutil.ByteBuffer.prototype.setAt = function(i, b) {\n  this.data = this.data.substr(0, this.read + i) +\n    String.fromCharCode(b) +\n    this.data.substr(this.read + i + 1);\n};\n\n/**\n * Gets the last byte without modifying the read pointer.\n *\n * @return the last byte.\n */\nutil.ByteBuffer.prototype.last = function() {\n  return this.data.charCodeAt(this.data.length - 1);\n};\n\n/**\n * Creates a copy of this buffer.\n *\n * @return the copy.\n */\nutil.ByteBuffer.prototype.copy = function() {\n  var c = util.createBuffer(this.data);\n  c.read = this.read;\n  return c;\n};\n\n/**\n * Compacts this buffer.\n */\nutil.ByteBuffer.prototype.compact = function() {\n  if(this.read > 0) {\n    this.data = this.data.slice(this.read);\n    this.read = 0;\n  }\n};\n\n/**\n * Clears this buffer.\n */\nutil.ByteBuffer.prototype.clear = function() {\n  this.data = '';\n  this.read = 0;\n};\n\n/**\n * Shortens this buffer by triming bytes off of the end of this buffer.\n *\n * @param count the number of bytes to trim off.\n */\nutil.ByteBuffer.prototype.truncate = function(count) {\n  var len = Math.max(0, this.length() - count);\n  this.data = this.data.substr(this.read, len);\n  this.read = 0;\n};\n\n/**\n * Converts this buffer to a hexadecimal string.\n *\n * @return a hexadecimal string.\n */\nutil.ByteBuffer.prototype.toHex = function() {\n  var rval = '';\n  for(var i = this.read; i < this.data.length; ++i) {\n    var b = this.data.charCodeAt(i);\n    if(b < 16) {\n      rval += '0';\n    }\n    rval += b.toString(16);\n  }\n  return rval;\n};\n\n/**\n * Converts this buffer to a UTF-16 string (standard JavaScript string).\n *\n * @return a UTF-16 string.\n */\nutil.ByteBuffer.prototype.toString = function() {\n  return util.decodeUtf8(this.bytes());\n};\n/**\n * util.createBuffer\n */\n\nutil.createBuffer = function(input, encoding) {\n  encoding = encoding || 'raw';\n  if(input !== undefined && encoding === 'utf8') {\n    input = util.encodeUtf8(input);\n  }\n  return new util.ByteBuffer(input);\n};\n\n/**\n * prng.create\n */\n\nvar prng = forge.prng = {};\nvar crypto = null;\n\nprng.create = function(plugin) {\n  var ctx = {\n    plugin: plugin,\n    key: null,\n    seed: null,\n    time: null,\n    // number of reseeds so far\n    reseeds: 0,\n    // amount of data generated so far\n    generated: 0\n  };\n\n  // create 32 entropy pools (each is a message digest)\n  var md = plugin.md;\n  var pools = new Array(32);\n  for(var i = 0; i < 32; ++i) {\n    pools[i] = md.create();\n  }\n  ctx.pools = pools;\n\n  // entropy pools are written to cyclically, starting at index 0\n  ctx.pool = 0;\n\n  /**\n   * Generates random bytes. The bytes may be generated synchronously or\n   * asynchronously. Web workers must use the asynchronous interface or\n   * else the behavior is undefined.\n   *\n   * @param count the number of random bytes to generate.\n   * @param [callback(err, bytes)] called once the operation completes.\n   *\n   * @return count random bytes as a string.\n   */\n  ctx.generate = function(count, callback) {\n    // do synchronously\n    if(!callback) {\n      return ctx.generateSync(count);\n    }\n\n    // simple generator using counter-based CBC\n    var cipher = ctx.plugin.cipher;\n    var increment = ctx.plugin.increment;\n    var formatKey = ctx.plugin.formatKey;\n    var formatSeed = ctx.plugin.formatSeed;\n    var b = forge.util.createBuffer();\n\n    generate();\n\n    function generate(err) {\n      if(err) {\n        return callback(err);\n      }\n\n      // sufficient bytes generated\n      if(b.length() >= count) {\n        return callback(null, b.getBytes(count));\n      }\n\n      // if amount of data generated is greater than 1 MiB, trigger reseed\n      if(ctx.generated >= 1048576) {\n        // only do reseed at most every 100 ms\n        var now = +new Date();\n        if(ctx.time === null || (now - ctx.time > 100)) {\n          ctx.key = null;\n        }\n      }\n\n      if(ctx.key === null) {\n        return _reseed(generate);\n      }\n\n      // generate the random bytes\n      var bytes = cipher(ctx.key, ctx.seed);\n      ctx.generated += bytes.length;\n      b.putBytes(bytes);\n\n      // generate bytes for a new key and seed\n      ctx.key = formatKey(cipher(ctx.key, increment(ctx.seed)));\n      ctx.seed = formatSeed(cipher(ctx.key, ctx.seed));\n\n      forge.util.setImmediate(generate);\n    }\n  };\n\n  /**\n   * Generates random bytes synchronously.\n   *\n   * @param count the number of random bytes to generate.\n   *\n   * @return count random bytes as a string.\n   */\n  ctx.generateSync = function(count) {\n    // simple generator using counter-based CBC\n    var cipher = ctx.plugin.cipher;\n    var increment = ctx.plugin.increment;\n    var formatKey = ctx.plugin.formatKey;\n    var formatSeed = ctx.plugin.formatSeed;\n    var b = forge.util.createBuffer();\n    while(b.length() < count) {\n      // if amount of data generated is greater than 1 MiB, trigger reseed\n      if(ctx.generated >= 1048576) {\n        // only do reseed at most every 100 ms\n        var now = +new Date();\n        if(ctx.time === null || (now - ctx.time > 100)) {\n          ctx.key = null;\n        }\n      }\n\n      if(ctx.key === null) {\n        _reseedSync();\n      }\n\n      // generate the random bytes\n      var bytes = cipher(ctx.key, ctx.seed);\n      ctx.generated += bytes.length;\n      b.putBytes(bytes);\n\n      // generate bytes for a new key and seed\n      ctx.key = formatKey(cipher(ctx.key, increment(ctx.seed)));\n      ctx.seed = formatSeed(cipher(ctx.key, ctx.seed));\n    }\n\n    return b.getBytes(count);\n  };\n\n  /**\n   * Private function that asynchronously reseeds a generator.\n   *\n   * @param callback(err) called once the operation completes.\n   */\n  function _reseed(callback) {\n    if(ctx.pools[0].messageLength >= 32) {\n      _seed();\n      return callback();\n    }\n    // not enough seed data...\n    var needed = (32 - ctx.pools[0].messageLength) << 5;\n    ctx.seedFile(needed, function(err, bytes) {\n      if(err) {\n        return callback(err);\n      }\n      ctx.collect(bytes);\n      _seed();\n      callback();\n    });\n  }\n\n  /**\n   * Private function that synchronously reseeds a generator.\n   */\n  function _reseedSync() {\n    if(ctx.pools[0].messageLength >= 32) {\n      return _seed();\n    }\n    // not enough seed data...\n    var needed = (32 - ctx.pools[0].messageLength) << 5;\n    ctx.collect(ctx.seedFileSync(needed));\n    _seed();\n  }\n\n  /**\n   * Private function that seeds a generator once enough bytes are available.\n   */\n  function _seed() {\n    // create a SHA-1 message digest\n    var md = forge.md.sha1.create();\n\n    // digest pool 0's entropy and restart it\n    md.update(ctx.pools[0].digest().getBytes());\n    ctx.pools[0].start();\n\n    // digest the entropy of other pools whose index k meet the\n    // condition '2^k mod n == 0' where n is the number of reseeds\n    var k = 1;\n    for(var i = 1; i < 32; ++i) {\n      // prevent signed numbers from being used\n      k = (k === 31) ? 0x80000000 : (k << 2);\n      if(k % ctx.reseeds === 0) {\n        md.update(ctx.pools[i].digest().getBytes());\n        ctx.pools[i].start();\n      }\n    }\n\n    // get digest for key bytes and iterate again for seed bytes\n    var keyBytes = md.digest().getBytes();\n    md.start();\n    md.update(keyBytes);\n    var seedBytes = md.digest().getBytes();\n\n    // update\n    ctx.key = ctx.plugin.formatKey(keyBytes);\n    ctx.seed = ctx.plugin.formatSeed(seedBytes);\n    ++ctx.reseeds;\n    ctx.generated = 0;\n    ctx.time = +new Date();\n  }\n\n  /**\n   * The built-in default seedFile. This seedFile is used when entropy\n   * is needed immediately.\n   *\n   * @param needed the number of bytes that are needed.\n   *\n   * @return the random bytes.\n   */\n  function defaultSeedFile(needed) {\n    // use window.crypto.getRandomValues strong source of entropy if\n    // available\n    var b = forge.util.createBuffer();\n    if(typeof window !== 'undefined' &&\n      window.crypto && window.crypto.getRandomValues) {\n      var entropy = new Uint32Array(needed / 4);\n      try {\n        window.crypto.getRandomValues(entropy);\n        for(var i = 0; i < entropy.length; ++i) {\n          b.putInt32(entropy[i]);\n        }\n      }\n      catch(e) {\n        /* Mozilla claims getRandomValues can throw QuotaExceededError, so\n         ignore errors. In this case, weak entropy will be added, but\n         hopefully this never happens.\n         https://developer.mozilla.org/en-US/docs/DOM/window.crypto.getRandomValues\n         However I've never observed this exception --@evanj */\n      }\n    }\n\n    // be sad and add some weak random data\n    if(b.length() < needed) {\n      /* Draws from Park-Miller \"minimal standard\" 31 bit PRNG,\n      implemented with David G. Carta's optimization: with 32 bit math\n      and without division (Public Domain). */\n      var hi, lo, next;\n      var seed = Math.floor(Math.random() * 0xFFFF);\n      while(b.length() < needed) {\n        lo = 16807 * (seed & 0xFFFF);\n        hi = 16807 * (seed >> 16);\n        lo += (hi & 0x7FFF) << 16;\n        lo += hi >> 15;\n        lo = (lo & 0x7FFFFFFF) + (lo >> 31);\n        seed = lo & 0xFFFFFFFF;\n\n        // consume lower 3 bytes of seed\n        for(var i = 0; i < 3; ++i) {\n          // throw in more pseudo random\n          next = seed >>> (i << 3);\n          next ^= Math.floor(Math.random() * 0xFF);\n          b.putByte(String.fromCharCode(next & 0xFF));\n        }\n      }\n    }\n\n    return b.getBytes();\n  }\n  // initialize seed file APIs\n  if(crypto) {\n    // use nodejs async API\n    ctx.seedFile = function(needed, callback) {\n      crypto.randomBytes(needed, function(err, bytes) {\n        if(err) {\n          return callback(err);\n        }\n        callback(null, bytes.toString());\n      });\n    };\n    // use nodejs sync API\n    ctx.seedFileSync = function(needed) {\n      return crypto.randomBytes(needed).toString();\n    };\n  }\n  else {\n    ctx.seedFile = function(needed, callback) {\n      try {\n        callback(null, defaultSeedFile(needed));\n      }\n      catch(e) {\n        callback(e);\n      }\n    };\n    ctx.seedFileSync = defaultSeedFile;\n  }\n\n  /**\n   * Adds entropy to a prng ctx's accumulator.\n   *\n   * @param bytes the bytes of entropy as a string.\n   */\n  ctx.collect = function(bytes) {\n    // iterate over pools distributing entropy cyclically\n    var count = bytes.length;\n    for(var i = 0; i < count; ++i) {\n      ctx.pools[ctx.pool].update(bytes.substr(i, 1));\n      ctx.pool = (ctx.pool === 31) ? 0 : ctx.pool + 1;\n    }\n  };\n\n  /**\n   * Collects an integer of n bits.\n   *\n   * @param i the integer entropy.\n   * @param n the number of bits in the integer.\n   */\n  ctx.collectInt = function(i, n) {\n    var bytes = '';\n    for(var x = 0; x < n; x += 8) {\n      bytes += String.fromCharCode((i >> x) & 0xFF);\n    }\n    ctx.collect(bytes);\n  };\n\n  /**\n   * Registers a Web Worker to receive immediate entropy from the main thread.\n   * This method is required until Web Workers can access the native crypto\n   * API. This method should be called twice for each created worker, once in\n   * the main thread, and once in the worker itself.\n   *\n   * @param worker the worker to register.\n   */\n  ctx.registerWorker = function(worker) {\n    // worker receives random bytes\n    if(worker === self) {\n      ctx.seedFile = function(needed, callback) {\n        function listener(e) {\n          var data = e.data;\n          if(data.forge && data.forge.prng) {\n            self.removeEventListener('message', listener);\n            callback(data.forge.prng.err, data.forge.prng.bytes);\n          }\n        }\n        self.addEventListener('message', listener);\n        self.postMessage({forge: {prng: {needed: needed}}});\n      };\n    }\n    // main thread sends random bytes upon request\n    else {\n      function listener(e) {\n        var data = e.data;\n        if(data.forge && data.forge.prng) {\n          ctx.seedFile(data.forge.prng.needed, function(err, bytes) {\n            worker.postMessage({forge: {prng: {err: err, bytes: bytes}}});\n          });\n        }\n      }\n      // TODO: do we need to remove the event listener when the worker dies?\n      worker.addEventListener('message', listener);\n    }\n  };\n\n  return ctx;\n};\n\n/**\n * aes._expendKey\n */\n\nvar init = false; // not yet initialized\nvar Nb = 4;       // number of words comprising the state (AES = 4)\nvar sbox;         // non-linear substitution table used in key expansion\nvar isbox;        // inversion of sbox\nvar rcon;         // round constant word array\nvar mix;          // mix-columns table\nvar imix;         // inverse mix-columns table\n\nvar initialize = function() {\n  init = true;\n\n  /* Populate the Rcon table. These are the values given by\n    [x^(i-1),{00},{00},{00}] where x^(i-1) are powers of x (and x = 0x02)\n    in the field of GF(2^8), where i starts at 1.\n\n    rcon[0] = [0x00, 0x00, 0x00, 0x00]\n    rcon[1] = [0x01, 0x00, 0x00, 0x00] 2^(1-1) = 2^0 = 1\n    rcon[2] = [0x02, 0x00, 0x00, 0x00] 2^(2-1) = 2^1 = 2\n    ...\n    rcon[9]  = [0x1B, 0x00, 0x00, 0x00] 2^(9-1)  = 2^8 = 0x1B\n    rcon[10] = [0x36, 0x00, 0x00, 0x00] 2^(10-1) = 2^9 = 0x36\n\n    We only store the first byte because it is the only one used.\n  */\n  rcon = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1B, 0x36];\n\n  // compute xtime table which maps i onto GF(i, 0x02)\n  var xtime = new Array(256);\n  for(var i = 0; i < 128; ++i) {\n    xtime[i] = i << 1;\n    xtime[i + 128] = (i + 128) << 1 ^ 0x11B;\n  }\n\n  // compute all other tables\n  sbox = new Array(256);\n  isbox = new Array(256);\n  mix = new Array(4);\n  imix = new Array(4);\n  for(var i = 0; i < 4; ++i) {\n    mix[i] = new Array(256);\n    imix[i] = new Array(256);\n  }\n  var e = 0, ei = 0, e2, e4, e8, sx, sx2, me, ime;\n  for(var i = 0; i < 256; ++i) {\n    /* We need to generate the SubBytes() sbox and isbox tables so that\n      we can perform byte substitutions. This requires us to traverse\n      all of the elements in GF, find their multiplicative inverses,\n      and apply to each the following affine transformation:\n\n      bi' = bi ^ b(i + 4) mod 8 ^ b(i + 5) mod 8 ^ b(i + 6) mod 8 ^\n            b(i + 7) mod 8 ^ ci\n      for 0 <= i < 8, where bi is the ith bit of the byte, and ci is the\n      ith bit of a byte c with the value {63} or {01100011}.\n\n      It is possible to traverse every possible value in a Galois field\n      using what is referred to as a 'generator'. There are many\n      generators (128 out of 256): 3,5,6,9,11,82 to name a few. To fully\n      traverse GF we iterate 255 times, multiplying by our generator\n      each time.\n\n      On each iteration we can determine the multiplicative inverse for\n      the current element.\n\n      Suppose there is an element in GF 'e'. For a given generator 'g',\n      e = g^x. The multiplicative inverse of e is g^(255 - x). It turns\n      out that if use the inverse of a generator as another generator\n      it will produce all of the corresponding multiplicative inverses\n      at the same time. For this reason, we choose 5 as our inverse\n      generator because it only requires 2 multiplies and 1 add and its\n      inverse, 82, requires relatively few operations as well.\n\n      In order to apply the affine transformation, the multiplicative\n      inverse 'ei' of 'e' can be repeatedly XOR'd (4 times) with a\n      bit-cycling of 'ei'. To do this 'ei' is first stored in 's' and\n      'x'. Then 's' is left shifted and the high bit of 's' is made the\n      low bit. The resulting value is stored in 's'. Then 'x' is XOR'd\n      with 's' and stored in 'x'. On each subsequent iteration the same\n      operation is performed. When 4 iterations are complete, 'x' is\n      XOR'd with 'c' (0x63) and the transformed value is stored in 'x'.\n      For example:\n\n      s = 01000001\n      x = 01000001\n\n      iteration 1: s = 10000010, x ^= s\n      iteration 2: s = 00000101, x ^= s\n      iteration 3: s = 00001010, x ^= s\n      iteration 4: s = 00010100, x ^= s\n      x ^= 0x63\n\n      This can be done with a loop where s = (s << 1) | (s >> 7). However,\n      it can also be done by using a single 16-bit (in this case 32-bit)\n      number 'sx'. Since XOR is an associative operation, we can set 'sx'\n      to 'ei' and then XOR it with 'sx' left-shifted 1,2,3, and 4 times.\n      The most significant bits will flow into the high 8 bit positions\n      and be correctly XOR'd with one another. All that remains will be\n      to cycle the high 8 bits by XOR'ing them all with the lower 8 bits\n      afterwards.\n\n      At the same time we're populating sbox and isbox we can precompute\n      the multiplication we'll need to do to do MixColumns() later.\n    */\n\n    // apply affine transformation\n    sx = ei ^ (ei << 1) ^ (ei << 2) ^ (ei << 3) ^ (ei << 4);\n    sx = (sx >> 8) ^ (sx & 255) ^ 0x63;\n\n    // update tables\n    sbox[e] = sx;\n    isbox[sx] = e;\n\n    /* Mixing columns is done using matrix multiplication. The columns\n      that are to be mixed are each a single word in the current state.\n      The state has Nb columns (4 columns). Therefore each column is a\n      4 byte word. So to mix the columns in a single column 'c' where\n      its rows are r0, r1, r2, and r3, we use the following matrix\n      multiplication:\n\n      [2 3 1 1]*[r0,c]=[r'0,c]\n      [1 2 3 1] [r1,c] [r'1,c]\n      [1 1 2 3] [r2,c] [r'2,c]\n      [3 1 1 2] [r3,c] [r'3,c]\n\n      r0, r1, r2, and r3 are each 1 byte of one of the words in the\n      state (a column). To do matrix multiplication for each mixed\n      column c' we multiply the corresponding row from the left matrix\n      with the corresponding column from the right matrix. In total, we\n      get 4 equations:\n\n      r0,c' = 2*r0,c + 3*r1,c + 1*r2,c + 1*r3,c\n      r1,c' = 1*r0,c + 2*r1,c + 3*r2,c + 1*r3,c\n      r2,c' = 1*r0,c + 1*r1,c + 2*r2,c + 3*r3,c\n      r3,c' = 3*r0,c + 1*r1,c + 1*r2,c + 2*r3,c\n\n      As usual, the multiplication is as previously defined and the\n      addition is XOR. In order to optimize mixing columns we can store\n      the multiplication results in tables. If you think of the whole\n      column as a word (it might help to visualize by mentally rotating\n      the equations above by counterclockwise 90 degrees) then you can\n      see that it would be useful to map the multiplications performed on\n      each byte (r0, r1, r2, r3) onto a word as well. For instance, we\n      could map 2*r0,1*r0,1*r0,3*r0 onto a word by storing 2*r0 in the\n      highest 8 bits and 3*r0 in the lowest 8 bits (with the other two\n      respectively in the middle). This means that a table can be\n      constructed that uses r0 as an index to the word. We can do the\n      same with r1, r2, and r3, creating a total of 4 tables.\n\n      To construct a full c', we can just look up each byte of c in\n      their respective tables and XOR the results together.\n\n      Also, to build each table we only have to calculate the word\n      for 2,1,1,3 for every byte ... which we can do on each iteration\n      of this loop since we will iterate over every byte. After we have\n      calculated 2,1,1,3 we can get the results for the other tables\n      by cycling the byte at the end to the beginning. For instance\n      we can take the result of table 2,1,1,3 and produce table 3,2,1,1\n      by moving the right most byte to the left most position just like\n      how you can imagine the 3 moved out of 2,1,1,3 and to the front\n      to produce 3,2,1,1.\n\n      There is another optimization in that the same multiples of\n      the current element we need in order to advance our generator\n      to the next iteration can be reused in performing the 2,1,1,3\n      calculation. We also calculate the inverse mix column tables,\n      with e,9,d,b being the inverse of 2,1,1,3.\n\n      When we're done, and we need to actually mix columns, the first\n      byte of each state word should be put through mix[0] (2,1,1,3),\n      the second through mix[1] (3,2,1,1) and so forth. Then they should\n      be XOR'd together to produce the fully mixed column.\n    */\n\n    // calculate mix and imix table values\n    sx2 = xtime[sx];\n    e2 = xtime[e];\n    e4 = xtime[e2];\n    e8 = xtime[e4];\n    me =\n      (sx2 << 24) ^  // 2\n      (sx << 16) ^   // 1\n      (sx << 8) ^    // 1\n      (sx ^ sx2);    // 3\n    ime =\n      (e2 ^ e4 ^ e8) << 24 ^  // E (14)\n      (e ^ e8) << 16 ^        // 9\n      (e ^ e4 ^ e8) << 8 ^    // D (13)\n      (e ^ e2 ^ e8);          // B (11)\n    // produce each of the mix tables by rotating the 2,1,1,3 value\n    for(var n = 0; n < 4; ++n) {\n      mix[n][e] = me;\n      imix[n][sx] = ime;\n      // cycle the right most byte to the left most position\n      // ie: 2,1,1,3 becomes 3,2,1,1\n      me = me << 24 | me >>> 8;\n      ime = ime << 24 | ime >>> 8;\n    }\n\n    // get next element and inverse\n    if(e === 0) {\n      // 1 is the inverse of 1\n      e = ei = 1;\n    }\n    else {\n      // e = 2e + 2*2*2*(10e)) = multiply e by 82 (chosen generator)\n      // ei = ei + 2*2*ei = multiply ei by 5 (inverse generator)\n      e = e2 ^ xtime[xtime[xtime[e2 ^ e8]]];\n      ei ^= xtime[xtime[ei]];\n    }\n  }\n};\n\n/**\n * Generates a key schedule using the AES key expansion algorithm.\n *\n * The AES algorithm takes the Cipher Key, K, and performs a Key Expansion\n * routine to generate a key schedule. The Key Expansion generates a total\n * of Nb*(Nr + 1) words: the algorithm requires an initial set of Nb words,\n * and each of the Nr rounds requires Nb words of key data. The resulting\n * key schedule consists of a linear array of 4-byte words, denoted [wi ],\n * with i in the range 0 ≤ i < Nb(Nr + 1).\n *\n * KeyExpansion(byte key[4*Nk], word w[Nb*(Nr+1)], Nk)\n * AES-128 (Nb=4, Nk=4, Nr=10)\n * AES-192 (Nb=4, Nk=6, Nr=12)\n * AES-256 (Nb=4, Nk=8, Nr=14)\n * Note: Nr=Nk+6.\n *\n * Nb is the number of columns (32-bit words) comprising the State (or\n * number of bytes in a block). For AES, Nb=4.\n *\n * @param key the key to schedule (as an array of 32-bit words).\n * @param decrypt true to modify the key schedule to decrypt, false not to.\n *\n * @return the generated key schedule.\n */\nvar expandKey = function(key, decrypt) {\n  // copy the key's words to initialize the key schedule\n  var w = key.slice(0);\n\n  /* RotWord() will rotate a word, moving the first byte to the last\n    byte's position (shifting the other bytes left).\n\n    We will be getting the value of Rcon at i / Nk. 'i' will iterate\n    from Nk to (Nb * Nr+1). Nk = 4 (4 byte key), Nb = 4 (4 words in\n    a block), Nr = Nk + 6 (10). Therefore 'i' will iterate from\n    4 to 44 (exclusive). Each time we iterate 4 times, i / Nk will\n    increase by 1. We use a counter iNk to keep track of this.\n   */\n\n  // go through the rounds expanding the key\n  var temp, iNk = 1;\n  var Nk = w.length;\n  var Nr1 = Nk + 6 + 1;\n  var end = Nb * Nr1;\n  for(var i = Nk; i < end; ++i) {\n    temp = w[i - 1];\n    if(i % Nk === 0) {\n      // temp = SubWord(RotWord(temp)) ^ Rcon[i / Nk]\n      temp =\n        sbox[temp >>> 16 & 255] << 24 ^\n        sbox[temp >>> 8 & 255] << 16 ^\n        sbox[temp & 255] << 8 ^\n        sbox[temp >>> 24] ^ (rcon[iNk] << 24);\n      iNk++;\n    }\n    else if(Nk > 6 && (i % Nk == 4)) {\n      // temp = SubWord(temp)\n      temp =\n        sbox[temp >>> 24] << 24 ^\n        sbox[temp >>> 16 & 255] << 16 ^\n        sbox[temp >>> 8 & 255] << 8 ^\n        sbox[temp & 255];\n    }\n    w[i] = w[i - Nk] ^ temp;\n  }\n\n   /* When we are updating a cipher block we always use the code path for\n     encryption whether we are decrypting or not (to shorten code and\n     simplify the generation of look up tables). However, because there\n     are differences in the decryption algorithm, other than just swapping\n     in different look up tables, we must transform our key schedule to\n     account for these changes:\n\n     1. The decryption algorithm gets its key rounds in reverse order.\n     2. The decryption algorithm adds the round key before mixing columns\n       instead of afterwards.\n\n     We don't need to modify our key schedule to handle the first case,\n     we can just traverse the key schedule in reverse order when decrypting.\n\n     The second case requires a little work.\n\n     The tables we built for performing rounds will take an input and then\n     perform SubBytes() and MixColumns() or, for the decrypt version,\n     InvSubBytes() and InvMixColumns(). But the decrypt algorithm requires\n     us to AddRoundKey() before InvMixColumns(). This means we'll need to\n     apply some transformations to the round key to inverse-mix its columns\n     so they'll be correct for moving AddRoundKey() to after the state has\n     had its columns inverse-mixed.\n\n     To inverse-mix the columns of the state when we're decrypting we use a\n     lookup table that will apply InvSubBytes() and InvMixColumns() at the\n     same time. However, the round key's bytes are not inverse-substituted\n     in the decryption algorithm. To get around this problem, we can first\n     substitute the bytes in the round key so that when we apply the\n     transformation via the InvSubBytes()+InvMixColumns() table, it will\n     undo our substitution leaving us with the original value that we\n     want -- and then inverse-mix that value.\n\n     This change will correctly alter our key schedule so that we can XOR\n     each round key with our already transformed decryption state. This\n     allows us to use the same code path as the encryption algorithm.\n\n     We make one more change to the decryption key. Since the decryption\n     algorithm runs in reverse from the encryption algorithm, we reverse\n     the order of the round keys to avoid having to iterate over the key\n     schedule backwards when running the encryption algorithm later in\n     decryption mode. In addition to reversing the order of the round keys,\n     we also swap each round key's 2nd and 4th rows. See the comments\n     section where rounds are performed for more details about why this is\n     done. These changes are done inline with the other substitution\n     described above.\n  */\n  if(decrypt) {\n    var tmp;\n    var m0 = imix[0];\n    var m1 = imix[1];\n    var m2 = imix[2];\n    var m3 = imix[3];\n    var wnew = w.slice(0);\n    var end = w.length;\n    for(var i = 0, wi = end - Nb; i < end; i += Nb, wi -= Nb) {\n      // do not sub the first or last round key (round keys are Nb\n      // words) as no column mixing is performed before they are added,\n      // but do change the key order\n      if(i === 0 || i === (end - Nb)) {\n        wnew[i] = w[wi];\n        wnew[i + 1] = w[wi + 3];\n        wnew[i + 2] = w[wi + 2];\n        wnew[i + 3] = w[wi + 1];\n      }\n      else {\n        // substitute each round key byte because the inverse-mix\n        // table will inverse-substitute it (effectively cancel the\n        // substitution because round key bytes aren't sub'd in\n        // decryption mode) and swap indexes 3 and 1\n        for(var n = 0; n < Nb; ++n) {\n          tmp = w[wi + n];\n          wnew[i + (3&-n)] =\n            m0[sbox[tmp >>> 24]] ^\n            m1[sbox[tmp >>> 16 & 255]] ^\n            m2[sbox[tmp >>> 8 & 255]] ^\n            m3[sbox[tmp & 255]];\n        }\n      }\n    }\n    w = wnew;\n  }\n\n  return w;\n};\n\n\nforge.aes._expandKey = function(key, decrypt) {\n  if(!init) {\n    initialize();\n  }\n  return expandKey(key, decrypt);\n};\n\n/**\n * aes._updateBlock\n */\n\nvar _updateBlock = function(w, input, output, decrypt) {\n  /*\n  Cipher(byte in[4*Nb], byte out[4*Nb], word w[Nb*(Nr+1)])\n  begin\n    byte state[4,Nb]\n    state = in\n    AddRoundKey(state, w[0, Nb-1])\n    for round = 1 step 1 to Nr–1\n      SubBytes(state)\n      ShiftRows(state)\n      MixColumns(state)\n      AddRoundKey(state, w[round*Nb, (round+1)*Nb-1])\n    end for\n    SubBytes(state)\n    ShiftRows(state)\n    AddRoundKey(state, w[Nr*Nb, (Nr+1)*Nb-1])\n    out = state\n  end\n\n  InvCipher(byte in[4*Nb], byte out[4*Nb], word w[Nb*(Nr+1)])\n  begin\n    byte state[4,Nb]\n    state = in\n    AddRoundKey(state, w[Nr*Nb, (Nr+1)*Nb-1])\n    for round = Nr-1 step -1 downto 1\n      InvShiftRows(state)\n      InvSubBytes(state)\n      AddRoundKey(state, w[round*Nb, (round+1)*Nb-1])\n      InvMixColumns(state)\n    end for\n    InvShiftRows(state)\n    InvSubBytes(state)\n    AddRoundKey(state, w[0, Nb-1])\n    out = state\n  end\n  */\n\n  // Encrypt: AddRoundKey(state, w[0, Nb-1])\n  // Decrypt: AddRoundKey(state, w[Nr*Nb, (Nr+1)*Nb-1])\n  var Nr = w.length / 4 - 1;\n  var m0, m1, m2, m3, sub;\n  if(decrypt) {\n    m0 = imix[0];\n    m1 = imix[1];\n    m2 = imix[2];\n    m3 = imix[3];\n    sub = isbox;\n  }\n  else {\n    m0 = mix[0];\n    m1 = mix[1];\n    m2 = mix[2];\n    m3 = mix[3];\n    sub = sbox;\n  }\n  var a, b, c, d, a2, b2, c2;\n  a = input[0] ^ w[0];\n  b = input[decrypt ? 3 : 1] ^ w[1];\n  c = input[2] ^ w[2];\n  d = input[decrypt ? 1 : 3] ^ w[3];\n  var i = 3;\n\n  /* In order to share code we follow the encryption algorithm when both\n    encrypting and decrypting. To account for the changes required in the\n    decryption algorithm, we use different lookup tables when decrypting\n    and use a modified key schedule to account for the difference in the\n    order of transformations applied when performing rounds. We also get\n    key rounds in reverse order (relative to encryption). */\n  for(var round = 1; round < Nr; ++round) {\n    /* As described above, we'll be using table lookups to perform the\n      column mixing. Each column is stored as a word in the state (the\n      array 'input' has one column as a word at each index). In order to\n      mix a column, we perform these transformations on each row in c,\n      which is 1 byte in each word. The new column for c0 is c'0:\n\n               m0      m1      m2      m3\n      r0,c'0 = 2*r0,c0 + 3*r1,c0 + 1*r2,c0 + 1*r3,c0\n      r1,c'0 = 1*r0,c0 + 2*r1,c0 + 3*r2,c0 + 1*r3,c0\n      r2,c'0 = 1*r0,c0 + 1*r1,c0 + 2*r2,c0 + 3*r3,c0\n      r3,c'0 = 3*r0,c0 + 1*r1,c0 + 1*r2,c0 + 2*r3,c0\n\n      So using mix tables where c0 is a word with r0 being its upper\n      8 bits and r3 being its lower 8 bits:\n\n      m0[c0 >> 24] will yield this word: [2*r0,1*r0,1*r0,3*r0]\n      ...\n      m3[c0 & 255] will yield this word: [1*r3,1*r3,3*r3,2*r3]\n\n      Therefore to mix the columns in each word in the state we\n      do the following (& 255 omitted for brevity):\n      c'0,r0 = m0[c0 >> 24] ^ m1[c1 >> 16] ^ m2[c2 >> 8] ^ m3[c3]\n      c'0,r1 = m0[c0 >> 24] ^ m1[c1 >> 16] ^ m2[c2 >> 8] ^ m3[c3]\n      c'0,r2 = m0[c0 >> 24] ^ m1[c1 >> 16] ^ m2[c2 >> 8] ^ m3[c3]\n      c'0,r3 = m0[c0 >> 24] ^ m1[c1 >> 16] ^ m2[c2 >> 8] ^ m3[c3]\n\n      However, before mixing, the algorithm requires us to perform\n      ShiftRows(). The ShiftRows() transformation cyclically shifts the\n      last 3 rows of the state over different offsets. The first row\n      (r = 0) is not shifted.\n\n      s'_r,c = s_r,(c + shift(r, Nb) mod Nb\n      for 0 < r < 4 and 0 <= c < Nb and\n      shift(1, 4) = 1\n      shift(2, 4) = 2\n      shift(3, 4) = 3.\n\n      This causes the first byte in r = 1 to be moved to the end of\n      the row, the first 2 bytes in r = 2 to be moved to the end of\n      the row, the first 3 bytes in r = 3 to be moved to the end of\n      the row:\n\n      r1: [c0 c1 c2 c3] => [c1 c2 c3 c0]\n      r2: [c0 c1 c2 c3]    [c2 c3 c0 c1]\n      r3: [c0 c1 c2 c3]    [c3 c0 c1 c2]\n\n      We can make these substitutions inline with our column mixing to\n      generate an updated set of equations to produce each word in the\n      state (note the columns have changed positions):\n\n      c0 c1 c2 c3 => c0 c1 c2 c3\n      c0 c1 c2 c3    c1 c2 c3 c0  (cycled 1 byte)\n      c0 c1 c2 c3    c2 c3 c0 c1  (cycled 2 bytes)\n      c0 c1 c2 c3    c3 c0 c1 c2  (cycled 3 bytes)\n\n      Therefore:\n\n      c'0 = 2*r0,c0 + 3*r1,c1 + 1*r2,c2 + 1*r3,c3\n      c'0 = 1*r0,c0 + 2*r1,c1 + 3*r2,c2 + 1*r3,c3\n      c'0 = 1*r0,c0 + 1*r1,c1 + 2*r2,c2 + 3*r3,c3\n      c'0 = 3*r0,c0 + 1*r1,c1 + 1*r2,c2 + 2*r3,c3\n\n      c'1 = 2*r0,c1 + 3*r1,c2 + 1*r2,c3 + 1*r3,c0\n      c'1 = 1*r0,c1 + 2*r1,c2 + 3*r2,c3 + 1*r3,c0\n      c'1 = 1*r0,c1 + 1*r1,c2 + 2*r2,c3 + 3*r3,c0\n      c'1 = 3*r0,c1 + 1*r1,c2 + 1*r2,c3 + 2*r3,c0\n\n      ... and so forth for c'2 and c'3. The important distinction is\n      that the columns are cycling, with c0 being used with the m0\n      map when calculating c0, but c1 being used with the m0 map when\n      calculating c1 ... and so forth.\n\n      When performing the inverse we transform the mirror image and\n      skip the bottom row, instead of the top one, and move upwards:\n\n      c3 c2 c1 c0 => c0 c3 c2 c1  (cycled 3 bytes) *same as encryption\n      c3 c2 c1 c0    c1 c0 c3 c2  (cycled 2 bytes)\n      c3 c2 c1 c0    c2 c1 c0 c3  (cycled 1 byte)  *same as encryption\n      c3 c2 c1 c0    c3 c2 c1 c0\n\n      If you compare the resulting matrices for ShiftRows()+MixColumns()\n      and for InvShiftRows()+InvMixColumns() the 2nd and 4th columns are\n      different (in encrypt mode vs. decrypt mode). So in order to use\n      the same code to handle both encryption and decryption, we will\n      need to do some mapping.\n\n      If in encryption mode we let a=c0, b=c1, c=c2, d=c3, and r<N> be\n      a row number in the state, then the resulting matrix in encryption\n      mode for applying the above transformations would be:\n\n      r1: a b c d\n      r2: b c d a\n      r3: c d a b\n      r4: d a b c\n\n      If we did the same in decryption mode we would get:\n\n      r1: a d c b\n      r2: b a d c\n      r3: c b a d\n      r4: d c b a\n\n      If instead we swap d and b (set b=c3 and d=c1), then we get:\n\n      r1: a b c d\n      r2: d a b c\n      r3: c d a b\n      r4: b c d a\n\n      Now the 1st and 3rd rows are the same as the encryption matrix. All\n      we need to do then to make the mapping exactly the same is to swap\n      the 2nd and 4th rows when in decryption mode. To do this without\n      having to do it on each iteration, we swapped the 2nd and 4th rows\n      in the decryption key schedule. We also have to do the swap above\n      when we first pull in the input and when we set the final output. */\n    a2 =\n      m0[a >>> 24] ^\n      m1[b >>> 16 & 255] ^\n      m2[c >>> 8 & 255] ^\n      m3[d & 255] ^ w[++i];\n    b2 =\n      m0[b >>> 24] ^\n      m1[c >>> 16 & 255] ^\n      m2[d >>> 8 & 255] ^\n      m3[a & 255] ^ w[++i];\n    c2 =\n      m0[c >>> 24] ^\n      m1[d >>> 16 & 255] ^\n      m2[a >>> 8 & 255] ^\n      m3[b & 255] ^ w[++i];\n    d =\n      m0[d >>> 24] ^\n      m1[a >>> 16 & 255] ^\n      m2[b >>> 8 & 255] ^\n      m3[c & 255] ^ w[++i];\n    a = a2;\n    b = b2;\n    c = c2;\n  }\n\n  /*\n    Encrypt:\n    SubBytes(state)\n    ShiftRows(state)\n    AddRoundKey(state, w[Nr*Nb, (Nr+1)*Nb-1])\n\n    Decrypt:\n    InvShiftRows(state)\n    InvSubBytes(state)\n    AddRoundKey(state, w[0, Nb-1])\n   */\n   // Note: rows are shifted inline\n  output[0] =\n    (sub[a >>> 24] << 24) ^\n    (sub[b >>> 16 & 255] << 16) ^\n    (sub[c >>> 8 & 255] << 8) ^\n    (sub[d & 255]) ^ w[++i];\n  output[decrypt ? 3 : 1] =\n    (sub[b >>> 24] << 24) ^\n    (sub[c >>> 16 & 255] << 16) ^\n    (sub[d >>> 8 & 255] << 8) ^\n    (sub[a & 255]) ^ w[++i];\n  output[2] =\n    (sub[c >>> 24] << 24) ^\n    (sub[d >>> 16 & 255] << 16) ^\n    (sub[a >>> 8 & 255] << 8) ^\n    (sub[b & 255]) ^ w[++i];\n  output[decrypt ? 1 : 3] =\n    (sub[d >>> 24] << 24) ^\n    (sub[a >>> 16 & 255] << 16) ^\n    (sub[b >>> 8 & 255] << 8) ^\n    (sub[c & 255]) ^ w[++i];\n};\n\n\nforge.aes._updateBlock = _updateBlock;\n\n/**\n * random.generate\n */\n\n// the default prng plugin, uses AES-128\nvar prng_aes = {};\nvar _prng_aes_output = new Array(4);\nvar _prng_aes_buffer = forge.util.createBuffer();\nprng_aes.formatKey = function(key) {\n  // convert the key into 32-bit integers\n  var tmp = forge.util.createBuffer(key);\n  key = new Array(4);\n  key[0] = tmp.getInt32();\n  key[1] = tmp.getInt32();\n  key[2] = tmp.getInt32();\n  key[3] = tmp.getInt32();\n\n  // return the expanded key\n  return forge.aes._expandKey(key, false);\n};\nprng_aes.formatSeed = function(seed) {\n  // convert seed into 32-bit integers\n  var tmp = forge.util.createBuffer(seed);\n  seed = new Array(4);\n  seed[0] = tmp.getInt32();\n  seed[1] = tmp.getInt32();\n  seed[2] = tmp.getInt32();\n  seed[3] = tmp.getInt32();\n  return seed;\n};\nprng_aes.cipher = function(key, seed) {\n  forge.aes._updateBlock(key, seed, _prng_aes_output, false);\n  _prng_aes_buffer.putInt32(_prng_aes_output[0]);\n  _prng_aes_buffer.putInt32(_prng_aes_output[1]);\n  _prng_aes_buffer.putInt32(_prng_aes_output[2]);\n  _prng_aes_buffer.putInt32(_prng_aes_output[3]);\n  return _prng_aes_buffer.getBytes();\n};\nprng_aes.increment = function(seed) {\n  // FIXME: do we care about carry or signed issues?\n  ++seed[3];\n  return seed;\n};\nprng_aes.md = forge.md.sha1;\n\n// create default prng context\nvar _ctx = forge.prng.create(prng_aes);\n\n// add other sources of entropy only if window.crypto.getRandomValues is not\n// available -- otherwise this source will be automatically used by the prng\n\nif (typeof window == 'undefined' || !window.crypto || !window.crypto.getRandomValues) {\n// if this is a web worker, do not use weak entropy, instead register to\n  // receive strong entropy asynchronously from the main thread\n  if(typeof window === 'undefined' || window.document === undefined) {\n    // FIXME:\n  }\n\n  // get load time entropy\n  _ctx.collectInt(+new Date(), 32);\n\n  // add some entropy from navigator object\n  if(typeof(navigator) !== 'undefined') {\n    var _navBytes = '';\n    for(var key in navigator) {\n      try {\n        if(typeof(navigator[key]) == 'string') {\n          _navBytes += navigator[key];\n        }\n      }\n      catch(e) {\n        /* Some navigator keys might not be accessible, e.g. the geolocation\n          attribute throws an exception if touched in Mozilla chrome://\n          context.\n\n          Silently ignore this and just don't use this as a source of\n          entropy. */\n      }\n    }\n    _ctx.collect(_navBytes);\n    _navBytes = null;\n  }\n}\n\nforge.random = _ctx;\n\n/**\n * random.getBytes\n */\n\nforge.random.getBytes = function(count, callback) {\n  return forge.random.generate(count, callback);\n};\n\n/**\n * pki\n * @author Dave Longley\n * @author Stefan Siegl <stesie@brokenpipe.de>\n *\n * Copyright (c) 2010-2013 Digital Bazaar, Inc.\n * Copyright (c) 2012 Stefan Siegl <stesie@brokenpipe.de>\n */\n\n/**\n * pki.rsa.createKeyPairGenerationState\n */\n\nforge.pki.rsa.createKeyPairGenerationState = function(bits, e) {\n  // set default bits\n  if(typeof(bits) === 'string') {\n    bits = parseInt(bits, 10);\n  }\n  bits = bits || 1024;\n\n  // create prng with api that matches BigInteger secure random\n  var rng = {\n    // x is an array to fill with bytes\n    nextBytes: function(x) {\n      var b = forge.random.getBytes(x.length);\n      for(var i = 0; i < x.length; ++i) {\n        x[i] = b.charCodeAt(i);\n      }\n    }\n  };\n\n  var rval = {\n    state: 0,\n    bits: bits,\n    rng: rng,\n    eInt: e || 65537,\n    e: new BigInteger(null),\n    p: null,\n    q: null,\n    qBits: bits >> 1,\n    pBits: bits - (bits >> 1),\n    pqState: 0,\n    num: null,\n    keys: null\n  };\n  rval.e.fromInt(rval.eInt);\n\n  return rval;\n};\n\n/**\n * jsbn.BigInteger\n */\n\nvar dbits;\n\n// JavaScript engine analysis\nvar canary = 0xdeadbeefcafe;\nvar j_lm = ((canary&0xffffff)==0xefcafe);\n\n// (public) Constructor\nfunction BigInteger(a,b,c) {\n  this.data = [];\n  if(a != null)\n    if(\"number\" == typeof a) this.fromNumber(a,b,c);\n    else if(b == null && \"string\" != typeof a) this.fromString(a,256);\n    else this.fromString(a,b);\n}\n\n// return new, unset BigInteger\nfunction nbi() { return new BigInteger(null); }\n\n// am: Compute w_j += (x*this_i), propagate carries,\n// c is initial carry, returns final carry.\n// c < 3*dvalue, x < 2*dvalue, this_i < dvalue\n// We need to select the fastest one that works in this environment.\n\n// am1: use a single mult and divide to get the high bits,\n// max digit bits should be 26 because\n// max internal value = 2*dvalue^2-2*dvalue (< 2^53)\nfunction am1(i,x,w,j,c,n) {\n  while(--n >= 0) {\n    var v = x*this.data[i++]+w.data[j]+c;\n    c = Math.floor(v/0x4000000);\n    w.data[j++] = v&0x3ffffff;\n  }\n  return c;\n}\n// am2 avoids a big mult-and-extract completely.\n// Max digit bits should be <= 30 because we do bitwise ops\n// on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)\nfunction am2(i,x,w,j,c,n) {\n  var xl = x&0x7fff, xh = x>>15;\n  while(--n >= 0) {\n    var l = this.data[i]&0x7fff;\n    var h = this.data[i++]>>15;\n    var m = xh*l+h*xl;\n    l = xl*l+((m&0x7fff)<<15)+w.data[j]+(c&0x3fffffff);\n    c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);\n    w.data[j++] = l&0x3fffffff;\n  }\n  return c;\n}\n// Alternately, set max digit bits to 28 since some\n// browsers slow down when dealing with 32-bit numbers.\nfunction am3(i,x,w,j,c,n) {\n  var xl = x&0x3fff, xh = x>>14;\n  while(--n >= 0) {\n    var l = this.data[i]&0x3fff;\n    var h = this.data[i++]>>14;\n    var m = xh*l+h*xl;\n    l = xl*l+((m&0x3fff)<<14)+w.data[j]+c;\n    c = (l>>28)+(m>>14)+xh*h;\n    w.data[j++] = l&0xfffffff;\n  }\n  return c;\n}\n\n// node.js (no browser)\nif(typeof(navigator) === 'undefined')\n{\n   BigInteger.prototype.am = am3;\n   dbits = 28;\n}\nelse if(j_lm && (navigator.appName == \"Microsoft Internet Explorer\")) {\n  BigInteger.prototype.am = am2;\n  dbits = 30;\n}\nelse if(j_lm && (navigator.appName != \"Netscape\")) {\n  BigInteger.prototype.am = am1;\n  dbits = 26;\n}\nelse { // Mozilla/Netscape seems to prefer am3\n  BigInteger.prototype.am = am3;\n  dbits = 28;\n}\n\nBigInteger.prototype.DB = dbits;\nBigInteger.prototype.DM = ((1<<dbits)-1);\nBigInteger.prototype.DV = (1<<dbits);\n\nvar BI_FP = 52;\nBigInteger.prototype.FV = Math.pow(2,BI_FP);\nBigInteger.prototype.F1 = BI_FP-dbits;\nBigInteger.prototype.F2 = 2*dbits-BI_FP;\n\n// Digit conversions\nvar BI_RM = \"0123456789abcdefghijklmnopqrstuvwxyz\";\nvar BI_RC = new Array();\nvar rr,vv;\nrr = \"0\".charCodeAt(0);\nfor(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;\nrr = \"a\".charCodeAt(0);\nfor(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;\nrr = \"A\".charCodeAt(0);\nfor(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;\n\nfunction int2char(n) { return BI_RM.charAt(n); }\nfunction intAt(s,i) {\n  var c = BI_RC[s.charCodeAt(i)];\n  return (c==null)?-1:c;\n}\n\n// (protected) copy this to r\nfunction bnpCopyTo(r) {\n  for(var i = this.t-1; i >= 0; --i) r.data[i] = this.data[i];\n  r.t = this.t;\n  r.s = this.s;\n}\n\n// (protected) set from integer value x, -DV <= x < DV\nfunction bnpFromInt(x) {\n  this.t = 1;\n  this.s = (x<0)?-1:0;\n  if(x > 0) this.data[0] = x;\n  else if(x < -1) this.data[0] = x+DV;\n  else this.t = 0;\n}\n\n// return bigint initialized to value\nfunction nbv(i) { var r = nbi(); r.fromInt(i); return r; }\n\n// (protected) set from string and radix\nfunction bnpFromString(s,b) {\n  var k;\n  if(b == 16) k = 4;\n  else if(b == 8) k = 3;\n  else if(b == 256) k = 8; // byte array\n  else if(b == 2) k = 1;\n  else if(b == 32) k = 5;\n  else if(b == 4) k = 2;\n  else { this.fromRadix(s,b); return; }\n  this.t = 0;\n  this.s = 0;\n  var i = s.length, mi = false, sh = 0;\n  while(--i >= 0) {\n    var x = (k==8)?s[i]&0xff:intAt(s,i);\n    if(x < 0) {\n      if(s.charAt(i) == \"-\") mi = true;\n      continue;\n    }\n    mi = false;\n    if(sh == 0)\n      this.data[this.t++] = x;\n    else if(sh+k > this.DB) {\n      this.data[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;\n      this.data[this.t++] = (x>>(this.DB-sh));\n    }\n    else\n      this.data[this.t-1] |= x<<sh;\n    sh += k;\n    if(sh >= this.DB) sh -= this.DB;\n  }\n  if(k == 8 && (s[0]&0x80) != 0) {\n    this.s = -1;\n    if(sh > 0) this.data[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;\n  }\n  this.clamp();\n  if(mi) BigInteger.ZERO.subTo(this,this);\n}\n\n// (protected) clamp off excess high words\nfunction bnpClamp() {\n  var c = this.s&this.DM;\n  while(this.t > 0 && this.data[this.t-1] == c) --this.t;\n}\n\n// (public) return string representation in given radix\nfunction bnToString(b) {\n  if(this.s < 0) return \"-\"+this.negate().toString(b);\n  var k;\n  if(b == 16) k = 4;\n  else if(b == 8) k = 3;\n  else if(b == 2) k = 1;\n  else if(b == 32) k = 5;\n  else if(b == 4) k = 2;\n  else return this.toRadix(b);\n  var km = (1<<k)-1, d, m = false, r = \"\", i = this.t;\n  var p = this.DB-(i*this.DB)%k;\n  if(i-- > 0) {\n    if(p < this.DB && (d = this.data[i]>>p) > 0) { m = true; r = int2char(d); }\n    while(i >= 0) {\n      if(p < k) {\n        d = (this.data[i]&((1<<p)-1))<<(k-p);\n        d |= this.data[--i]>>(p+=this.DB-k);\n      }\n      else {\n        d = (this.data[i]>>(p-=k))&km;\n        if(p <= 0) { p += this.DB; --i; }\n      }\n      if(d > 0) m = true;\n      if(m) r += int2char(d);\n    }\n  }\n  return m?r:\"0\";\n}\n\n// (public) -this\nfunction bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }\n\n// (public) |this|\nfunction bnAbs() { return (this.s<0)?this.negate():this; }\n\n// (public) return + if this > a, - if this < a, 0 if equal\nfunction bnCompareTo(a) {\n  var r = this.s-a.s;\n  if(r != 0) return r;\n  var i = this.t;\n  r = i-a.t;\n  if(r != 0) return (this.s<0)?-r:r;\n  while(--i >= 0) if((r=this.data[i]-a.data[i]) != 0) return r;\n  return 0;\n}\n\n// returns bit length of the integer x\nfunction nbits(x) {\n  var r = 1, t;\n  if((t=x>>>16) != 0) { x = t; r += 16; }\n  if((t=x>>8) != 0) { x = t; r += 8; }\n  if((t=x>>4) != 0) { x = t; r += 4; }\n  if((t=x>>2) != 0) { x = t; r += 2; }\n  if((t=x>>1) != 0) { x = t; r += 1; }\n  return r;\n}\n\n// (public) return the number of bits in \"this\"\nfunction bnBitLength() {\n  if(this.t <= 0) return 0;\n  return this.DB*(this.t-1)+nbits(this.data[this.t-1]^(this.s&this.DM));\n}\n\n// (protected) r = this << n*DB\nfunction bnpDLShiftTo(n,r) {\n  var i;\n  for(i = this.t-1; i >= 0; --i) r.data[i+n] = this.data[i];\n  for(i = n-1; i >= 0; --i) r.data[i] = 0;\n  r.t = this.t+n;\n  r.s = this.s;\n}\n\n// (protected) r = this >> n*DB\nfunction bnpDRShiftTo(n,r) {\n  for(var i = n; i < this.t; ++i) r.data[i-n] = this.data[i];\n  r.t = Math.max(this.t-n,0);\n  r.s = this.s;\n}\n\n// (protected) r = this << n\nfunction bnpLShiftTo(n,r) {\n  var bs = n%this.DB;\n  var cbs = this.DB-bs;\n  var bm = (1<<cbs)-1;\n  var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;\n  for(i = this.t-1; i >= 0; --i) {\n    r.data[i+ds+1] = (this.data[i]>>cbs)|c;\n    c = (this.data[i]&bm)<<bs;\n  }\n  for(i = ds-1; i >= 0; --i) r.data[i] = 0;\n  r.data[ds] = c;\n  r.t = this.t+ds+1;\n  r.s = this.s;\n  r.clamp();\n}\n\n// (protected) r = this >> n\nfunction bnpRShiftTo(n,r) {\n  r.s = this.s;\n  var ds = Math.floor(n/this.DB);\n  if(ds >= this.t) { r.t = 0; return; }\n  var bs = n%this.DB;\n  var cbs = this.DB-bs;\n  var bm = (1<<bs)-1;\n  r.data[0] = this.data[ds]>>bs;\n  for(var i = ds+1; i < this.t; ++i) {\n    r.data[i-ds-1] |= (this.data[i]&bm)<<cbs;\n    r.data[i-ds] = this.data[i]>>bs;\n  }\n  if(bs > 0) r.data[this.t-ds-1] |= (this.s&bm)<<cbs;\n  r.t = this.t-ds;\n  r.clamp();\n}\n\n// (protected) r = this - a\nfunction bnpSubTo(a,r) {\n  var i = 0, c = 0, m = Math.min(a.t,this.t);\n  while(i < m) {\n    c += this.data[i]-a.data[i];\n    r.data[i++] = c&this.DM;\n    c >>= this.DB;\n  }\n  if(a.t < this.t) {\n    c -= a.s;\n    while(i < this.t) {\n      c += this.data[i];\n      r.data[i++] = c&this.DM;\n      c >>= this.DB;\n    }\n    c += this.s;\n  }\n  else {\n    c += this.s;\n    while(i < a.t) {\n      c -= a.data[i];\n      r.data[i++] = c&this.DM;\n      c >>= this.DB;\n    }\n    c -= a.s;\n  }\n  r.s = (c<0)?-1:0;\n  if(c < -1) r.data[i++] = this.DV+c;\n  else if(c > 0) r.data[i++] = c;\n  r.t = i;\n  r.clamp();\n}\n\n// (protected) r = this * a, r != this,a (HAC 14.12)\n// \"this\" should be the larger one if appropriate.\nfunction bnpMultiplyTo(a,r) {\n  var x = this.abs(), y = a.abs();\n  var i = x.t;\n  r.t = i+y.t;\n  while(--i >= 0) r.data[i] = 0;\n  for(i = 0; i < y.t; ++i) r.data[i+x.t] = x.am(0,y.data[i],r,i,0,x.t);\n  r.s = 0;\n  r.clamp();\n  if(this.s != a.s) BigInteger.ZERO.subTo(r,r);\n}\n\n// (protected) r = this^2, r != this (HAC 14.16)\nfunction bnpSquareTo(r) {\n  var x = this.abs();\n  var i = r.t = 2*x.t;\n  while(--i >= 0) r.data[i] = 0;\n  for(i = 0; i < x.t-1; ++i) {\n    var c = x.am(i,x.data[i],r,2*i,0,1);\n    if((r.data[i+x.t]+=x.am(i+1,2*x.data[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {\n      r.data[i+x.t] -= x.DV;\n      r.data[i+x.t+1] = 1;\n    }\n  }\n  if(r.t > 0) r.data[r.t-1] += x.am(i,x.data[i],r,2*i,0,1);\n  r.s = 0;\n  r.clamp();\n}\n\n// (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)\n// r != q, this != m.  q or r may be null.\nfunction bnpDivRemTo(m,q,r) {\n  var pm = m.abs();\n  if(pm.t <= 0) return;\n  var pt = this.abs();\n  if(pt.t < pm.t) {\n    if(q != null) q.fromInt(0);\n    if(r != null) this.copyTo(r);\n    return;\n  }\n  if(r == null) r = nbi();\n  var y = nbi(), ts = this.s, ms = m.s;\n  var nsh = this.DB-nbits(pm.data[pm.t-1]); // normalize modulus\n  if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }\n  else { pm.copyTo(y); pt.copyTo(r); }\n  var ys = y.t;\n  var y0 = y.data[ys-1];\n  if(y0 == 0) return;\n  var yt = y0*(1<<this.F1)+((ys>1)?y.data[ys-2]>>this.F2:0);\n  var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;\n  var i = r.t, j = i-ys, t = (q==null)?nbi():q;\n  y.dlShiftTo(j,t);\n  if(r.compareTo(t) >= 0) {\n    r.data[r.t++] = 1;\n    r.subTo(t,r);\n  }\n  BigInteger.ONE.dlShiftTo(ys,t);\n  t.subTo(y,y); // \"negative\" y so we can replace sub with am later\n  while(y.t < ys) y.data[y.t++] = 0;\n  while(--j >= 0) {\n    // Estimate quotient digit\n    var qd = (r.data[--i]==y0)?this.DM:Math.floor(r.data[i]*d1+(r.data[i-1]+e)*d2);\n    if((r.data[i]+=y.am(0,qd,r,j,0,ys)) < qd) { // Try it out\n      y.dlShiftTo(j,t);\n      r.subTo(t,r);\n      while(r.data[i] < --qd) r.subTo(t,r);\n    }\n  }\n  if(q != null) {\n    r.drShiftTo(ys,q);\n    if(ts != ms) BigInteger.ZERO.subTo(q,q);\n  }\n  r.t = ys;\n  r.clamp();\n  if(nsh > 0) r.rShiftTo(nsh,r);  // Denormalize remainder\n  if(ts < 0) BigInteger.ZERO.subTo(r,r);\n}\n\n// (public) this mod a\nfunction bnMod(a) {\n  var r = nbi();\n  this.abs().divRemTo(a,null,r);\n  if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);\n  return r;\n}\n\n// Modular reduction using \"classic\" algorithm\nfunction Classic(m) { this.m = m; }\nfunction cConvert(x) {\n  if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);\n  else return x;\n}\nfunction cRevert(x) { return x; }\nfunction cReduce(x) { x.divRemTo(this.m,null,x); }\nfunction cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }\nfunction cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }\n\nClassic.prototype.convert = cConvert;\nClassic.prototype.revert = cRevert;\nClassic.prototype.reduce = cReduce;\nClassic.prototype.mulTo = cMulTo;\nClassic.prototype.sqrTo = cSqrTo;\n\n// (protected) return \"-1/this % 2^DB\"; useful for Mont. reduction\n// justification:\n//         xy == 1 (mod m)\n//         xy =  1+km\n//   xy(2-xy) = (1+km)(1-km)\n// x[y(2-xy)] = 1-k^2m^2\n// x[y(2-xy)] == 1 (mod m^2)\n// if y is 1/x mod m, then y(2-xy) is 1/x mod m^2\n// should reduce x and y(2-xy) by m^2 at each step to keep size bounded.\n// JS multiply \"overflows\" differently from C/C++, so care is needed here.\nfunction bnpInvDigit() {\n  if(this.t < 1) return 0;\n  var x = this.data[0];\n  if((x&1) == 0) return 0;\n  var y = x&3;    // y == 1/x mod 2^2\n  y = (y*(2-(x&0xf)*y))&0xf;  // y == 1/x mod 2^4\n  y = (y*(2-(x&0xff)*y))&0xff;  // y == 1/x mod 2^8\n  y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff; // y == 1/x mod 2^16\n  // last step - calculate inverse mod DV directly;\n  // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints\n  y = (y*(2-x*y%this.DV))%this.DV;    // y == 1/x mod 2^dbits\n  // we really want the negative inverse, and -DV < y < DV\n  return (y>0)?this.DV-y:-y;\n}\n\n// Montgomery reduction\nfunction Montgomery(m) {\n  this.m = m;\n  this.mp = m.invDigit();\n  this.mpl = this.mp&0x7fff;\n  this.mph = this.mp>>15;\n  this.um = (1<<(m.DB-15))-1;\n  this.mt2 = 2*m.t;\n}\n\n// xR mod m\nfunction montConvert(x) {\n  var r = nbi();\n  x.abs().dlShiftTo(this.m.t,r);\n  r.divRemTo(this.m,null,r);\n  if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);\n  return r;\n}\n\n// x/R mod m\nfunction montRevert(x) {\n  var r = nbi();\n  x.copyTo(r);\n  this.reduce(r);\n  return r;\n}\n\n// x = x/R mod m (HAC 14.32)\nfunction montReduce(x) {\n  while(x.t <= this.mt2)  // pad x so am has enough room later\n    x.data[x.t++] = 0;\n  for(var i = 0; i < this.m.t; ++i) {\n    // faster way of calculating u0 = x.data[i]*mp mod DV\n    var j = x.data[i]&0x7fff;\n    var u0 = (j*this.mpl+(((j*this.mph+(x.data[i]>>15)*this.mpl)&this.um)<<15))&x.DM;\n    // use am to combine the multiply-shift-add into one call\n    j = i+this.m.t;\n    x.data[j] += this.m.am(0,u0,x,i,0,this.m.t);\n    // propagate carry\n    while(x.data[j] >= x.DV) { x.data[j] -= x.DV; x.data[++j]++; }\n  }\n  x.clamp();\n  x.drShiftTo(this.m.t,x);\n  if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);\n}\n\n// r = \"x^2/R mod m\"; x != r\nfunction montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }\n\n// r = \"xy/R mod m\"; x,y != r\nfunction montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }\n\nMontgomery.prototype.convert = montConvert;\nMontgomery.prototype.revert = montRevert;\nMontgomery.prototype.reduce = montReduce;\nMontgomery.prototype.mulTo = montMulTo;\nMontgomery.prototype.sqrTo = montSqrTo;\n\n// (protected) true iff this is even\nfunction bnpIsEven() { return ((this.t>0)?(this.data[0]&1):this.s) == 0; }\n\n// (protected) this^e, e < 2^32, doing sqr and mul with \"r\" (HAC 14.79)\nfunction bnpExp(e,z) {\n  if(e > 0xffffffff || e < 1) return BigInteger.ONE;\n  var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;\n  g.copyTo(r);\n  while(--i >= 0) {\n    z.sqrTo(r,r2);\n    if((e&(1<<i)) > 0) z.mulTo(r2,g,r);\n    else { var t = r; r = r2; r2 = t; }\n  }\n  return z.revert(r);\n}\n\n// (public) this^e % m, 0 <= e < 2^32\nfunction bnModPowInt(e,m) {\n  var z;\n  if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);\n  return this.exp(e,z);\n}\n\n// protected\nBigInteger.prototype.copyTo = bnpCopyTo;\nBigInteger.prototype.fromInt = bnpFromInt;\nBigInteger.prototype.fromString = bnpFromString;\nBigInteger.prototype.clamp = bnpClamp;\nBigInteger.prototype.dlShiftTo = bnpDLShiftTo;\nBigInteger.prototype.drShiftTo = bnpDRShiftTo;\nBigInteger.prototype.lShiftTo = bnpLShiftTo;\nBigInteger.prototype.rShiftTo = bnpRShiftTo;\nBigInteger.prototype.subTo = bnpSubTo;\nBigInteger.prototype.multiplyTo = bnpMultiplyTo;\nBigInteger.prototype.squareTo = bnpSquareTo;\nBigInteger.prototype.divRemTo = bnpDivRemTo;\nBigInteger.prototype.invDigit = bnpInvDigit;\nBigInteger.prototype.isEven = bnpIsEven;\nBigInteger.prototype.exp = bnpExp;\n\n// public\nBigInteger.prototype.toString = bnToString;\nBigInteger.prototype.negate = bnNegate;\nBigInteger.prototype.abs = bnAbs;\nBigInteger.prototype.compareTo = bnCompareTo;\nBigInteger.prototype.bitLength = bnBitLength;\nBigInteger.prototype.mod = bnMod;\nBigInteger.prototype.modPowInt = bnModPowInt;\n\n// \"constants\"\nBigInteger.ZERO = nbv(0);\nBigInteger.ONE = nbv(1);\n\n// jsbn2 lib\n\n//Copyright (c) 2005-2009  Tom Wu\n//All Rights Reserved.\n//See \"LICENSE\" for details (See jsbn.js for LICENSE).\n\n//Extended JavaScript BN functions, required for RSA private ops.\n\n//Version 1.1: new BigInteger(\"0\", 10) returns \"proper\" zero\n\n//(public)\nfunction bnClone() { var r = nbi(); this.copyTo(r); return r; }\n\n//(public) return value as integer\nfunction bnIntValue() {\nif(this.s < 0) {\n if(this.t == 1) return this.data[0]-this.DV;\n else if(this.t == 0) return -1;\n}\nelse if(this.t == 1) return this.data[0];\nelse if(this.t == 0) return 0;\n// assumes 16 < DB < 32\nreturn ((this.data[1]&((1<<(32-this.DB))-1))<<this.DB)|this.data[0];\n}\n\n//(public) return value as byte\nfunction bnByteValue() { return (this.t==0)?this.s:(this.data[0]<<24)>>24; }\n\n//(public) return value as short (assumes DB>=16)\nfunction bnShortValue() { return (this.t==0)?this.s:(this.data[0]<<16)>>16; }\n\n//(protected) return x s.t. r^x < DV\nfunction bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }\n\n//(public) 0 if this == 0, 1 if this > 0\nfunction bnSigNum() {\nif(this.s < 0) return -1;\nelse if(this.t <= 0 || (this.t == 1 && this.data[0] <= 0)) return 0;\nelse return 1;\n}\n\n//(protected) convert to radix string\nfunction bnpToRadix(b) {\nif(b == null) b = 10;\nif(this.signum() == 0 || b < 2 || b > 36) return \"0\";\nvar cs = this.chunkSize(b);\nvar a = Math.pow(b,cs);\nvar d = nbv(a), y = nbi(), z = nbi(), r = \"\";\nthis.divRemTo(d,y,z);\nwhile(y.signum() > 0) {\n r = (a+z.intValue()).toString(b).substr(1) + r;\n y.divRemTo(d,y,z);\n}\nreturn z.intValue().toString(b) + r;\n}\n\n//(protected) convert from radix string\nfunction bnpFromRadix(s,b) {\nthis.fromInt(0);\nif(b == null) b = 10;\nvar cs = this.chunkSize(b);\nvar d = Math.pow(b,cs), mi = false, j = 0, w = 0;\nfor(var i = 0; i < s.length; ++i) {\n var x = intAt(s,i);\n if(x < 0) {\n   if(s.charAt(i) == \"-\" && this.signum() == 0) mi = true;\n   continue;\n }\n w = b*w+x;\n if(++j >= cs) {\n   this.dMultiply(d);\n   this.dAddOffset(w,0);\n   j = 0;\n   w = 0;\n }\n}\nif(j > 0) {\n this.dMultiply(Math.pow(b,j));\n this.dAddOffset(w,0);\n}\nif(mi) BigInteger.ZERO.subTo(this,this);\n}\n\n//(protected) alternate constructor\nfunction bnpFromNumber(a,b,c) {\nif(\"number\" == typeof b) {\n // new BigInteger(int,int,RNG)\n if(a < 2) this.fromInt(1);\n else {\n   this.fromNumber(a,c);\n   if(!this.testBit(a-1))  // force MSB set\n     this.bitwiseTo(BigInteger.ONE.shiftLeft(a-1),op_or,this);\n   if(this.isEven()) this.dAddOffset(1,0); // force odd\n   while(!this.isProbablePrime(b)) {\n     this.dAddOffset(2,0);\n     if(this.bitLength() > a) this.subTo(BigInteger.ONE.shiftLeft(a-1),this);\n   }\n }\n}\nelse {\n // new BigInteger(int,RNG)\n var x = new Array(), t = a&7;\n x.length = (a>>3)+1;\n b.nextBytes(x);\n if(t > 0) x[0] &= ((1<<t)-1); else x[0] = 0;\n this.fromString(x,256);\n}\n}\n\n//(public) convert to bigendian byte array\nfunction bnToByteArray() {\nvar i = this.t, r = new Array();\nr[0] = this.s;\nvar p = this.DB-(i*this.DB)%8, d, k = 0;\nif(i-- > 0) {\n if(p < this.DB && (d = this.data[i]>>p) != (this.s&this.DM)>>p)\n   r[k++] = d|(this.s<<(this.DB-p));\n while(i >= 0) {\n   if(p < 8) {\n     d = (this.data[i]&((1<<p)-1))<<(8-p);\n     d |= this.data[--i]>>(p+=this.DB-8);\n   }\n   else {\n     d = (this.data[i]>>(p-=8))&0xff;\n     if(p <= 0) { p += this.DB; --i; }\n   }\n   if((d&0x80) != 0) d |= -256;\n   if(k == 0 && (this.s&0x80) != (d&0x80)) ++k;\n   if(k > 0 || d != this.s) r[k++] = d;\n }\n}\nreturn r;\n}\n\nfunction bnEquals(a) { return(this.compareTo(a)==0); }\nfunction bnMin(a) { return(this.compareTo(a)<0)?this:a; }\nfunction bnMax(a) { return(this.compareTo(a)>0)?this:a; }\n\n//(protected) r = this op a (bitwise)\nfunction bnpBitwiseTo(a,op,r) {\nvar i, f, m = Math.min(a.t,this.t);\nfor(i = 0; i < m; ++i) r.data[i] = op(this.data[i],a.data[i]);\nif(a.t < this.t) {\n f = a.s&this.DM;\n for(i = m; i < this.t; ++i) r.data[i] = op(this.data[i],f);\n r.t = this.t;\n}\nelse {\n f = this.s&this.DM;\n for(i = m; i < a.t; ++i) r.data[i] = op(f,a.data[i]);\n r.t = a.t;\n}\nr.s = op(this.s,a.s);\nr.clamp();\n}\n\n//(public) this & a\nfunction op_and(x,y) { return x&y; }\nfunction bnAnd(a) { var r = nbi(); this.bitwiseTo(a,op_and,r); return r; }\n\n//(public) this | a\nfunction op_or(x,y) { return x|y; }\nfunction bnOr(a) { var r = nbi(); this.bitwiseTo(a,op_or,r); return r; }\n\n//(public) this ^ a\nfunction op_xor(x,y) { return x^y; }\nfunction bnXor(a) { var r = nbi(); this.bitwiseTo(a,op_xor,r); return r; }\n\n//(public) this & ~a\nfunction op_andnot(x,y) { return x&~y; }\nfunction bnAndNot(a) { var r = nbi(); this.bitwiseTo(a,op_andnot,r); return r; }\n\n//(public) ~this\nfunction bnNot() {\nvar r = nbi();\nfor(var i = 0; i < this.t; ++i) r.data[i] = this.DM&~this.data[i];\nr.t = this.t;\nr.s = ~this.s;\nreturn r;\n}\n\n//(public) this << n\nfunction bnShiftLeft(n) {\nvar r = nbi();\nif(n < 0) this.rShiftTo(-n,r); else this.lShiftTo(n,r);\nreturn r;\n}\n\n//(public) this >> n\nfunction bnShiftRight(n) {\nvar r = nbi();\nif(n < 0) this.lShiftTo(-n,r); else this.rShiftTo(n,r);\nreturn r;\n}\n\n//return index of lowest 1-bit in x, x < 2^31\nfunction lbit(x) {\nif(x == 0) return -1;\nvar r = 0;\nif((x&0xffff) == 0) { x >>= 16; r += 16; }\nif((x&0xff) == 0) { x >>= 8; r += 8; }\nif((x&0xf) == 0) { x >>= 4; r += 4; }\nif((x&3) == 0) { x >>= 2; r += 2; }\nif((x&1) == 0) ++r;\nreturn r;\n}\n\n//(public) returns index of lowest 1-bit (or -1 if none)\nfunction bnGetLowestSetBit() {\nfor(var i = 0; i < this.t; ++i)\n if(this.data[i] != 0) return i*this.DB+lbit(this.data[i]);\nif(this.s < 0) return this.t*this.DB;\nreturn -1;\n}\n\n//return number of 1 bits in x\nfunction cbit(x) {\nvar r = 0;\nwhile(x != 0) { x &= x-1; ++r; }\nreturn r;\n}\n\n//(public) return number of set bits\nfunction bnBitCount() {\nvar r = 0, x = this.s&this.DM;\nfor(var i = 0; i < this.t; ++i) r += cbit(this.data[i]^x);\nreturn r;\n}\n\n//(public) true iff nth bit is set\nfunction bnTestBit(n) {\nvar j = Math.floor(n/this.DB);\nif(j >= this.t) return(this.s!=0);\nreturn((this.data[j]&(1<<(n%this.DB)))!=0);\n}\n\n//(protected) this op (1<<n)\nfunction bnpChangeBit(n,op) {\nvar r = BigInteger.ONE.shiftLeft(n);\nthis.bitwiseTo(r,op,r);\nreturn r;\n}\n\n//(public) this | (1<<n)\nfunction bnSetBit(n) { return this.changeBit(n,op_or); }\n\n//(public) this & ~(1<<n)\nfunction bnClearBit(n) { return this.changeBit(n,op_andnot); }\n\n//(public) this ^ (1<<n)\nfunction bnFlipBit(n) { return this.changeBit(n,op_xor); }\n\n//(protected) r = this + a\nfunction bnpAddTo(a,r) {\nvar i = 0, c = 0, m = Math.min(a.t,this.t);\nwhile(i < m) {\n c += this.data[i]+a.data[i];\n r.data[i++] = c&this.DM;\n c >>= this.DB;\n}\nif(a.t < this.t) {\n c += a.s;\n while(i < this.t) {\n   c += this.data[i];\n   r.data[i++] = c&this.DM;\n   c >>= this.DB;\n }\n c += this.s;\n}\nelse {\n c += this.s;\n while(i < a.t) {\n   c += a.data[i];\n   r.data[i++] = c&this.DM;\n   c >>= this.DB;\n }\n c += a.s;\n}\nr.s = (c<0)?-1:0;\nif(c > 0) r.data[i++] = c;\nelse if(c < -1) r.data[i++] = this.DV+c;\nr.t = i;\nr.clamp();\n}\n\n//(public) this + a\nfunction bnAdd(a) { var r = nbi(); this.addTo(a,r); return r; }\n\n//(public) this - a\nfunction bnSubtract(a) { var r = nbi(); this.subTo(a,r); return r; }\n\n//(public) this * a\nfunction bnMultiply(a) { var r = nbi(); this.multiplyTo(a,r); return r; }\n\n//(public) this / a\nfunction bnDivide(a) { var r = nbi(); this.divRemTo(a,r,null); return r; }\n\n//(public) this % a\nfunction bnRemainder(a) { var r = nbi(); this.divRemTo(a,null,r); return r; }\n\n//(public) [this/a,this%a]\nfunction bnDivideAndRemainder(a) {\nvar q = nbi(), r = nbi();\nthis.divRemTo(a,q,r);\nreturn new Array(q,r);\n}\n\n//(protected) this *= n, this >= 0, 1 < n < DV\nfunction bnpDMultiply(n) {\nthis.data[this.t] = this.am(0,n-1,this,0,0,this.t);\n++this.t;\nthis.clamp();\n}\n\n//(protected) this += n << w words, this >= 0\nfunction bnpDAddOffset(n,w) {\nif(n == 0) return;\nwhile(this.t <= w) this.data[this.t++] = 0;\nthis.data[w] += n;\nwhile(this.data[w] >= this.DV) {\n this.data[w] -= this.DV;\n if(++w >= this.t) this.data[this.t++] = 0;\n ++this.data[w];\n}\n}\n\n//A \"null\" reducer\nfunction NullExp() {}\nfunction nNop(x) { return x; }\nfunction nMulTo(x,y,r) { x.multiplyTo(y,r); }\nfunction nSqrTo(x,r) { x.squareTo(r); }\n\nNullExp.prototype.convert = nNop;\nNullExp.prototype.revert = nNop;\nNullExp.prototype.mulTo = nMulTo;\nNullExp.prototype.sqrTo = nSqrTo;\n\n//(public) this^e\nfunction bnPow(e) { return this.exp(e,new NullExp()); }\n\n//(protected) r = lower n words of \"this * a\", a.t <= n\n//\"this\" should be the larger one if appropriate.\nfunction bnpMultiplyLowerTo(a,n,r) {\nvar i = Math.min(this.t+a.t,n);\nr.s = 0; // assumes a,this >= 0\nr.t = i;\nwhile(i > 0) r.data[--i] = 0;\nvar j;\nfor(j = r.t-this.t; i < j; ++i) r.data[i+this.t] = this.am(0,a.data[i],r,i,0,this.t);\nfor(j = Math.min(a.t,n); i < j; ++i) this.am(0,a.data[i],r,i,0,n-i);\nr.clamp();\n}\n\n//(protected) r = \"this * a\" without lower n words, n > 0\n//\"this\" should be the larger one if appropriate.\nfunction bnpMultiplyUpperTo(a,n,r) {\n--n;\nvar i = r.t = this.t+a.t-n;\nr.s = 0; // assumes a,this >= 0\nwhile(--i >= 0) r.data[i] = 0;\nfor(i = Math.max(n-this.t,0); i < a.t; ++i)\n r.data[this.t+i-n] = this.am(n-i,a.data[i],r,0,0,this.t+i-n);\nr.clamp();\nr.drShiftTo(1,r);\n}\n\n//Barrett modular reduction\nfunction Barrett(m) {\n// setup Barrett\nthis.r2 = nbi();\nthis.q3 = nbi();\nBigInteger.ONE.dlShiftTo(2*m.t,this.r2);\nthis.mu = this.r2.divide(m);\nthis.m = m;\n}\n\nfunction barrettConvert(x) {\nif(x.s < 0 || x.t > 2*this.m.t) return x.mod(this.m);\nelse if(x.compareTo(this.m) < 0) return x;\nelse { var r = nbi(); x.copyTo(r); this.reduce(r); return r; }\n}\n\nfunction barrettRevert(x) { return x; }\n\n//x = x mod m (HAC 14.42)\nfunction barrettReduce(x) {\nx.drShiftTo(this.m.t-1,this.r2);\nif(x.t > this.m.t+1) { x.t = this.m.t+1; x.clamp(); }\nthis.mu.multiplyUpperTo(this.r2,this.m.t+1,this.q3);\nthis.m.multiplyLowerTo(this.q3,this.m.t+1,this.r2);\nwhile(x.compareTo(this.r2) < 0) x.dAddOffset(1,this.m.t+1);\nx.subTo(this.r2,x);\nwhile(x.compareTo(this.m) >= 0) x.subTo(this.m,x);\n}\n\n//r = x^2 mod m; x != r\nfunction barrettSqrTo(x,r) { x.squareTo(r); this.reduce(r); }\n\n//r = x*y mod m; x,y != r\nfunction barrettMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }\n\nBarrett.prototype.convert = barrettConvert;\nBarrett.prototype.revert = barrettRevert;\nBarrett.prototype.reduce = barrettReduce;\nBarrett.prototype.mulTo = barrettMulTo;\nBarrett.prototype.sqrTo = barrettSqrTo;\n\n//(public) this^e % m (HAC 14.85)\nfunction bnModPow(e,m) {\nvar i = e.bitLength(), k, r = nbv(1), z;\nif(i <= 0) return r;\nelse if(i < 18) k = 1;\nelse if(i < 48) k = 3;\nelse if(i < 144) k = 4;\nelse if(i < 768) k = 5;\nelse k = 6;\nif(i < 8)\n z = new Classic(m);\nelse if(m.isEven())\n z = new Barrett(m);\nelse\n z = new Montgomery(m);\n\n// precomputation\nvar g = new Array(), n = 3, k1 = k-1, km = (1<<k)-1;\ng[1] = z.convert(this);\nif(k > 1) {\n var g2 = nbi();\n z.sqrTo(g[1],g2);\n while(n <= km) {\n   g[n] = nbi();\n   z.mulTo(g2,g[n-2],g[n]);\n   n += 2;\n }\n}\n\nvar j = e.t-1, w, is1 = true, r2 = nbi(), t;\ni = nbits(e.data[j])-1;\nwhile(j >= 0) {\n if(i >= k1) w = (e.data[j]>>(i-k1))&km;\n else {\n   w = (e.data[j]&((1<<(i+1))-1))<<(k1-i);\n   if(j > 0) w |= e.data[j-1]>>(this.DB+i-k1);\n }\n\n n = k;\n while((w&1) == 0) { w >>= 1; --n; }\n if((i -= n) < 0) { i += this.DB; --j; }\n if(is1) {  // ret == 1, don't bother squaring or multiplying it\n   g[w].copyTo(r);\n   is1 = false;\n }\n else {\n   while(n > 1) { z.sqrTo(r,r2); z.sqrTo(r2,r); n -= 2; }\n   if(n > 0) z.sqrTo(r,r2); else { t = r; r = r2; r2 = t; }\n   z.mulTo(r2,g[w],r);\n }\n\n while(j >= 0 && (e.data[j]&(1<<i)) == 0) {\n   z.sqrTo(r,r2); t = r; r = r2; r2 = t;\n   if(--i < 0) { i = this.DB-1; --j; }\n }\n}\nreturn z.revert(r);\n}\n\n//(public) gcd(this,a) (HAC 14.54)\nfunction bnGCD(a) {\nvar x = (this.s<0)?this.negate():this.clone();\nvar y = (a.s<0)?a.negate():a.clone();\nif(x.compareTo(y) < 0) { var t = x; x = y; y = t; }\nvar i = x.getLowestSetBit(), g = y.getLowestSetBit();\nif(g < 0) return x;\nif(i < g) g = i;\nif(g > 0) {\n x.rShiftTo(g,x);\n y.rShiftTo(g,y);\n}\nwhile(x.signum() > 0) {\n if((i = x.getLowestSetBit()) > 0) x.rShiftTo(i,x);\n if((i = y.getLowestSetBit()) > 0) y.rShiftTo(i,y);\n if(x.compareTo(y) >= 0) {\n   x.subTo(y,x);\n   x.rShiftTo(1,x);\n }\n else {\n   y.subTo(x,y);\n   y.rShiftTo(1,y);\n }\n}\nif(g > 0) y.lShiftTo(g,y);\nreturn y;\n}\n\n//(protected) this % n, n < 2^26\nfunction bnpModInt(n) {\nif(n <= 0) return 0;\nvar d = this.DV%n, r = (this.s<0)?n-1:0;\nif(this.t > 0)\n if(d == 0) r = this.data[0]%n;\n else for(var i = this.t-1; i >= 0; --i) r = (d*r+this.data[i])%n;\nreturn r;\n}\n\n//(public) 1/this % m (HAC 14.61)\nfunction bnModInverse(m) {\nvar ac = m.isEven();\nif((this.isEven() && ac) || m.signum() == 0) return BigInteger.ZERO;\nvar u = m.clone(), v = this.clone();\nvar a = nbv(1), b = nbv(0), c = nbv(0), d = nbv(1);\nwhile(u.signum() != 0) {\n while(u.isEven()) {\n   u.rShiftTo(1,u);\n   if(ac) {\n     if(!a.isEven() || !b.isEven()) { a.addTo(this,a); b.subTo(m,b); }\n     a.rShiftTo(1,a);\n   }\n   else if(!b.isEven()) b.subTo(m,b);\n   b.rShiftTo(1,b);\n }\n while(v.isEven()) {\n   v.rShiftTo(1,v);\n   if(ac) {\n     if(!c.isEven() || !d.isEven()) { c.addTo(this,c); d.subTo(m,d); }\n     c.rShiftTo(1,c);\n   }\n   else if(!d.isEven()) d.subTo(m,d);\n   d.rShiftTo(1,d);\n }\n if(u.compareTo(v) >= 0) {\n   u.subTo(v,u);\n   if(ac) a.subTo(c,a);\n   b.subTo(d,b);\n }\n else {\n   v.subTo(u,v);\n   if(ac) c.subTo(a,c);\n   d.subTo(b,d);\n }\n}\nif(v.compareTo(BigInteger.ONE) != 0) return BigInteger.ZERO;\nif(d.compareTo(m) >= 0) return d.subtract(m);\nif(d.signum() < 0) d.addTo(m,d); else return d;\nif(d.signum() < 0) return d.add(m); else return d;\n}\n\nvar lowprimes = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509];\nvar lplim = (1<<26)/lowprimes[lowprimes.length-1];\n\n//(public) test primality with certainty >= 1-.5^t\nfunction bnIsProbablePrime(t) {\nvar i, x = this.abs();\nif(x.t == 1 && x.data[0] <= lowprimes[lowprimes.length-1]) {\n for(i = 0; i < lowprimes.length; ++i)\n   if(x.data[0] == lowprimes[i]) return true;\n return false;\n}\nif(x.isEven()) return false;\ni = 1;\nwhile(i < lowprimes.length) {\n var m = lowprimes[i], j = i+1;\n while(j < lowprimes.length && m < lplim) m *= lowprimes[j++];\n m = x.modInt(m);\n while(i < j) if(m%lowprimes[i++] == 0) return false;\n}\nreturn x.millerRabin(t);\n}\n\n//(protected) true if probably prime (HAC 4.24, Miller-Rabin)\nfunction bnpMillerRabin(t) {\nvar n1 = this.subtract(BigInteger.ONE);\nvar k = n1.getLowestSetBit();\nif(k <= 0) return false;\nvar r = n1.shiftRight(k);\nt = (t+1)>>1;\nif(t > lowprimes.length) t = lowprimes.length;\nvar a = nbi();\nfor(var i = 0; i < t; ++i) {\n a.fromInt(lowprimes[i]);\n var y = a.modPow(r,this);\n if(y.compareTo(BigInteger.ONE) != 0 && y.compareTo(n1) != 0) {\n   var j = 1;\n   while(j++ < k && y.compareTo(n1) != 0) {\n     y = y.modPowInt(2,this);\n     if(y.compareTo(BigInteger.ONE) == 0) return false;\n   }\n   if(y.compareTo(n1) != 0) return false;\n }\n}\nreturn true;\n}\n\n//protected\nBigInteger.prototype.chunkSize = bnpChunkSize;\nBigInteger.prototype.toRadix = bnpToRadix;\nBigInteger.prototype.fromRadix = bnpFromRadix;\nBigInteger.prototype.fromNumber = bnpFromNumber;\nBigInteger.prototype.bitwiseTo = bnpBitwiseTo;\nBigInteger.prototype.changeBit = bnpChangeBit;\nBigInteger.prototype.addTo = bnpAddTo;\nBigInteger.prototype.dMultiply = bnpDMultiply;\nBigInteger.prototype.dAddOffset = bnpDAddOffset;\nBigInteger.prototype.multiplyLowerTo = bnpMultiplyLowerTo;\nBigInteger.prototype.multiplyUpperTo = bnpMultiplyUpperTo;\nBigInteger.prototype.modInt = bnpModInt;\nBigInteger.prototype.millerRabin = bnpMillerRabin;\n\n//public\nBigInteger.prototype.clone = bnClone;\nBigInteger.prototype.intValue = bnIntValue;\nBigInteger.prototype.byteValue = bnByteValue;\nBigInteger.prototype.shortValue = bnShortValue;\nBigInteger.prototype.signum = bnSigNum;\nBigInteger.prototype.toByteArray = bnToByteArray;\nBigInteger.prototype.equals = bnEquals;\nBigInteger.prototype.min = bnMin;\nBigInteger.prototype.max = bnMax;\nBigInteger.prototype.and = bnAnd;\nBigInteger.prototype.or = bnOr;\nBigInteger.prototype.xor = bnXor;\nBigInteger.prototype.andNot = bnAndNot;\nBigInteger.prototype.not = bnNot;\nBigInteger.prototype.shiftLeft = bnShiftLeft;\nBigInteger.prototype.shiftRight = bnShiftRight;\nBigInteger.prototype.getLowestSetBit = bnGetLowestSetBit;\nBigInteger.prototype.bitCount = bnBitCount;\nBigInteger.prototype.testBit = bnTestBit;\nBigInteger.prototype.setBit = bnSetBit;\nBigInteger.prototype.clearBit = bnClearBit;\nBigInteger.prototype.flipBit = bnFlipBit;\nBigInteger.prototype.add = bnAdd;\nBigInteger.prototype.subtract = bnSubtract;\nBigInteger.prototype.multiply = bnMultiply;\nBigInteger.prototype.divide = bnDivide;\nBigInteger.prototype.remainder = bnRemainder;\nBigInteger.prototype.divideAndRemainder = bnDivideAndRemainder;\nBigInteger.prototype.modPow = bnModPow;\nBigInteger.prototype.modInverse = bnModInverse;\nBigInteger.prototype.pow = bnPow;\nBigInteger.prototype.gcd = bnGCD;\nBigInteger.prototype.isProbablePrime = bnIsProbablePrime;\n\n//BigInteger interfaces not implemented in jsbn:\n\n//BigInteger(int signum, byte[] magnitude)\n//double doubleValue()\n//float floatValue()\n//int hashCode()\n//long longValue()\n//static BigInteger valueOf(long val)\n\nforge.jsbn = forge.jsbn || {};\nforge.jsbn.BigInteger = BigInteger;\n\n/**\n * util.setImmediate\n */\n\n/* Utilities API */\nvar util = forge.util = forge.util || {};\n\n// define setImmediate and nextTick\nif(typeof process === 'undefined' || !process.nextTick) {\n  if(typeof setImmediate === 'function') {\n    util.setImmediate = setImmediate;\n    util.nextTick = function(callback) {\n      return setImmediate(callback);\n    };\n  }\n  else {\n    util.setImmediate = function(callback) {\n      setTimeout(callback, 0);\n    };\n    util.nextTick = util.setImmediate;\n  }\n}\nelse {\n  util.nextTick = process.nextTick;\n  if(typeof setImmediate === 'function') {\n    util.setImmediate = setImmediate;\n  }\n  else {\n    util.setImmediate = util.nextTick;\n  }\n}\n\n// _modPow\n\nvar _modPow = function(x, key, pub) {\n  var y;\n\n  if(pub) {\n    y = x.modPow(key.e, key.n);\n  }\n  else {\n    // pre-compute dP, dQ, and qInv if necessary\n    if(!key.dP) {\n      key.dP = key.d.mod(key.p.subtract(BigInteger.ONE));\n    }\n    if(!key.dQ) {\n      key.dQ = key.d.mod(key.q.subtract(BigInteger.ONE));\n    }\n    if(!key.qInv) {\n      key.qInv = key.q.modInverse(key.p);\n    }\n\n    /* Chinese remainder theorem (CRT) states:\n\n      Suppose n1, n2, ..., nk are positive integers which are pairwise\n      coprime (n1 and n2 have no common factors other than 1). For any\n      integers x1, x2, ..., xk there exists an integer x solving the\n      system of simultaneous congruences (where ~= means modularly\n      congruent so a ~= b mod n means a mod n = b mod n):\n\n      x ~= x1 mod n1\n      x ~= x2 mod n2\n      ...\n      x ~= xk mod nk\n\n      This system of congruences has a single simultaneous solution x\n      between 0 and n - 1. Furthermore, each xk solution and x itself\n      is congruent modulo the product n = n1*n2*...*nk.\n      So x1 mod n = x2 mod n = xk mod n = x mod n.\n\n      The single simultaneous solution x can be solved with the following\n      equation:\n\n      x = sum(xi*ri*si) mod n where ri = n/ni and si = ri^-1 mod ni.\n\n      Where x is less than n, xi = x mod ni.\n\n      For RSA we are only concerned with k = 2. The modulus n = pq, where\n      p and q are coprime. The RSA decryption algorithm is:\n\n      y = x^d mod n\n\n      Given the above:\n\n      x1 = x^d mod p\n      r1 = n/p = q\n      s1 = q^-1 mod p\n      x2 = x^d mod q\n      r2 = n/q = p\n      s2 = p^-1 mod q\n\n      So y = (x1r1s1 + x2r2s2) mod n\n           = ((x^d mod p)q(q^-1 mod p) + (x^d mod q)p(p^-1 mod q)) mod n\n\n      According to Fermat's Little Theorem, if the modulus P is prime,\n      for any integer A not evenly divisible by P, A^(P-1) ~= 1 mod P.\n      Since A is not divisible by P it follows that if:\n      N ~= M mod (P - 1), then A^N mod P = A^M mod P. Therefore:\n\n      A^N mod P = A^(M mod (P - 1)) mod P. (The latter takes less effort\n      to calculate). In order to calculate x^d mod p more quickly the\n      exponent d mod (p - 1) is stored in the RSA private key (the same\n      is done for x^d mod q). These values are referred to as dP and dQ\n      respectively. Therefore we now have:\n\n      y = ((x^dP mod p)q(q^-1 mod p) + (x^dQ mod q)p(p^-1 mod q)) mod n\n\n      Since we'll be reducing x^dP by modulo p (same for q) we can also\n      reduce x by p (and q respectively) before hand. Therefore, let\n\n      xp = ((x mod p)^dP mod p), and\n      xq = ((x mod q)^dQ mod q), yielding:\n\n      y = (xp*q*(q^-1 mod p) + xq*p*(p^-1 mod q)) mod n\n\n      This can be further reduced to a simple algorithm that only\n      requires 1 inverse (the q inverse is used) to be used and stored.\n      The algorithm is called Garner's algorithm. If qInv is the\n      inverse of q, we simply calculate:\n\n      y = (qInv*(xp - xq) mod p) * q + xq\n\n      However, there are two further complications. First, we need to\n      ensure that xp > xq to prevent signed BigIntegers from being used\n      so we add p until this is true (since we will be mod'ing with\n      p anyway). Then, there is a known timing attack on algorithms\n      using the CRT. To mitigate this risk, \"cryptographic blinding\"\n      should be used (*Not yet implemented*). This requires simply\n      generating a random number r between 0 and n-1 and its inverse\n      and multiplying x by r^e before calculating y and then multiplying\n      y by r^-1 afterwards.\n    */\n\n    // TODO: do cryptographic blinding\n\n    // calculate xp and xq\n    var xp = x.mod(key.p).modPow(key.dP, key.p);\n    var xq = x.mod(key.q).modPow(key.dQ, key.q);\n\n    // xp must be larger than xq to avoid signed bit usage\n    while(xp.compareTo(xq) < 0) {\n      xp = xp.add(key.p);\n    }\n\n    // do last step\n    y = xp.subtract(xq)\n      .multiply(key.qInv).mod(key.p)\n      .multiply(key.q).add(xq);\n  }\n\n  return y;\n};\n\n/**\n * util.encodeUtf8\n */\n\nutil.encodeUtf8 = function(str) {\n  return unescape(encodeURIComponent(str));\n};\n\n/**\n * util.decodeUtf8\n */\n\nutil.decodeUtf8 = function(str) {\n  return decodeURIComponent(escape(str));\n};\n\n\n/**\n * Creates a buffer that stores bytes. A value may be given to put into the\n * buffer that is either a string of bytes or a UTF-16 string that will\n * be encoded using UTF-8 (to do the latter, specify 'utf8' as the encoding).\n *\n * @param [input] the bytes to wrap (as a string) or a UTF-16 string to encode\n *          as UTF-8.\n * @param [encoding] (default: 'raw', other: 'utf8').\n */\nutil.createBuffer = function(input, encoding) {\n  encoding = encoding || 'raw';\n  if(input !== undefined && encoding === 'utf8') {\n    input = util.encodeUtf8(input);\n  }\n  return new util.ByteBuffer(input);\n};\n\n/**\n * util.hexToBytes\n */\n\nutil.hexToBytes = function(hex) {\n  var rval = '';\n  var i = 0;\n  if(hex.length & 1 == 1) {\n    // odd number of characters, convert first character alone\n    i = 1;\n    rval += String.fromCharCode(parseInt(hex[0], 16));\n  }\n  // convert 2 characters (1 byte) at a time\n  for(; i < hex.length; i += 2) {\n    rval += String.fromCharCode(parseInt(hex.substr(i, 2), 16));\n  }\n  return rval;\n};\n\n/**\n * pki.rsa.decrypt\n */\n\npki.rsa.decrypt = function(ed, key, pub, ml) {\n  // get the length of the modulus in bytes\n  var k = Math.ceil(key.n.bitLength() / 8);\n\n  // error if the length of the encrypted data ED is not k\n  if(ed.length != k) {\n    throw {\n      message: 'Encrypted message length is invalid.',\n      length: ed.length,\n      expected: k\n    };\n  }\n\n  // convert encrypted data into a big integer\n  // FIXME: hex conversion inefficient, get BigInteger w/byte strings\n  var y = new BigInteger(forge.util.createBuffer(ed).toHex(), 16);\n\n  // do RSA decryption\n  var x = _modPow(y, key, pub);\n\n  // create the encryption block, if x is shorter in bytes than k, then\n  // prepend zero bytes to fill up eb\n  // FIXME: hex conversion inefficient, get BigInteger w/byte strings\n  var xhex = x.toString(16);\n  var eb = forge.util.createBuffer();\n  var zeros = k - Math.ceil(xhex.length / 2);\n  while(zeros > 0) {\n    eb.putByte(0x00);\n    --zeros;\n  }\n  eb.putBytes(forge.util.hexToBytes(xhex));\n\n  if(ml !== false) {\n    /* It is an error if any of the following conditions occurs:\n\n      1. The encryption block EB cannot be parsed unambiguously.\n      2. The padding string PS consists of fewer than eight octets\n        or is inconsisent with the block type BT.\n      3. The decryption process is a public-key operation and the block\n        type BT is not 00 or 01, or the decryption process is a\n        private-key operation and the block type is not 02.\n     */\n\n    // parse the encryption block\n    var first = eb.getByte();\n    var bt = eb.getByte();\n    if(first !== 0x00 ||\n      (pub && bt !== 0x00 && bt !== 0x01) ||\n      (!pub && bt != 0x02) ||\n      (pub && bt === 0x00 && typeof(ml) === 'undefined')) {\n      throw {\n        message: 'Encryption block is invalid.'\n      };\n    }\n\n    var padNum = 0;\n    if(bt === 0x00) {\n      // check all padding bytes for 0x00\n      padNum = k - 3 - ml;\n      for(var i = 0; i < padNum; ++i) {\n        if(eb.getByte() !== 0x00) {\n          throw {\n            message: 'Encryption block is invalid.'\n          };\n        }\n      }\n    }\n    else if(bt === 0x01) {\n      // find the first byte that isn't 0xFF, should be after all padding\n      padNum = 0;\n      while(eb.length() > 1) {\n        if(eb.getByte() !== 0xFF) {\n          --eb.read;\n          break;\n        }\n        ++padNum;\n      }\n    }\n    else if(bt === 0x02) {\n      // look for 0x00 byte\n      padNum = 0;\n      while(eb.length() > 1) {\n        if(eb.getByte() === 0x00) {\n          --eb.read;\n          break;\n        }\n        ++padNum;\n      }\n    }\n\n    // zero must be 0x00 and padNum must be (k - 3 - message length)\n    var zero = eb.getByte();\n    if(zero !== 0x00 || padNum !== (k - 3 - eb.length())) {\n      throw {\n        message: 'Encryption block is invalid.'\n      };\n    }\n  }\n\n  // return message\n  return eb.getBytes();\n};\n\n/**\n * pki.rsa.encrypt\n */\n\npki.rsa.encrypt = function(m, key, bt) {\n  var pub = bt;\n  var eb = forge.util.createBuffer();\n\n  // get the length of the modulus in bytes\n  var k = Math.ceil(key.n.bitLength() / 8);\n\n  if(bt !== false && bt !== true) {\n    /* use PKCS#1 v1.5 padding */\n    if(m.length > (k - 11)) {\n      throw {\n        message: 'Message is too long to encrypt.',\n        length: m.length,\n        max: (k - 11)\n      };\n    }\n\n    /* A block type BT, a padding string PS, and the data D shall be\n      formatted into an octet string EB, the encryption block:\n\n      EB = 00 || BT || PS || 00 || D\n\n      The block type BT shall be a single octet indicating the structure of\n      the encryption block. For this version of the document it shall have\n      value 00, 01, or 02. For a private-key operation, the block type\n      shall be 00 or 01. For a public-key operation, it shall be 02.\n\n      The padding string PS shall consist of k-3-||D|| octets. For block\n      type 00, the octets shall have value 00; for block type 01, they\n      shall have value FF; and for block type 02, they shall be\n      pseudorandomly generated and nonzero. This makes the length of the\n      encryption block EB equal to k. */\n\n    // build the encryption block\n    eb.putByte(0x00);\n    eb.putByte(bt);\n\n    // create the padding, get key type\n    var padNum = k - 3 - m.length;\n    var padByte;\n    if(bt === 0x00 || bt === 0x01) {\n      pub = false;\n      padByte = (bt === 0x00) ? 0x00 : 0xFF;\n      for(var i = 0; i < padNum; ++i) {\n        eb.putByte(padByte);\n      }\n    }\n    else {\n      pub = true;\n      for(var i = 0; i < padNum; ++i) {\n        padByte = Math.floor(Math.random() * 255) + 1;\n        eb.putByte(padByte);\n      }\n    }\n\n    // zero followed by message\n    eb.putByte(0x00);\n  }\n\n  eb.putBytes(m);\n\n  // load encryption block as big integer 'x'\n  // FIXME: hex conversion inefficient, get BigInteger w/byte strings\n  var x = new BigInteger(eb.toHex(), 16);\n\n  // do RSA encryption\n  var y = _modPow(x, key, pub);\n\n  // convert y into the encrypted data byte string, if y is shorter in\n  // bytes than k, then prepend zero bytes to fill up ed\n  // FIXME: hex conversion inefficient, get BigInteger w/byte strings\n  var yhex = y.toString(16);\n  var ed = forge.util.createBuffer();\n  var zeros = k - Math.ceil(yhex.length / 2);\n  while(zeros > 0) {\n    ed.putByte(0x00);\n    --zeros;\n  }\n  ed.putBytes(forge.util.hexToBytes(yhex));\n  return ed.getBytes();\n};\n\n/**\n * pki.rsa.setPrivateKey\n */\n\npki.rsa.setPrivateKey = function(n, e, d, p, q, dP, dQ, qInv) {\n  var key = {\n    n: n,\n    e: e,\n    d: d,\n    p: p,\n    q: q,\n    dP: dP,\n    dQ: dQ,\n    qInv: qInv\n  };\n\n  /**\n   * Decrypts the given data with this private key.\n   *\n   * @param data the byte string to decrypt.\n   *\n   * @return the decrypted byte string.\n   */\n  key.decrypt = function(data) {\n    return pki.rsa.decrypt(data, key, false);\n  };\n\n  /**\n   * Signs the given digest, producing a signature.\n   *\n   * PKCS#1 supports multiple (currently two) signature schemes:\n   * RSASSA-PKCS1-v1_5 and RSASSA-PSS.\n   *\n   * By default this implementation uses the \"old scheme\", i.e.\n   * RSASSA-PKCS1-v1_5.  In order to generate a PSS signature, provide\n   * an instance of Forge PSS object as scheme parameter.\n   *\n   * @param md the message digest object with the hash to sign.\n   * @param scheme signature scheme to use, undefined for PKCS#1 v1.5\n   *   padding style.\n   * @return the signature as a byte string.\n   */\n  key.sign = function(md, scheme) {\n    var bt = false;  /* private key operation */\n\n    if(scheme === undefined) {\n      scheme = { encode: emsaPkcs1v15encode };\n      bt = 0x01;\n    }\n\n    var d = scheme.encode(md, key.n.bitLength());\n    return pki.rsa.encrypt(d, key, bt);\n  };\n\n  return key;\n};\n\n/**\n * _getValueLength\n */\n\nvar _getValueLength = function(b) {\n  var b2 = b.getByte();\n  if(b2 == 0x80) {\n    return undefined;\n  }\n\n  // see if the length is \"short form\" or \"long form\" (bit 8 set)\n  var length;\n  var longForm = b2 & 0x80;\n  if(!longForm) {\n    // length is just the first byte\n    length = b2;\n  }\n  else {\n    // the number of bytes the length is specified in bits 7 through 1\n    // and each length byte is in big-endian base-256\n    length = b.getInt((b2 & 0x7F) << 3);\n  }\n  return length;\n};\n\n/**\n * asn1\n */\n\n/**\n * asn1.Type\n */\n\nvar asn1 = forge.asn1 = forge.asn1 || {};\nasn1.Type = {\n  NONE:             0,\n  BOOLEAN:          1,\n  INTEGER:          2,\n  BITSTRING:        3,\n  OCTETSTRING:      4,\n  NULL:             5,\n  OID:              6,\n  ODESC:            7,\n  EXTERNAL:         8,\n  REAL:             9,\n  ENUMERATED:      10,\n  EMBEDDED:        11,\n  UTF8:            12,\n  ROID:            13,\n  SEQUENCE:        16,\n  SET:             17,\n  PRINTABLESTRING: 19,\n  IA5STRING:       22,\n  UTCTIME:         23,\n  GENERALIZEDTIME: 24,\n  BMPSTRING:       30\n};\n\n/**\n * asn1.Class\n */\n\nasn1.Class = {\n  UNIVERSAL:        0x00,\n  APPLICATION:      0x40,\n  CONTEXT_SPECIFIC: 0x80,\n  PRIVATE:          0xC0\n};\n\n/**\n * asn1.create\n */\n\nasn1.create = function(tagClass, type, constructed, value) {\n  /* An asn1 object has a tagClass, a type, a constructed flag, and a\n    value. The value's type depends on the constructed flag. If\n    constructed, it will contain a list of other asn1 objects. If not,\n    it will contain the ASN.1 value as an array of bytes formatted\n    according to the ASN.1 data type. */\n\n  // remove undefined values\n  if(value.constructor == Array) {\n    var tmp = [];\n    for(var i = 0; i < value.length; ++i) {\n      if(value[i] !== undefined) {\n        tmp.push(value[i]);\n      }\n    }\n    value = tmp;\n  }\n\n  return {\n    tagClass: tagClass,\n    type: type,\n    constructed: constructed,\n    composed: constructed || (value.constructor == Array),\n    value: value\n  };\n};\n\n/**\n * asn1.fromDer\n */\n\nasn1.fromDer = function(bytes) {\n  // wrap in buffer if needed\n  if(bytes.constructor == String) {\n    bytes = forge.util.createBuffer(bytes);\n  }\n\n  // minimum length for ASN.1 DER structure is 2\n  if(bytes.length() < 2)    {\n    throw {\n      message: 'Too few bytes to parse DER.',\n      bytes: bytes.length()\n    };\n  }\n\n  // get the first byte\n  var b1 = bytes.getByte();\n\n  // get the tag class\n  var tagClass = (b1 & 0xC0);\n\n  // get the type (bits 1-5)\n  var type = b1 & 0x1F;\n\n  // get the value length\n  var length = _getValueLength(bytes);\n\n  // ensure there are enough bytes to get the value\n  if(bytes.length() < length) {\n    throw {\n      message: 'Too few bytes to read ASN.1 value.',\n      detail: bytes.length() + ' < ' + length\n    };\n  }\n\n  // prepare to get value\n  var value;\n\n  // constructed flag is bit 6 (32 = 0x20) of the first byte\n  var constructed = ((b1 & 0x20) == 0x20);\n\n  // determine if the value is composed of other ASN.1 objects (if its\n  // constructed it will be and if its a BITSTRING it may be)\n  var composed = constructed;\n  if(!composed && tagClass === asn1.Class.UNIVERSAL &&\n    type === asn1.Type.BITSTRING && length > 1) {\n    /* The first octet gives the number of bits by which the length of the\n      bit string is less than the next multiple of eight (this is called\n      the \"number of unused bits\").\n\n      The second and following octets give the value of the bit string\n      converted to an octet string. */\n    // if there are no unused bits, maybe the bitstring holds ASN.1 objs\n    var read = bytes.read;\n    var unused = bytes.getByte();\n    if(unused === 0) {\n      // if the first byte indicates UNIVERSAL or CONTEXT_SPECIFIC,\n      // and the length is valid, assume we've got an ASN.1 object\n      b1 = bytes.getByte();\n      var tc = (b1 & 0xC0);\n      if(tc === asn1.Class.UNIVERSAL ||\n        tc === asn1.Class.CONTEXT_SPECIFIC) {\n        try {\n          var len = _getValueLength(bytes);\n          composed = (len === length - (bytes.read - read));\n          if(composed) {\n            // adjust read/length to account for unused bits byte\n            ++read;\n            --length;\n          }\n        }\n        catch(ex) {}\n      }\n    }\n    // restore read pointer\n    bytes.read = read;\n  }\n\n  if(composed) {\n    // parse child asn1 objects from the value\n    value = [];\n    if(length === undefined) {\n      // asn1 object of indefinite length, read until end tag\n      for(;;) {\n        if(bytes.bytes(2) === String.fromCharCode(0, 0)) {\n          bytes.getBytes(2);\n          break;\n        }\n        value.push(asn1.fromDer(bytes));\n      }\n    }\n    else {\n      // parsing asn1 object of definite length\n      var start = bytes.length();\n      while(length > 0) {\n        value.push(asn1.fromDer(bytes));\n        length -= start - bytes.length();\n        start = bytes.length();\n      }\n    }\n  }\n  // asn1 not composed, get raw value\n  else {\n    // TODO: do DER to OID conversion and vice-versa in .toDer?\n\n    if(length === undefined) {\n      throw {\n        message: 'Non-constructed ASN.1 object of indefinite length.'\n      };\n    }\n\n    if(type === asn1.Type.BMPSTRING) {\n      value = '';\n      for(var i = 0; i < length; i += 2) {\n        value += String.fromCharCode(bytes.getInt16());\n      }\n    }\n    else {\n      value = bytes.getBytes(length);\n    }\n  }\n\n  // create and return asn1 object\n  return asn1.create(tagClass, type, constructed, value);\n};\n\n/**\n * asn1.toDer\n */\n\nasn1.toDer = function(obj) {\n  var bytes = forge.util.createBuffer();\n\n  // build the first byte\n  var b1 = obj.tagClass | obj.type;\n\n  // for storing the ASN.1 value\n  var value = forge.util.createBuffer();\n\n  // if composed, use each child asn1 object's DER bytes as value\n  if(obj.composed) {\n    // turn on 6th bit (0x20 = 32) to indicate asn1 is constructed\n    // from other asn1 objects\n    if(obj.constructed) {\n      b1 |= 0x20;\n    }\n    // if type is a bit string, add unused bits of 0x00\n    else {\n      value.putByte(0x00);\n    }\n\n    // add all of the child DER bytes together\n    for(var i = 0; i < obj.value.length; ++i) {\n      if(obj.value[i] !== undefined) {\n        value.putBuffer(asn1.toDer(obj.value[i]));\n      }\n    }\n  }\n  // use asn1.value directly\n  else {\n    if(obj.type === asn1.Type.BMPSTRING) {\n      for(var i = 0; i < obj.value.length; ++i) {\n        value.putInt16(obj.value.charCodeAt(i));\n      }\n    }\n    else {\n      value.putBytes(obj.value);\n    }\n  }\n\n  // add tag byte\n  bytes.putByte(b1);\n\n  // use \"short form\" encoding\n  if(value.length() <= 127) {\n    // one byte describes the length\n    // bit 8 = 0 and bits 7-1 = length\n    bytes.putByte(value.length() & 0x7F);\n  }\n  // use \"long form\" encoding\n  else {\n    // 2 to 127 bytes describe the length\n    // first byte: bit 8 = 1 and bits 7-1 = # of additional bytes\n    // other bytes: length in base 256, big-endian\n    var len = value.length();\n    var lenBytes = '';\n    do {\n      lenBytes += String.fromCharCode(len & 0xFF);\n      len = len >>> 8;\n    }\n    while(len > 0);\n\n    // set first byte to # bytes used to store the length and turn on\n    // bit 8 to indicate long-form length is used\n    bytes.putByte(lenBytes.length | 0x80);\n\n    // concatenate length bytes in reverse since they were generated\n    // little endian and we need big endian\n    for(var i = lenBytes.length - 1; i >= 0; --i) {\n      bytes.putByte(lenBytes.charCodeAt(i));\n    }\n  }\n\n  // concatenate value bytes\n  bytes.putBuffer(value);\n  return bytes;\n};\n\n/**\n * pki.rsa.setPublicKey\n */\n\npki.rsa.setPublicKey = function(n, e) {\n  var key = {\n    n: n,\n    e: e\n  };\n\n  /**\n   * Encrypts the given data with this public key.\n   *\n   * @param data the byte string to encrypt.\n   *\n   * @return the encrypted byte string.\n   */\n  key.encrypt = function(data) {\n    return pki.rsa.encrypt(data, key, 0x02);\n  };\n\n  /**\n   * Verifies the given signature against the given digest.\n   *\n   * PKCS#1 supports multiple (currently two) signature schemes:\n   * RSASSA-PKCS1-v1_5 and RSASSA-PSS.\n   *\n   * By default this implementation uses the \"old scheme\", i.e.\n   * RSASSA-PKCS1-v1_5, in which case once RSA-decrypted, the\n   * signature is an OCTET STRING that holds a DigestInfo.\n   *\n   * DigestInfo ::= SEQUENCE {\n   *   digestAlgorithm DigestAlgorithmIdentifier,\n   *   digest Digest\n   * }\n   * DigestAlgorithmIdentifier ::= AlgorithmIdentifier\n   * Digest ::= OCTET STRING\n   *\n   * To perform PSS signature verification, provide an instance\n   * of Forge PSS object as scheme parameter.\n   *\n   * @param digest the message digest hash to compare against the signature.\n   * @param signature the signature to verify.\n   * @param scheme signature scheme to use, undefined for PKCS#1 v1.5\n   *   padding style.\n   * @return true if the signature was verified, false if not.\n   */\n   key.verify = function(digest, signature, scheme) {\n     // do rsa decryption\n     var ml = scheme === undefined ? undefined : false;\n     var d = pki.rsa.decrypt(signature, key, true, ml);\n\n     if(scheme === undefined) {\n       // d is ASN.1 BER-encoded DigestInfo\n       var obj = asn1.fromDer(d);\n\n       // compare the given digest to the decrypted one\n       return digest === obj.value[1].value;\n     }\n     else {\n       return scheme.verify(digest, d, key.n.bitLength());\n     }\n  };\n\n  return key;\n};\n\n/**\n * pki.rsa.stepKeyPairGenerationState\n */\n\nvar GCD_30_DELTA = [6, 4, 2, 4, 2, 4, 6, 2];\n\npki.rsa.stepKeyPairGenerationState = function(state, n) {\n  // do key generation (based on Tom Wu's rsa.js, see jsbn.js license)\n  // with some minor optimizations and designed to run in steps\n\n  // local state vars\n  var THIRTY = new BigInteger(null);\n  THIRTY.fromInt(30);\n  var deltaIdx = 0;\n  var op_or = function(x,y) { return x|y; };\n\n  // keep stepping until time limit is reached or done\n  var t1 = +new Date();\n  var t2;\n  var total = 0;\n  while(state.keys === null && (n <= 0 || total < n)) {\n    // generate p or q\n    if(state.state === 0) {\n      /* Note: All primes are of the form:\n\n        30k+i, for i < 30 and gcd(30, i)=1, where there are 8 values for i\n\n        When we generate a random number, we always align it at 30k + 1. Each\n        time the number is determined not to be prime we add to get to the\n        next 'i', eg: if the number was at 30k + 1 we add 6. */\n      var bits = (state.p === null) ? state.pBits : state.qBits;\n      var bits1 = bits - 1;\n\n      // get a random number\n      if(state.pqState === 0) {\n        state.num = new BigInteger(bits, state.rng);\n        // force MSB set\n        if(!state.num.testBit(bits1)) {\n          state.num.bitwiseTo(\n            BigInteger.ONE.shiftLeft(bits1), op_or, state.num);\n        }\n        // align number on 30k+1 boundary\n        state.num.dAddOffset(31 - state.num.mod(THIRTY).byteValue(), 0);\n        deltaIdx = 0;\n\n        ++state.pqState;\n      }\n      // try to make the number a prime\n      else if(state.pqState === 1) {\n        // overflow, try again\n        if(state.num.bitLength() > bits) {\n          state.pqState = 0;\n        }\n        // do primality test\n        else if(state.num.isProbablePrime(1)) {\n          ++state.pqState;\n        }\n        else {\n          // get next potential prime\n          state.num.dAddOffset(GCD_30_DELTA[deltaIdx++ % 8], 0);\n        }\n      }\n      // ensure number is coprime with e\n      else if(state.pqState === 2) {\n        state.pqState =\n          (state.num.subtract(BigInteger.ONE).gcd(state.e)\n          .compareTo(BigInteger.ONE) === 0) ? 3 : 0;\n      }\n      // ensure number is a probable prime\n      else if(state.pqState === 3) {\n        state.pqState = 0;\n        if(state.num.isProbablePrime(10)) {\n          if(state.p === null) {\n            state.p = state.num;\n          }\n          else {\n            state.q = state.num;\n          }\n\n          // advance state if both p and q are ready\n          if(state.p !== null && state.q !== null) {\n            ++state.state;\n          }\n        }\n        state.num = null;\n      }\n    }\n    // ensure p is larger than q (swap them if not)\n    else if(state.state === 1) {\n      if(state.p.compareTo(state.q) < 0) {\n        state.num = state.p;\n        state.p = state.q;\n        state.q = state.num;\n      }\n      ++state.state;\n    }\n    // compute phi: (p - 1)(q - 1) (Euler's totient function)\n    else if(state.state === 2) {\n      state.p1 = state.p.subtract(BigInteger.ONE);\n      state.q1 = state.q.subtract(BigInteger.ONE);\n      state.phi = state.p1.multiply(state.q1);\n      ++state.state;\n    }\n    // ensure e and phi are coprime\n    else if(state.state === 3) {\n      if(state.phi.gcd(state.e).compareTo(BigInteger.ONE) === 0) {\n        // phi and e are coprime, advance\n        ++state.state;\n      }\n      else {\n        // phi and e aren't coprime, so generate a new p and q\n        state.p = null;\n        state.q = null;\n        state.state = 0;\n      }\n    }\n    // create n, ensure n is has the right number of bits\n    else if(state.state === 4) {\n      state.n = state.p.multiply(state.q);\n\n      // ensure n is right number of bits\n      if(state.n.bitLength() === state.bits) {\n        // success, advance\n        ++state.state;\n      }\n      else {\n        // failed, get new q\n        state.q = null;\n        state.state = 0;\n      }\n    }\n    // set keys\n    else if(state.state === 5) {\n      var d = state.e.modInverse(state.phi);\n      state.keys = {\n        privateKey: forge.pki.rsa.setPrivateKey(\n          state.n, state.e, d, state.p, state.q,\n          d.mod(state.p1), d.mod(state.q1),\n          state.q.modInverse(state.p)),\n        publicKey: forge.pki.rsa.setPublicKey(state.n, state.e)\n      };\n    }\n\n    // update timing\n    t2 = +new Date();\n    total += t2 - t1;\n    t1 = t2;\n  }\n\n  return state.keys !== null;\n};\n\n/**\n * _generateKeyPair\n */\n\nfunction _generateKeyPair(state, options, callback) {\n  if(typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n\n  // web workers unavailable, use setImmediate\n  if(false || typeof(Worker) === 'undefined') {\n    function step() {\n      // 10 ms gives 5ms of leeway for other calculations before dropping\n      // below 60fps (1000/60 == 16.67), but in reality, the number will\n      // likely be higher due to an 'atomic' big int modPow\n      if(forge.pki.rsa.stepKeyPairGenerationState(state, 10)) {\n        return callback(null, state.keys);\n      }\n      forge.util.setImmediate(step);\n    }\n    return step();\n  }\n\n  // use web workers to generate keys\n  var numWorkers = options.workers || 2;\n  var workLoad = options.workLoad || 100;\n  var range = workLoad * 30/8;\n  var workerScript = options.workerScript || 'forge/prime.worker.js';\n  var THIRTY = new BigInteger(null);\n  THIRTY.fromInt(30);\n  var op_or = function(x,y) { return x|y; };\n  generate();\n\n  function generate() {\n    // find p and then q (done in series to simplify setting worker number)\n    getPrime(state.pBits, function(err, num) {\n      if(err) {\n        return callback(err);\n      }\n      state.p = num;\n      getPrime(state.qBits, finish);\n    });\n  }\n\n  // implement prime number generation using web workers\n  function getPrime(bits, callback) {\n    // TODO: consider optimizing by starting workers outside getPrime() ...\n    // note that in order to clean up they will have to be made internally\n    // asynchronous which may actually be slower\n\n    // start workers immediately\n    var workers = [];\n    for(var i = 0; i < numWorkers; ++i) {\n      // FIXME: fix path or use blob URLs\n      workers[i] = new Worker(workerScript);\n    }\n    var running = numWorkers;\n\n    // initialize random number\n    var num = generateRandom();\n\n    // listen for requests from workers and assign ranges to find prime\n    for(var i = 0; i < numWorkers; ++i) {\n      workers[i].addEventListener('message', workerMessage);\n    }\n\n    /* Note: The distribution of random numbers is unknown. Therefore, each\n    web worker is continuously allocated a range of numbers to check for a\n    random number until one is found.\n\n    Every 30 numbers will be checked just 8 times, because prime numbers\n    have the form:\n\n    30k+i, for i < 30 and gcd(30, i)=1 (there are 8 values of i for this)\n\n    Therefore, if we want a web worker to run N checks before asking for\n    a new range of numbers, each range must contain N*30/8 numbers.\n\n    For 100 checks (workLoad), this is a range of 375. */\n\n    function generateRandom() {\n      var bits1 = bits - 1;\n      var num = new BigInteger(bits, state.rng);\n      // force MSB set\n      if(!num.testBit(bits1)) {\n        num.bitwiseTo(BigInteger.ONE.shiftLeft(bits1), op_or, num);\n      }\n      // align number on 30k+1 boundary\n      num.dAddOffset(31 - num.mod(THIRTY).byteValue(), 0);\n      return num;\n    }\n\n    var found = false;\n    function workerMessage(e) {\n      // ignore message, prime already found\n      if(found) {\n        return;\n      }\n\n      --running;\n      var data = e.data;\n      if(data.found) {\n        // terminate all workers\n        for(var i = 0; i < workers.length; ++i) {\n          workers[i].terminate();\n        }\n        found = true;\n        return callback(null, new BigInteger(data.prime, 16));\n      }\n\n      // overflow, regenerate prime\n      if(num.bitLength() > bits) {\n        num = generateRandom();\n      }\n\n      // assign new range to check\n      var hex = num.toString(16);\n\n      // start prime search\n      e.target.postMessage({\n        e: state.eInt,\n        hex: hex,\n        workLoad: workLoad\n      });\n\n      num.dAddOffset(range, 0);\n    }\n  }\n\n  function finish(err, num) {\n    // set q\n    state.q = num;\n\n    // ensure p is larger than q (swap them if not)\n    if(state.p.compareTo(state.q) < 0) {\n      var tmp = state.p;\n      state.p = state.q;\n      state.q = tmp;\n    }\n\n    // compute phi: (p - 1)(q - 1) (Euler's totient function)\n    state.p1 = state.p.subtract(BigInteger.ONE);\n    state.q1 = state.q.subtract(BigInteger.ONE);\n    state.phi = state.p1.multiply(state.q1);\n\n    // ensure e and phi are coprime\n    if(state.phi.gcd(state.e).compareTo(BigInteger.ONE) !== 0) {\n      // phi and e aren't coprime, so generate a new p and q\n      state.p = state.q = null;\n      generate();\n      return;\n    }\n\n    // create n, ensure n is has the right number of bits\n    state.n = state.p.multiply(state.q);\n    if(state.n.bitLength() !== state.bits) {\n      // failed, get new q\n      state.q = null;\n      getPrime(state.qBits, finish);\n      return;\n    }\n\n    // set keys\n    var d = state.e.modInverse(state.phi);\n    state.keys = {\n      privateKey: forge.pki.rsa.setPrivateKey(\n        state.n, state.e, d, state.p, state.q,\n        d.mod(state.p1), d.mod(state.q1),\n        state.q.modInverse(state.p)),\n      publicKey: forge.pki.rsa.setPublicKey(state.n, state.e)\n    };\n\n    callback(null, state.keys);\n  }\n}\n\n/**\n * pki.rsa.generateKeyPair\n */\n\npki.rsa.generateKeyPair = function(bits, e, options, callback) {\n  // (bits), (options), (callback)\n  if(arguments.length === 1) {\n    if(typeof bits === 'object') {\n      options = bits;\n      bits = undefined;\n    }\n    else if(typeof bits === 'function') {\n      callback = bits;\n      bits = undefined;\n    }\n  }\n  // (bits, options), (bits, callback), (options, callback)\n  else if(arguments.length === 2) {\n    if(typeof bits === 'number') {\n      if(typeof e === 'function') {\n        callback = e;\n      }\n      else {\n        options = e;\n      }\n    }\n    else {\n      options = bits;\n      callback = e;\n      bits = undefined;\n    }\n    e = undefined;\n  }\n  // (bits, e, options), (bits, e, callback), (bits, options, callback)\n  else if(arguments.length === 3) {\n    if(typeof e === 'number') {\n      if(typeof options === 'function') {\n        callback = options;\n        options = undefined;\n      }\n    }\n    else {\n      callback = options;\n      options = e;\n      e = undefined;\n    }\n  }\n  options = options || {};\n  if(bits === undefined) {\n    bits = options.bits || 1024;\n  }\n  if(e === undefined) {\n    e = options.e || 0x10001;\n  }\n  var state = pki.rsa.createKeyPairGenerationState(bits, e);\n  if(!callback) {\n    pki.rsa.stepKeyPairGenerationState(state, 0);\n    return state.keys;\n  }\n  _generateKeyPair(state, options, callback);\n};\n\n/**\n * _bnToBytes\n */\n\nvar _bnToBytes = function(b) {\n  // prepend 0x00 if first byte >= 0x80\n  var hex = b.toString(16);\n  if(hex[0] >= '8') {\n    hex = '00' + hex;\n  }\n  return forge.util.hexToBytes(hex);\n};\n\n/**\n * pki.publicKeyToRSAPublicKey\n */\n\npki.publicKeyToRSAPublicKey = function(key) {\n  // RSAPublicKey\n  return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n    // modulus (n)\n    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,\n      _bnToBytes(key.n)),\n    // publicExponent (e)\n    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,\n      _bnToBytes(key.e))\n  ]);\n};\n\n/**\n * util.encode64\n */\n\nvar _base64 =\n  'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n\nutil.encode64 = function(input, maxline) {\n  var line = '';\n  var output = '';\n  var chr1, chr2, chr3;\n  var i = 0;\n  while(i < input.length) {\n    chr1 = input.charCodeAt(i++);\n    chr2 = input.charCodeAt(i++);\n    chr3 = input.charCodeAt(i++);\n\n    // encode 4 character group\n    line += _base64.charAt(chr1 >> 2);\n    line += _base64.charAt(((chr1 & 3) << 4) | (chr2 >> 4));\n    if(isNaN(chr2)) {\n      line += '==';\n    }\n    else {\n      line += _base64.charAt(((chr2 & 15) << 2) | (chr3 >> 6));\n      line += isNaN(chr3) ? '=' : _base64.charAt(chr3 & 63);\n    }\n\n    if(maxline && line.length > maxline) {\n      output += line.substr(0, maxline) + '\\r\\n';\n      line = line.substr(maxline);\n    }\n  }\n  output += line;\n\n  return output;\n};\n\n/**\n * pki.publicKeyToRSAPublicKeyPem\n */\n\npki.publicKeyToRSAPublicKeyPem = function(key, maxline) {\n  // convert to ASN.1, then DER, then base64-encode\n  var out = asn1.toDer(pki.publicKeyToRSAPublicKey(key));\n  out = forge.util.encode64(out.getBytes(), maxline || 64);\n  return (\n    '-----BEGIN RSA PUBLIC KEY-----\\r\\n' +\n    out +\n    '\\r\\n-----END RSA PUBLIC KEY-----');\n};\n\n/**\n * pki.privateKeyToAsn1\n */\n\npki.privateKeyToAsn1 = pki.privateKeyToRSAPrivateKey = function(key) {\n  // RSAPrivateKey\n  return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n    // version (0 = only 2 primes, 1 multiple primes)\n    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,\n      String.fromCharCode(0x00)),\n    // modulus (n)\n    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,\n      _bnToBytes(key.n)),\n    // publicExponent (e)\n    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,\n      _bnToBytes(key.e)),\n    // privateExponent (d)\n    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,\n      _bnToBytes(key.d)),\n    // privateKeyPrime1 (p)\n    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,\n      _bnToBytes(key.p)),\n    // privateKeyPrime2 (q)\n    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,\n      _bnToBytes(key.q)),\n    // privateKeyExponent1 (dP)\n    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,\n      _bnToBytes(key.dP)),\n    // privateKeyExponent2 (dQ)\n    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,\n      _bnToBytes(key.dQ)),\n    // coefficient (qInv)\n    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,\n      _bnToBytes(key.qInv))\n  ]);\n};\n\n/**\n * pki.privateKeyToPem\n */\n\npki.privateKeyToPem = function(key, maxline) {\n  // convert to ASN.1, then DER, then base64-encode\n  var out = asn1.toDer(pki.privateKeyToAsn1(key));\n  out = forge.util.encode64(out.getBytes(), maxline || 64);\n  return (\n    '-----BEGIN RSA PRIVATE KEY-----\\r\\n' +\n    out +\n    '\\r\\n-----END RSA PRIVATE KEY-----');\n};\n", "const crypto = require('crypto')\nconst keypair = require('keypair')\n\nconst UnknownError = (process) => new Error(`Something went wrong during ${process}`)\n\nconst acceptableBitSizes = [1024, 2048];\n\nexports.generate = (sizeInBits) => {\n  if (!acceptableBitSizes.includes(sizeInBits)) throw Error('Error generating public and private key. Key size can only be 1024 or 2048. Example usage: ` let keys = QuickEncrypt.generate(2048); `')\n  return keypair({ bits: sizeInBits })\n}\n\nexports.encrypt = (payloadString, publicKey) => {\n  if (typeof payloadString !== 'string' || typeof publicKey !== 'string') throw Error(\"Error encrypting. Payload and Public Key should be in text format. Example usage: ` let encryptedText = QuickEncrypt.encrypt('Some secret text here!', 'the public RSA key in text format here'); ` \")\n  try {\n    return crypto.publicEncrypt(publicKey, Buffer.from(payloadString, 'utf8')).toString('hex')\n  } catch (error) {\n    throw UnknownError('encryption')\n  }\n}\n\nexports.decrypt = (encryptedString, privateKey) => {\n  if (typeof encryptedString !== 'string' || typeof privateKey !== 'string') throw Error(\"Error decrypting. Decrypted Text and Private Key should be in text format. Example usage: ` let decryptedText = QuickEncrypt.decrypt('asddd213d19jenacanscasn', 'the private RSA key in text format here'); ` \")\n  try {\n    return crypto.privateDecrypt({ key: privateKey }, Buffer.from(encryptedString, 'hex')).toString()\n  } catch (error) {\n    throw UnknownError('decryption')\n  }\n}\n"],
  "mappings": ";;;;;;;;AAAA;AAAA;AAAA,QAAI,QAAQ,CAAC;AACb,QAAI,MAAM,MAAM,MAAM,CAAC;AACvB,QAAI,KAAK,MAAM,KAAK,CAAC;AACrB,QAAI,MAAM,MAAM,MAAM,CAAC;AACvB,QAAI,MAAM,MAAM,IAAI,MAAM,MAAM,MAAM,CAAC;AACvC,QAAI,OAAO,MAAM,OAAO,CAAC;AAMzB,WAAO,UAAU,SAAU,MAAM;AAC/B,UAAI,CAAC,KAAM,QAAO,CAAC;AACnB,UAAI,OAAO,KAAK,QAAQ,YAAa,MAAK,OAAO;AACjD,UAAI,UAAU,MAAM,IAAI,gBAAgB,IAAI;AAC5C,gBAAU;AAAA,QACR,QAAQ,IAAI,MAAM,IAAI,2BAA2B,QAAQ,WAAW,EAAE,CAAC;AAAA,QACvE,SAAS,IAAI,MAAM,IAAI,gBAAgB,QAAQ,YAAY,EAAE,CAAC;AAAA,MAChE;AACA,aAAO;AAAA,IACT;AAEA,aAAS,IAAK,KAAK;AACjB,aAAO,IAAI,QAAQ,OAAO,EAAE,IAAI;AAAA,IAClC;AAMA,SAAK,aAAa,SAAS,GAAG,GAAG;AAC/B,UAAI,IAAI;AACR,aAAM,IAAI,GAAG;AACX,YAAG,IAAI,GAAG;AACR,eAAK;AAAA,QACP;AACA,eAAO;AACP,YAAG,IAAI,GAAG;AACR,eAAK;AAAA,QACP;AAAA,MACF;AACA,aAAO;AAAA,IACT;AAMA,QAAI,OAAO,MAAM,OAAO,MAAM,GAAG,OAAO,CAAC;AAGzC,QAAI,WAAW;AACf,QAAI,eAAe;AAKnB,QAAI,QAAQ,WAAW;AAErB,iBAAW,OAAO,aAAa,GAAG;AAClC,kBAAY,MAAM,KAAK,WAAW,OAAO,aAAa,CAAI,GAAG,EAAE;AAG/D,qBAAe;AAAA,IACjB;AASA,QAAI,UAAU,SAAS,GAAG,GAAG,OAAO;AAElC,UAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG;AACzB,UAAI,MAAM,MAAM,OAAO;AACvB,aAAM,OAAO,IAAI;AAMf,YAAI,EAAE;AACN,YAAI,EAAE;AACN,YAAI,EAAE;AACN,YAAI,EAAE;AACN,YAAI,EAAE;AAGN,aAAI,IAAI,GAAG,IAAI,IAAI,EAAE,GAAG;AACtB,cAAI,MAAM,SAAS;AACnB,YAAE,CAAC,IAAI;AACP,cAAI,IAAK,KAAK,IAAI;AAClB,eAAM,KAAK,IAAM,MAAM,MAAO,IAAI,IAAI,aAAa;AACnD,cAAI;AACJ,cAAI;AACJ,cAAK,KAAK,KAAO,MAAM;AACvB,cAAI;AACJ,cAAI;AAAA,QACN;AACA,eAAM,IAAI,IAAI,EAAE,GAAG;AACjB,cAAK,EAAE,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE;AAC/C,cAAK,KAAK,IAAM,MAAM;AACtB,YAAE,CAAC,IAAI;AACP,cAAI,IAAK,KAAK,IAAI;AAClB,eAAM,KAAK,IAAM,MAAM,MAAO,IAAI,IAAI,aAAa;AACnD,cAAI;AACJ,cAAI;AACJ,cAAK,KAAK,KAAO,MAAM;AACvB,cAAI;AACJ,cAAI;AAAA,QACN;AAEA,eAAM,IAAI,IAAI,EAAE,GAAG;AACjB,cAAK,EAAE,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE;AAC/C,cAAK,KAAK,IAAM,MAAM;AACtB,YAAE,CAAC,IAAI;AACP,cAAI,IAAI,IAAI;AACZ,eAAM,KAAK,IAAM,MAAM,MAAO,IAAI,IAAI,aAAa;AACnD,cAAI;AACJ,cAAI;AACJ,cAAK,KAAK,KAAO,MAAM;AACvB,cAAI;AACJ,cAAI;AAAA,QACN;AACA,eAAM,IAAI,IAAI,EAAE,GAAG;AACjB,cAAK,EAAE,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE;AAChD,cAAK,KAAK,IAAM,MAAM;AACtB,YAAE,CAAC,IAAI;AACP,cAAI,IAAI,IAAI;AACZ,eAAM,KAAK,IAAM,MAAM,MAAO,IAAI,IAAI,aAAa;AACnD,cAAI;AACJ,cAAI;AACJ,cAAK,KAAK,KAAO,MAAM;AACvB,cAAI;AACJ,cAAI;AAAA,QACN;AAEA,eAAM,IAAI,IAAI,EAAE,GAAG;AACjB,cAAK,EAAE,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE;AAChD,cAAK,KAAK,IAAM,MAAM;AACtB,YAAE,CAAC,IAAI;AACP,cAAK,IAAI,IAAM,KAAK,IAAI;AACxB,eAAM,KAAK,IAAM,MAAM,MAAO,IAAI,IAAI,aAAa;AACnD,cAAI;AACJ,cAAI;AACJ,cAAK,KAAK,KAAO,MAAM;AACvB,cAAI;AACJ,cAAI;AAAA,QACN;AAEA,eAAM,IAAI,IAAI,EAAE,GAAG;AACjB,cAAK,EAAE,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE;AAChD,cAAK,KAAK,IAAM,MAAM;AACtB,YAAE,CAAC,IAAI;AACP,cAAI,IAAI,IAAI;AACZ,eAAM,KAAK,IAAM,MAAM,MAAO,IAAI,IAAI,aAAa;AACnD,cAAI;AACJ,cAAI;AACJ,cAAK,KAAK,KAAO,MAAM;AACvB,cAAI;AACJ,cAAI;AAAA,QACN;AAGA,UAAE,MAAM;AACR,UAAE,MAAM;AACR,UAAE,MAAM;AACR,UAAE,MAAM;AACR,UAAE,MAAM;AAER,eAAO;AAAA,MACT;AAAA,IACF;AAOA,SAAK,SAAS,WAAW;AAEvB,UAAG,CAAC,cAAc;AAChB,cAAM;AAAA,MACR;AAGA,UAAI,SAAS;AAGb,UAAI,SAAS,MAAM,KAAK,aAAa;AAGrC,UAAI,KAAK,IAAI,MAAM,EAAE;AAGrB,UAAIA,MAAK;AAAA,QACP,WAAW;AAAA,QACX,aAAa;AAAA,QACb,cAAc;AAAA;AAAA,QAEd,eAAe;AAAA,MACjB;AAKA,MAAAA,IAAG,QAAQ,WAAW;AACpB,QAAAA,IAAG,gBAAgB;AACnB,iBAAS,MAAM,KAAK,aAAa;AACjC,iBAAS;AAAA,UACP,IAAI;AAAA,UACJ,IAAI;AAAA,UACJ,IAAI;AAAA,UACJ,IAAI;AAAA,UACJ,IAAI;AAAA,QACN;AAAA,MACF;AAEA,MAAAA,IAAG,MAAM;AAUT,MAAAA,IAAG,SAAS,SAAS,KAAK,UAAU;AAClC,YAAG,aAAa,QAAQ;AACtB,gBAAM,MAAM,KAAK,WAAW,GAAG;AAAA,QACjC;AAGA,QAAAA,IAAG,iBAAiB,IAAI;AAGxB,eAAO,SAAS,GAAG;AAGnB,gBAAQ,QAAQ,IAAI,MAAM;AAG1B,YAAG,OAAO,OAAO,QAAQ,OAAO,OAAO,MAAM,GAAG;AAC9C,iBAAO,QAAQ;AAAA,QACjB;AAAA,MACF;AAOC,MAAAA,IAAG,SAAS,WAAW;AAqBtB,YAAI,MAAMA,IAAG;AACb,YAAI,WAAW,MAAM,KAAK,aAAa;AACvC,iBAAS,SAAS,OAAO,MAAM,CAAC;AAChC,iBAAS,SAAS,SAAS,OAAO,GAAG,MAAO,MAAM,KAAK,EAAG,CAAC;AAQ3D,iBAAS,SAAU,QAAQ,KAAM,GAAI;AACrC,iBAAS,SAAU,OAAO,IAAK,UAAU;AACzC,YAAI,KAAK;AAAA,UACP,IAAI,OAAO;AAAA,UACX,IAAI,OAAO;AAAA,UACX,IAAI,OAAO;AAAA,UACX,IAAI,OAAO;AAAA,UACX,IAAI,OAAO;AAAA,QACb;AACA,gBAAQ,IAAI,IAAI,QAAQ;AACxB,YAAI,OAAO,MAAM,KAAK,aAAa;AACnC,aAAK,SAAS,GAAG,EAAE;AACnB,aAAK,SAAS,GAAG,EAAE;AACnB,aAAK,SAAS,GAAG,EAAE;AACnB,aAAK,SAAS,GAAG,EAAE;AACnB,aAAK,SAAS,GAAG,EAAE;AACnB,eAAO;AAAA,MACT;AAEA,aAAOA;AAAA,IACT;AAYA,SAAK,aAAa,SAAS,GAAG;AAE5B,WAAK,OAAO,KAAK;AAEjB,WAAK,OAAO;AAAA,IACd;AAOA,SAAK,WAAW,UAAU,SAAS,WAAW;AAC5C,aAAO,KAAK,KAAK,SAAS,KAAK;AAAA,IACjC;AAOA,SAAK,WAAW,UAAU,UAAU,WAAW;AAC7C,aAAQ,KAAK,KAAK,SAAS,KAAK,SAAU;AAAA,IAC5C;AAOA,SAAK,WAAW,UAAU,UAAU,SAAS,GAAG;AAC9C,WAAK,QAAQ,OAAO,aAAa,CAAC;AAAA,IACpC;AAQA,SAAK,WAAW,UAAU,eAAe,SAAS,GAAG,GAAG;AACtD,UAAI,OAAO,aAAa,CAAC;AACzB,UAAI,IAAI,KAAK;AACb,aAAM,IAAI,GAAG;AACX,YAAG,IAAI,GAAG;AACR,eAAK;AAAA,QACP;AACA,eAAO;AACP,YAAG,IAAI,GAAG;AACR,eAAK;AAAA,QACP;AAAA,MACF;AACA,WAAK,OAAO;AAAA,IACd;AAOA,SAAK,WAAW,UAAU,WAAW,SAAS,OAAO;AACnD,WAAK,QAAQ;AAAA,IACf;AAOA,SAAK,WAAW,UAAU,YAAY,SAAS,KAAK;AAClD,WAAK,QAAQ,KAAK,WAAW,GAAG;AAAA,IAClC;AAOA,SAAK,WAAW,UAAU,WAAW,SAAS,GAAG;AAC/C,WAAK,QACH,OAAO,aAAa,KAAK,IAAI,GAAI,IACjC,OAAO,aAAa,IAAI,GAAI;AAAA,IAChC;AAOA,SAAK,WAAW,UAAU,WAAW,SAAS,GAAG;AAC/C,WAAK,QACH,OAAO,aAAa,KAAK,KAAK,GAAI,IAClC,OAAO,aAAa,KAAK,IAAI,GAAI,IACjC,OAAO,aAAa,IAAI,GAAI;AAAA,IAChC;AAOA,SAAK,WAAW,UAAU,WAAW,SAAS,GAAG;AAC/C,WAAK,QACH,OAAO,aAAa,KAAK,KAAK,GAAI,IAClC,OAAO,aAAa,KAAK,KAAK,GAAI,IAClC,OAAO,aAAa,KAAK,IAAI,GAAI,IACjC,OAAO,aAAa,IAAI,GAAI;AAAA,IAChC;AAOA,SAAK,WAAW,UAAU,aAAa,SAAS,GAAG;AACjD,WAAK,QACH,OAAO,aAAa,IAAI,GAAI,IAC5B,OAAO,aAAa,KAAK,IAAI,GAAI;AAAA,IACrC;AAOA,SAAK,WAAW,UAAU,aAAa,SAAS,GAAG;AACjD,WAAK,QACH,OAAO,aAAa,IAAI,GAAI,IAC5B,OAAO,aAAa,KAAK,IAAI,GAAI,IACjC,OAAO,aAAa,KAAK,KAAK,GAAI;AAAA,IACtC;AAOA,SAAK,WAAW,UAAU,aAAa,SAAS,GAAG;AACjD,WAAK,QACH,OAAO,aAAa,IAAI,GAAI,IAC5B,OAAO,aAAa,KAAK,IAAI,GAAI,IACjC,OAAO,aAAa,KAAK,KAAK,GAAI,IAClC,OAAO,aAAa,KAAK,KAAK,GAAI;AAAA,IACtC;AAQA,SAAK,WAAW,UAAU,SAAS,SAAS,GAAG,GAAG;AAChD,SAAG;AACD,aAAK;AACL,aAAK,QAAQ,OAAO,aAAc,KAAK,IAAK,GAAI;AAAA,MAClD,SACM,IAAI;AAAA,IACZ;AAOA,SAAK,WAAW,UAAU,YAAY,SAAS,QAAQ;AACrD,WAAK,QAAQ,OAAO,SAAS;AAAA,IAC/B;AAOA,SAAK,WAAW,UAAU,UAAU,WAAW;AAC7C,aAAO,KAAK,KAAK,WAAW,KAAK,MAAM;AAAA,IACzC;AAQA,SAAK,WAAW,UAAU,WAAW,WAAW;AAC9C,UAAI,OACF,KAAK,KAAK,WAAW,KAAK,IAAI,KAAK,IACnC,KAAK,KAAK,WAAW,KAAK,OAAO,CAAC;AACpC,WAAK,QAAQ;AACb,aAAO;AAAA,IACT;AAQA,SAAK,WAAW,UAAU,WAAW,WAAW;AAC9C,UAAI,OACF,KAAK,KAAK,WAAW,KAAK,IAAI,KAAK,KACnC,KAAK,KAAK,WAAW,KAAK,OAAO,CAAC,KAAK,IACvC,KAAK,KAAK,WAAW,KAAK,OAAO,CAAC;AACpC,WAAK,QAAQ;AACb,aAAO;AAAA,IACT;AAQA,SAAK,WAAW,UAAU,WAAW,WAAW;AAC9C,UAAI,OACF,KAAK,KAAK,WAAW,KAAK,IAAI,KAAK,KACnC,KAAK,KAAK,WAAW,KAAK,OAAO,CAAC,KAAK,KACvC,KAAK,KAAK,WAAW,KAAK,OAAO,CAAC,KAAK,IACvC,KAAK,KAAK,WAAW,KAAK,OAAO,CAAC;AACpC,WAAK,QAAQ;AACb,aAAO;AAAA,IACT;AAQA,SAAK,WAAW,UAAU,aAAa,WAAW;AAChD,UAAI,OACF,KAAK,KAAK,WAAW,KAAK,IAAI,IAC9B,KAAK,KAAK,WAAW,KAAK,OAAO,CAAC,KAAK;AACzC,WAAK,QAAQ;AACb,aAAO;AAAA,IACT;AAQA,SAAK,WAAW,UAAU,aAAa,WAAW;AAChD,UAAI,OACF,KAAK,KAAK,WAAW,KAAK,IAAI,IAC9B,KAAK,KAAK,WAAW,KAAK,OAAO,CAAC,KAAK,IACvC,KAAK,KAAK,WAAW,KAAK,OAAO,CAAC,KAAK;AACzC,WAAK,QAAQ;AACb,aAAO;AAAA,IACT;AAQA,SAAK,WAAW,UAAU,aAAa,WAAW;AAChD,UAAI,OACF,KAAK,KAAK,WAAW,KAAK,IAAI,IAC9B,KAAK,KAAK,WAAW,KAAK,OAAO,CAAC,KAAK,IACvC,KAAK,KAAK,WAAW,KAAK,OAAO,CAAC,KAAK,KACvC,KAAK,KAAK,WAAW,KAAK,OAAO,CAAC,KAAK;AACzC,WAAK,QAAQ;AACb,aAAO;AAAA,IACT;AAUA,SAAK,WAAW,UAAU,SAAS,SAAS,GAAG;AAC7C,UAAI,OAAO;AACX,SAAG;AACD,gBAAQ,QAAQ,KAAK,KAAK,KAAK,WAAW,KAAK,MAAM;AACrD,aAAK;AAAA,MACP,SACM,IAAI;AACV,aAAO;AAAA,IACT;AASA,SAAK,WAAW,UAAU,WAAW,SAAS,OAAO;AACnD,UAAI;AACJ,UAAG,OAAO;AAER,gBAAQ,KAAK,IAAI,KAAK,OAAO,GAAG,KAAK;AACrC,eAAO,KAAK,KAAK,MAAM,KAAK,MAAM,KAAK,OAAO,KAAK;AACnD,aAAK,QAAQ;AAAA,MACf,WACQ,UAAU,GAAG;AACnB,eAAO;AAAA,MACT,OACK;AAEH,eAAQ,KAAK,SAAS,IAAK,KAAK,OAAO,KAAK,KAAK,MAAM,KAAK,IAAI;AAChE,aAAK,MAAM;AAAA,MACb;AACA,aAAO;AAAA,IACT;AAUA,SAAK,WAAW,UAAU,QAAQ,SAAS,OAAO;AAChD,aAAQ,OAAO,UAAW,cACxB,KAAK,KAAK,MAAM,KAAK,IAAI,IACzB,KAAK,KAAK,MAAM,KAAK,MAAM,KAAK,OAAO,KAAK;AAAA,IAChD;AASA,SAAK,WAAW,UAAU,KAAK,SAAS,GAAG;AACzC,aAAO,KAAK,KAAK,WAAW,KAAK,OAAO,CAAC;AAAA,IAC3C;AAQA,SAAK,WAAW,UAAU,QAAQ,SAAS,GAAG,GAAG;AAC/C,WAAK,OAAO,KAAK,KAAK,OAAO,GAAG,KAAK,OAAO,CAAC,IAC3C,OAAO,aAAa,CAAC,IACrB,KAAK,KAAK,OAAO,KAAK,OAAO,IAAI,CAAC;AAAA,IACtC;AAOA,SAAK,WAAW,UAAU,OAAO,WAAW;AAC1C,aAAO,KAAK,KAAK,WAAW,KAAK,KAAK,SAAS,CAAC;AAAA,IAClD;AAOA,SAAK,WAAW,UAAU,OAAO,WAAW;AAC1C,UAAI,IAAI,KAAK,aAAa,KAAK,IAAI;AACnC,QAAE,OAAO,KAAK;AACd,aAAO;AAAA,IACT;AAKA,SAAK,WAAW,UAAU,UAAU,WAAW;AAC7C,UAAG,KAAK,OAAO,GAAG;AAChB,aAAK,OAAO,KAAK,KAAK,MAAM,KAAK,IAAI;AACrC,aAAK,OAAO;AAAA,MACd;AAAA,IACF;AAKA,SAAK,WAAW,UAAU,QAAQ,WAAW;AAC3C,WAAK,OAAO;AACZ,WAAK,OAAO;AAAA,IACd;AAOA,SAAK,WAAW,UAAU,WAAW,SAAS,OAAO;AACnD,UAAI,MAAM,KAAK,IAAI,GAAG,KAAK,OAAO,IAAI,KAAK;AAC3C,WAAK,OAAO,KAAK,KAAK,OAAO,KAAK,MAAM,GAAG;AAC3C,WAAK,OAAO;AAAA,IACd;AAOA,SAAK,WAAW,UAAU,QAAQ,WAAW;AAC3C,UAAI,OAAO;AACX,eAAQ,IAAI,KAAK,MAAM,IAAI,KAAK,KAAK,QAAQ,EAAE,GAAG;AAChD,YAAI,IAAI,KAAK,KAAK,WAAW,CAAC;AAC9B,YAAG,IAAI,IAAI;AACT,kBAAQ;AAAA,QACV;AACA,gBAAQ,EAAE,SAAS,EAAE;AAAA,MACvB;AACA,aAAO;AAAA,IACT;AAOA,SAAK,WAAW,UAAU,WAAW,WAAW;AAC9C,aAAO,KAAK,WAAW,KAAK,MAAM,CAAC;AAAA,IACrC;AAKA,SAAK,eAAe,SAAS,OAAO,UAAU;AAC5C,iBAAW,YAAY;AACvB,UAAG,UAAU,UAAa,aAAa,QAAQ;AAC7C,gBAAQ,KAAK,WAAW,KAAK;AAAA,MAC/B;AACA,aAAO,IAAI,KAAK,WAAW,KAAK;AAAA,IAClC;AAMA,QAAI,OAAO,MAAM,OAAO,CAAC;AACzB,QAAI,SAAS;AAEb,SAAK,SAAS,SAAS,QAAQ;AAC7B,UAAI,MAAM;AAAA,QACR;AAAA,QACA,KAAK;AAAA,QACL,MAAM;AAAA,QACN,MAAM;AAAA;AAAA,QAEN,SAAS;AAAA;AAAA,QAET,WAAW;AAAA,MACb;AAGA,UAAIA,MAAK,OAAO;AAChB,UAAI,QAAQ,IAAI,MAAM,EAAE;AACxB,eAAQ,IAAI,GAAG,IAAI,IAAI,EAAE,GAAG;AAC1B,cAAM,CAAC,IAAIA,IAAG,OAAO;AAAA,MACvB;AACA,UAAI,QAAQ;AAGZ,UAAI,OAAO;AAYX,UAAI,WAAW,SAAS,OAAO,UAAU;AAEvC,YAAG,CAAC,UAAU;AACZ,iBAAO,IAAI,aAAa,KAAK;AAAA,QAC/B;AAGA,YAAI,SAAS,IAAI,OAAO;AACxB,YAAI,YAAY,IAAI,OAAO;AAC3B,YAAI,YAAY,IAAI,OAAO;AAC3B,YAAI,aAAa,IAAI,OAAO;AAC5B,YAAI,IAAI,MAAM,KAAK,aAAa;AAEhC,iBAAS;AAET,iBAAS,SAAS,KAAK;AACrB,cAAG,KAAK;AACN,mBAAO,SAAS,GAAG;AAAA,UACrB;AAGA,cAAG,EAAE,OAAO,KAAK,OAAO;AACtB,mBAAO,SAAS,MAAM,EAAE,SAAS,KAAK,CAAC;AAAA,UACzC;AAGA,cAAG,IAAI,aAAa,SAAS;AAE3B,gBAAI,MAAM,CAAC,oBAAI,KAAK;AACpB,gBAAG,IAAI,SAAS,QAAS,MAAM,IAAI,OAAO,KAAM;AAC9C,kBAAI,MAAM;AAAA,YACZ;AAAA,UACF;AAEA,cAAG,IAAI,QAAQ,MAAM;AACnB,mBAAO,QAAQ,QAAQ;AAAA,UACzB;AAGA,cAAI,QAAQ,OAAO,IAAI,KAAK,IAAI,IAAI;AACpC,cAAI,aAAa,MAAM;AACvB,YAAE,SAAS,KAAK;AAGhB,cAAI,MAAM,UAAU,OAAO,IAAI,KAAK,UAAU,IAAI,IAAI,CAAC,CAAC;AACxD,cAAI,OAAO,WAAW,OAAO,IAAI,KAAK,IAAI,IAAI,CAAC;AAE/C,gBAAM,KAAK,aAAa,QAAQ;AAAA,QAClC;AAAA,MACF;AASA,UAAI,eAAe,SAAS,OAAO;AAEjC,YAAI,SAAS,IAAI,OAAO;AACxB,YAAI,YAAY,IAAI,OAAO;AAC3B,YAAI,YAAY,IAAI,OAAO;AAC3B,YAAI,aAAa,IAAI,OAAO;AAC5B,YAAI,IAAI,MAAM,KAAK,aAAa;AAChC,eAAM,EAAE,OAAO,IAAI,OAAO;AAExB,cAAG,IAAI,aAAa,SAAS;AAE3B,gBAAI,MAAM,CAAC,oBAAI,KAAK;AACpB,gBAAG,IAAI,SAAS,QAAS,MAAM,IAAI,OAAO,KAAM;AAC9C,kBAAI,MAAM;AAAA,YACZ;AAAA,UACF;AAEA,cAAG,IAAI,QAAQ,MAAM;AACnB,wBAAY;AAAA,UACd;AAGA,cAAI,QAAQ,OAAO,IAAI,KAAK,IAAI,IAAI;AACpC,cAAI,aAAa,MAAM;AACvB,YAAE,SAAS,KAAK;AAGhB,cAAI,MAAM,UAAU,OAAO,IAAI,KAAK,UAAU,IAAI,IAAI,CAAC,CAAC;AACxD,cAAI,OAAO,WAAW,OAAO,IAAI,KAAK,IAAI,IAAI,CAAC;AAAA,QACjD;AAEA,eAAO,EAAE,SAAS,KAAK;AAAA,MACzB;AAOA,eAAS,QAAQ,UAAU;AACzB,YAAG,IAAI,MAAM,CAAC,EAAE,iBAAiB,IAAI;AACnC,gBAAM;AACN,iBAAO,SAAS;AAAA,QAClB;AAEA,YAAI,SAAU,KAAK,IAAI,MAAM,CAAC,EAAE,iBAAkB;AAClD,YAAI,SAAS,QAAQ,SAAS,KAAK,OAAO;AACxC,cAAG,KAAK;AACN,mBAAO,SAAS,GAAG;AAAA,UACrB;AACA,cAAI,QAAQ,KAAK;AACjB,gBAAM;AACN,mBAAS;AAAA,QACX,CAAC;AAAA,MACH;AAKA,eAAS,cAAc;AACrB,YAAG,IAAI,MAAM,CAAC,EAAE,iBAAiB,IAAI;AACnC,iBAAO,MAAM;AAAA,QACf;AAEA,YAAI,SAAU,KAAK,IAAI,MAAM,CAAC,EAAE,iBAAkB;AAClD,YAAI,QAAQ,IAAI,aAAa,MAAM,CAAC;AACpC,cAAM;AAAA,MACR;AAKA,eAAS,QAAQ;AAEf,YAAIA,MAAK,MAAM,GAAG,KAAK,OAAO;AAG9B,QAAAA,IAAG,OAAO,IAAI,MAAM,CAAC,EAAE,OAAO,EAAE,SAAS,CAAC;AAC1C,YAAI,MAAM,CAAC,EAAE,MAAM;AAInB,YAAI,IAAI;AACR,iBAAQC,KAAI,GAAGA,KAAI,IAAI,EAAEA,IAAG;AAE1B,cAAK,MAAM,KAAM,aAAc,KAAK;AACpC,cAAG,IAAI,IAAI,YAAY,GAAG;AACxB,YAAAD,IAAG,OAAO,IAAI,MAAMC,EAAC,EAAE,OAAO,EAAE,SAAS,CAAC;AAC1C,gBAAI,MAAMA,EAAC,EAAE,MAAM;AAAA,UACrB;AAAA,QACF;AAGA,YAAI,WAAWD,IAAG,OAAO,EAAE,SAAS;AACpC,QAAAA,IAAG,MAAM;AACT,QAAAA,IAAG,OAAO,QAAQ;AAClB,YAAI,YAAYA,IAAG,OAAO,EAAE,SAAS;AAGrC,YAAI,MAAM,IAAI,OAAO,UAAU,QAAQ;AACvC,YAAI,OAAO,IAAI,OAAO,WAAW,SAAS;AAC1C,UAAE,IAAI;AACN,YAAI,YAAY;AAChB,YAAI,OAAO,CAAC,oBAAI,KAAK;AAAA,MACvB;AAUA,eAAS,gBAAgB,QAAQ;AAG/B,YAAI,IAAI,MAAM,KAAK,aAAa;AAChC,YAAG,OAAO,WAAW,eACnB,OAAO,UAAU,OAAO,OAAO,iBAAiB;AAChD,cAAI,UAAU,IAAI,YAAY,SAAS,CAAC;AACxC,cAAI;AACF,mBAAO,OAAO,gBAAgB,OAAO;AACrC,qBAAQC,KAAI,GAAGA,KAAI,QAAQ,QAAQ,EAAEA,IAAG;AACtC,gBAAE,SAAS,QAAQA,EAAC,CAAC;AAAA,YACvB;AAAA,UACF,SACM,GAAG;AAAA,UAMT;AAAA,QACF;AAGA,YAAG,EAAE,OAAO,IAAI,QAAQ;AAItB,cAAI,IAAI,IAAI;AACZ,cAAI,OAAO,KAAK,MAAM,KAAK,OAAO,IAAI,KAAM;AAC5C,iBAAM,EAAE,OAAO,IAAI,QAAQ;AACzB,iBAAK,SAAS,OAAO;AACrB,iBAAK,SAAS,QAAQ;AACtB,mBAAO,KAAK,UAAW;AACvB,kBAAM,MAAM;AACZ,kBAAM,KAAK,eAAe,MAAM;AAChC,mBAAO,KAAK;AAGZ,qBAAQA,KAAI,GAAGA,KAAI,GAAG,EAAEA,IAAG;AAEzB,qBAAO,UAAUA,MAAK;AACtB,sBAAQ,KAAK,MAAM,KAAK,OAAO,IAAI,GAAI;AACvC,gBAAE,QAAQ,OAAO,aAAa,OAAO,GAAI,CAAC;AAAA,YAC5C;AAAA,UACF;AAAA,QACF;AAEA,eAAO,EAAE,SAAS;AAAA,MACpB;AAEA,UAAG,QAAQ;AAET,YAAI,WAAW,SAAS,QAAQ,UAAU;AACxC,iBAAO,YAAY,QAAQ,SAAS,KAAK,OAAO;AAC9C,gBAAG,KAAK;AACN,qBAAO,SAAS,GAAG;AAAA,YACrB;AACA,qBAAS,MAAM,MAAM,SAAS,CAAC;AAAA,UACjC,CAAC;AAAA,QACH;AAEA,YAAI,eAAe,SAAS,QAAQ;AAClC,iBAAO,OAAO,YAAY,MAAM,EAAE,SAAS;AAAA,QAC7C;AAAA,MACF,OACK;AACH,YAAI,WAAW,SAAS,QAAQ,UAAU;AACxC,cAAI;AACF,qBAAS,MAAM,gBAAgB,MAAM,CAAC;AAAA,UACxC,SACM,GAAG;AACP,qBAAS,CAAC;AAAA,UACZ;AAAA,QACF;AACA,YAAI,eAAe;AAAA,MACrB;AAOA,UAAI,UAAU,SAAS,OAAO;AAE5B,YAAI,QAAQ,MAAM;AAClB,iBAAQA,KAAI,GAAGA,KAAI,OAAO,EAAEA,IAAG;AAC7B,cAAI,MAAM,IAAI,IAAI,EAAE,OAAO,MAAM,OAAOA,IAAG,CAAC,CAAC;AAC7C,cAAI,OAAQ,IAAI,SAAS,KAAM,IAAI,IAAI,OAAO;AAAA,QAChD;AAAA,MACF;AAQA,UAAI,aAAa,SAASA,IAAG,GAAG;AAC9B,YAAI,QAAQ;AACZ,iBAAQ,IAAI,GAAG,IAAI,GAAG,KAAK,GAAG;AAC5B,mBAAS,OAAO,aAAcA,MAAK,IAAK,GAAI;AAAA,QAC9C;AACA,YAAI,QAAQ,KAAK;AAAA,MACnB;AAUA,UAAI,iBAAiB,SAAS,QAAQ;AAEpC,YAAG,WAAW,MAAM;AAClB,cAAI,WAAW,SAAS,QAAQ,UAAU;AACxC,qBAASC,UAAS,GAAG;AACnB,kBAAI,OAAO,EAAE;AACb,kBAAG,KAAK,SAAS,KAAK,MAAM,MAAM;AAChC,qBAAK,oBAAoB,WAAWA,SAAQ;AAC5C,yBAAS,KAAK,MAAM,KAAK,KAAK,KAAK,MAAM,KAAK,KAAK;AAAA,cACrD;AAAA,YACF;AACA,iBAAK,iBAAiB,WAAWA,SAAQ;AACzC,iBAAK,YAAY,EAAC,OAAO,EAAC,MAAM,EAAC,OAAc,EAAC,EAAC,CAAC;AAAA,UACpD;AAAA,QACF,OAEK;AACH,cAASA,YAAT,SAAkB,GAAG;AACnB,gBAAI,OAAO,EAAE;AACb,gBAAG,KAAK,SAAS,KAAK,MAAM,MAAM;AAChC,kBAAI,SAAS,KAAK,MAAM,KAAK,QAAQ,SAAS,KAAK,OAAO;AACxD,uBAAO,YAAY,EAAC,OAAO,EAAC,MAAM,EAAC,KAAU,MAAY,EAAC,EAAC,CAAC;AAAA,cAC9D,CAAC;AAAA,YACH;AAAA,UACF;AAPS,yBAAAA;AAST,iBAAO,iBAAiB,WAAWA,SAAQ;AAAA,QAC7C;AAAA,MACF;AAEA,aAAO;AAAA,IACT;AAMA,QAAI,OAAO;AACX,QAAI,KAAK;AACT,QAAI;AACJ,QAAI;AACJ,QAAI;AACJ,QAAI;AACJ,QAAI;AAEJ,QAAI,aAAa,WAAW;AAC1B,aAAO;AAeP,aAAO,CAAC,GAAM,GAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,KAAM,IAAM,EAAI;AAGxE,UAAI,QAAQ,IAAI,MAAM,GAAG;AACzB,eAAQ,IAAI,GAAG,IAAI,KAAK,EAAE,GAAG;AAC3B,cAAM,CAAC,IAAI,KAAK;AAChB,cAAM,IAAI,GAAG,IAAK,IAAI,OAAQ,IAAI;AAAA,MACpC;AAGA,aAAO,IAAI,MAAM,GAAG;AACpB,cAAQ,IAAI,MAAM,GAAG;AACrB,YAAM,IAAI,MAAM,CAAC;AACjB,aAAO,IAAI,MAAM,CAAC;AAClB,eAAQ,IAAI,GAAG,IAAI,GAAG,EAAE,GAAG;AACzB,YAAI,CAAC,IAAI,IAAI,MAAM,GAAG;AACtB,aAAK,CAAC,IAAI,IAAI,MAAM,GAAG;AAAA,MACzB;AACA,UAAI,IAAI,GAAG,KAAK,GAAG,IAAI,IAAI,IAAI,IAAI,KAAK,IAAI;AAC5C,eAAQ,IAAI,GAAG,IAAI,KAAK,EAAE,GAAG;AA6D3B,aAAK,KAAM,MAAM,IAAM,MAAM,IAAM,MAAM,IAAM,MAAM;AACrD,aAAM,MAAM,IAAM,KAAK,MAAO;AAG9B,aAAK,CAAC,IAAI;AACV,cAAM,EAAE,IAAI;AAgEZ,cAAM,MAAM,EAAE;AACd,aAAK,MAAM,CAAC;AACZ,aAAK,MAAM,EAAE;AACb,aAAK,MAAM,EAAE;AACb,aACG,OAAO;AAAA,QACP,MAAM;AAAA,QACN,MAAM;AAAA,SACN,KAAK;AACR,eACG,KAAK,KAAK,OAAO;AAAA,SACjB,IAAI,OAAO;AAAA,SACX,IAAI,KAAK,OAAO;AAAA,SAChB,IAAI,KAAK;AAEZ,iBAAQ,IAAI,GAAG,IAAI,GAAG,EAAE,GAAG;AACzB,cAAI,CAAC,EAAE,CAAC,IAAI;AACZ,eAAK,CAAC,EAAE,EAAE,IAAI;AAGd,eAAK,MAAM,KAAK,OAAO;AACvB,gBAAM,OAAO,KAAK,QAAQ;AAAA,QAC5B;AAGA,YAAG,MAAM,GAAG;AAEV,cAAI,KAAK;AAAA,QACX,OACK;AAGH,cAAI,KAAK,MAAM,MAAM,MAAM,KAAK,EAAE,CAAC,CAAC;AACpC,gBAAM,MAAM,MAAM,EAAE,CAAC;AAAA,QACvB;AAAA,MACF;AAAA,IACF;AA0BA,QAAI,YAAY,SAASC,MAAK,SAAS;AAErC,UAAI,IAAIA,KAAI,MAAM,CAAC;AAanB,UAAI,MAAM,MAAM;AAChB,UAAI,KAAK,EAAE;AACX,UAAI,MAAM,KAAK,IAAI;AACnB,UAAI,MAAM,KAAK;AACf,eAAQ,IAAI,IAAI,IAAI,KAAK,EAAE,GAAG;AAC5B,eAAO,EAAE,IAAI,CAAC;AACd,YAAG,IAAI,OAAO,GAAG;AAEf,iBACE,KAAK,SAAS,KAAK,GAAG,KAAK,KAC3B,KAAK,SAAS,IAAI,GAAG,KAAK,KAC1B,KAAK,OAAO,GAAG,KAAK,IACpB,KAAK,SAAS,EAAE,IAAK,KAAK,GAAG,KAAK;AACpC;AAAA,QACF,WACQ,KAAK,KAAM,IAAI,MAAM,GAAI;AAE/B,iBACE,KAAK,SAAS,EAAE,KAAK,KACrB,KAAK,SAAS,KAAK,GAAG,KAAK,KAC3B,KAAK,SAAS,IAAI,GAAG,KAAK,IAC1B,KAAK,OAAO,GAAG;AAAA,QACnB;AACA,UAAE,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI;AAAA,MACrB;AAiDA,UAAG,SAAS;AACV,YAAI;AACJ,YAAI,KAAK,KAAK,CAAC;AACf,YAAI,KAAK,KAAK,CAAC;AACf,YAAI,KAAK,KAAK,CAAC;AACf,YAAI,KAAK,KAAK,CAAC;AACf,YAAI,OAAO,EAAE,MAAM,CAAC;AACpB,YAAI,MAAM,EAAE;AACZ,iBAAQ,IAAI,GAAG,KAAK,MAAM,IAAI,IAAI,KAAK,KAAK,IAAI,MAAM,IAAI;AAIxD,cAAG,MAAM,KAAK,MAAO,MAAM,IAAK;AAC9B,iBAAK,CAAC,IAAI,EAAE,EAAE;AACd,iBAAK,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC;AACtB,iBAAK,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC;AACtB,iBAAK,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC;AAAA,UACxB,OACK;AAKH,qBAAQ,IAAI,GAAG,IAAI,IAAI,EAAE,GAAG;AAC1B,oBAAM,EAAE,KAAK,CAAC;AACd,mBAAK,KAAK,IAAE,CAAC,EAAE,IACb,GAAG,KAAK,QAAQ,EAAE,CAAC,IACnB,GAAG,KAAK,QAAQ,KAAK,GAAG,CAAC,IACzB,GAAG,KAAK,QAAQ,IAAI,GAAG,CAAC,IACxB,GAAG,KAAK,MAAM,GAAG,CAAC;AAAA,YACtB;AAAA,UACF;AAAA,QACF;AACA,YAAI;AAAA,MACN;AAEA,aAAO;AAAA,IACT;AAGA,UAAM,IAAI,aAAa,SAASA,MAAK,SAAS;AAC5C,UAAG,CAAC,MAAM;AACR,mBAAW;AAAA,MACb;AACA,aAAO,UAAUA,MAAK,OAAO;AAAA,IAC/B;AAMA,QAAI,eAAe,SAAS,GAAG,OAAO,QAAQ,SAAS;AAuCrD,UAAI,KAAK,EAAE,SAAS,IAAI;AACxB,UAAI,IAAI,IAAI,IAAI,IAAI;AACpB,UAAG,SAAS;AACV,aAAK,KAAK,CAAC;AACX,aAAK,KAAK,CAAC;AACX,aAAK,KAAK,CAAC;AACX,aAAK,KAAK,CAAC;AACX,cAAM;AAAA,MACR,OACK;AACH,aAAK,IAAI,CAAC;AACV,aAAK,IAAI,CAAC;AACV,aAAK,IAAI,CAAC;AACV,aAAK,IAAI,CAAC;AACV,cAAM;AAAA,MACR;AACA,UAAI,GAAG,GAAG,GAAG,GAAG,IAAI,IAAI;AACxB,UAAI,MAAM,CAAC,IAAI,EAAE,CAAC;AAClB,UAAI,MAAM,UAAU,IAAI,CAAC,IAAI,EAAE,CAAC;AAChC,UAAI,MAAM,CAAC,IAAI,EAAE,CAAC;AAClB,UAAI,MAAM,UAAU,IAAI,CAAC,IAAI,EAAE,CAAC;AAChC,UAAI,IAAI;AAQR,eAAQ,QAAQ,GAAG,QAAQ,IAAI,EAAE,OAAO;AAoHtC,aACE,GAAG,MAAM,EAAE,IACX,GAAG,MAAM,KAAK,GAAG,IACjB,GAAG,MAAM,IAAI,GAAG,IAChB,GAAG,IAAI,GAAG,IAAI,EAAE,EAAE,CAAC;AACrB,aACE,GAAG,MAAM,EAAE,IACX,GAAG,MAAM,KAAK,GAAG,IACjB,GAAG,MAAM,IAAI,GAAG,IAChB,GAAG,IAAI,GAAG,IAAI,EAAE,EAAE,CAAC;AACrB,aACE,GAAG,MAAM,EAAE,IACX,GAAG,MAAM,KAAK,GAAG,IACjB,GAAG,MAAM,IAAI,GAAG,IAChB,GAAG,IAAI,GAAG,IAAI,EAAE,EAAE,CAAC;AACrB,YACE,GAAG,MAAM,EAAE,IACX,GAAG,MAAM,KAAK,GAAG,IACjB,GAAG,MAAM,IAAI,GAAG,IAChB,GAAG,IAAI,GAAG,IAAI,EAAE,EAAE,CAAC;AACrB,YAAI;AACJ,YAAI;AACJ,YAAI;AAAA,MACN;AAcA,aAAO,CAAC,IACL,IAAI,MAAM,EAAE,KAAK,KACjB,IAAI,MAAM,KAAK,GAAG,KAAK,KACvB,IAAI,MAAM,IAAI,GAAG,KAAK,IACtB,IAAI,IAAI,GAAG,IAAK,EAAE,EAAE,CAAC;AACxB,aAAO,UAAU,IAAI,CAAC,IACnB,IAAI,MAAM,EAAE,KAAK,KACjB,IAAI,MAAM,KAAK,GAAG,KAAK,KACvB,IAAI,MAAM,IAAI,GAAG,KAAK,IACtB,IAAI,IAAI,GAAG,IAAK,EAAE,EAAE,CAAC;AACxB,aAAO,CAAC,IACL,IAAI,MAAM,EAAE,KAAK,KACjB,IAAI,MAAM,KAAK,GAAG,KAAK,KACvB,IAAI,MAAM,IAAI,GAAG,KAAK,IACtB,IAAI,IAAI,GAAG,IAAK,EAAE,EAAE,CAAC;AACxB,aAAO,UAAU,IAAI,CAAC,IACnB,IAAI,MAAM,EAAE,KAAK,KACjB,IAAI,MAAM,KAAK,GAAG,KAAK,KACvB,IAAI,MAAM,IAAI,GAAG,KAAK,IACtB,IAAI,IAAI,GAAG,IAAK,EAAE,EAAE,CAAC;AAAA,IAC1B;AAGA,UAAM,IAAI,eAAe;AAOzB,QAAI,WAAW,CAAC;AAChB,QAAI,mBAAmB,IAAI,MAAM,CAAC;AAClC,QAAI,mBAAmB,MAAM,KAAK,aAAa;AAC/C,aAAS,YAAY,SAASA,MAAK;AAEjC,UAAI,MAAM,MAAM,KAAK,aAAaA,IAAG;AACrC,MAAAA,OAAM,IAAI,MAAM,CAAC;AACjB,MAAAA,KAAI,CAAC,IAAI,IAAI,SAAS;AACtB,MAAAA,KAAI,CAAC,IAAI,IAAI,SAAS;AACtB,MAAAA,KAAI,CAAC,IAAI,IAAI,SAAS;AACtB,MAAAA,KAAI,CAAC,IAAI,IAAI,SAAS;AAGtB,aAAO,MAAM,IAAI,WAAWA,MAAK,KAAK;AAAA,IACxC;AACA,aAAS,aAAa,SAAS,MAAM;AAEnC,UAAI,MAAM,MAAM,KAAK,aAAa,IAAI;AACtC,aAAO,IAAI,MAAM,CAAC;AAClB,WAAK,CAAC,IAAI,IAAI,SAAS;AACvB,WAAK,CAAC,IAAI,IAAI,SAAS;AACvB,WAAK,CAAC,IAAI,IAAI,SAAS;AACvB,WAAK,CAAC,IAAI,IAAI,SAAS;AACvB,aAAO;AAAA,IACT;AACA,aAAS,SAAS,SAASA,MAAK,MAAM;AACpC,YAAM,IAAI,aAAaA,MAAK,MAAM,kBAAkB,KAAK;AACzD,uBAAiB,SAAS,iBAAiB,CAAC,CAAC;AAC7C,uBAAiB,SAAS,iBAAiB,CAAC,CAAC;AAC7C,uBAAiB,SAAS,iBAAiB,CAAC,CAAC;AAC7C,uBAAiB,SAAS,iBAAiB,CAAC,CAAC;AAC7C,aAAO,iBAAiB,SAAS;AAAA,IACnC;AACA,aAAS,YAAY,SAAS,MAAM;AAElC,QAAE,KAAK,CAAC;AACR,aAAO;AAAA,IACT;AACA,aAAS,KAAK,MAAM,GAAG;AAGvB,QAAI,OAAO,MAAM,KAAK,OAAO,QAAQ;AAKrC,QAAI,OAAO,UAAU,eAAe,CAAC,OAAO,UAAU,CAAC,OAAO,OAAO,iBAAiB;AAGpF,UAAG,OAAO,WAAW,eAAe,OAAO,aAAa,QAAW;AAAA,MAEnE;AAGA,WAAK,WAAW,CAAC,oBAAI,KAAK,GAAG,EAAE;AAG/B,UAAG,OAAO,cAAe,aAAa;AAChC,oBAAY;AAChB,aAAQ,OAAO,WAAW;AACxB,cAAI;AACF,gBAAG,OAAO,UAAU,GAAG,KAAM,UAAU;AACrC,2BAAa,UAAU,GAAG;AAAA,YAC5B;AAAA,UACF,SACM,GAAG;AAAA,UAOT;AAAA,QACF;AACA,aAAK,QAAQ,SAAS;AACtB,oBAAY;AAAA,MACd;AAAA,IACF;AAnBQ;AACI;AAoBZ,UAAM,SAAS;AAMf,UAAM,OAAO,WAAW,SAAS,OAAO,UAAU;AAChD,aAAO,MAAM,OAAO,SAAS,OAAO,QAAQ;AAAA,IAC9C;AAeA,UAAM,IAAI,IAAI,+BAA+B,SAAS,MAAM,GAAG;AAE7D,UAAG,OAAO,SAAU,UAAU;AAC5B,eAAO,SAAS,MAAM,EAAE;AAAA,MAC1B;AACA,aAAO,QAAQ;AAGf,UAAI,MAAM;AAAA;AAAA,QAER,WAAW,SAAS,GAAG;AACrB,cAAI,IAAI,MAAM,OAAO,SAAS,EAAE,MAAM;AACtC,mBAAQ,IAAI,GAAG,IAAI,EAAE,QAAQ,EAAE,GAAG;AAChC,cAAE,CAAC,IAAI,EAAE,WAAW,CAAC;AAAA,UACvB;AAAA,QACF;AAAA,MACF;AAEA,UAAI,OAAO;AAAA,QACT,OAAO;AAAA,QACP;AAAA,QACA;AAAA,QACA,MAAM,KAAK;AAAA,QACX,GAAG,IAAI,WAAW,IAAI;AAAA,QACtB,GAAG;AAAA,QACH,GAAG;AAAA,QACH,OAAO,QAAQ;AAAA,QACf,OAAO,QAAQ,QAAQ;AAAA,QACvB,SAAS;AAAA,QACT,KAAK;AAAA,QACL,MAAM;AAAA,MACR;AACA,WAAK,EAAE,QAAQ,KAAK,IAAI;AAExB,aAAO;AAAA,IACT;AAMA,QAAI;AAGJ,QAAI,SAAS;AACb,QAAI,QAAS,SAAO,aAAW;AAG/B,aAAS,WAAW,GAAE,GAAE,GAAG;AACzB,WAAK,OAAO,CAAC;AACb,UAAG,KAAK;AACN,YAAG,YAAY,OAAO,EAAG,MAAK,WAAW,GAAE,GAAE,CAAC;AAAA,iBACtC,KAAK,QAAQ,YAAY,OAAO,EAAG,MAAK,WAAW,GAAE,GAAG;AAAA,YAC3D,MAAK,WAAW,GAAE,CAAC;AAAA,IAC5B;AAGA,aAAS,MAAM;AAAE,aAAO,IAAI,WAAW,IAAI;AAAA,IAAG;AAU9C,aAAS,IAAI,GAAE,GAAE,GAAE,GAAE,GAAE,GAAG;AACxB,aAAM,EAAE,KAAK,GAAG;AACd,YAAI,IAAI,IAAE,KAAK,KAAK,GAAG,IAAE,EAAE,KAAK,CAAC,IAAE;AACnC,YAAI,KAAK,MAAM,IAAE,QAAS;AAC1B,UAAE,KAAK,GAAG,IAAI,IAAE;AAAA,MAClB;AACA,aAAO;AAAA,IACT;AAIA,aAAS,IAAI,GAAE,GAAE,GAAE,GAAE,GAAE,GAAG;AACxB,UAAI,KAAK,IAAE,OAAQ,KAAK,KAAG;AAC3B,aAAM,EAAE,KAAK,GAAG;AACd,YAAI,IAAI,KAAK,KAAK,CAAC,IAAE;AACrB,YAAI,IAAI,KAAK,KAAK,GAAG,KAAG;AACxB,YAAI,IAAI,KAAG,IAAE,IAAE;AACf,YAAI,KAAG,MAAI,IAAE,UAAS,MAAI,EAAE,KAAK,CAAC,KAAG,IAAE;AACvC,aAAK,MAAI,OAAK,MAAI,MAAI,KAAG,KAAG,MAAI;AAChC,UAAE,KAAK,GAAG,IAAI,IAAE;AAAA,MAClB;AACA,aAAO;AAAA,IACT;AAGA,aAAS,IAAI,GAAE,GAAE,GAAE,GAAE,GAAE,GAAG;AACxB,UAAI,KAAK,IAAE,OAAQ,KAAK,KAAG;AAC3B,aAAM,EAAE,KAAK,GAAG;AACd,YAAI,IAAI,KAAK,KAAK,CAAC,IAAE;AACrB,YAAI,IAAI,KAAK,KAAK,GAAG,KAAG;AACxB,YAAI,IAAI,KAAG,IAAE,IAAE;AACf,YAAI,KAAG,MAAI,IAAE,UAAS,MAAI,EAAE,KAAK,CAAC,IAAE;AACpC,aAAK,KAAG,OAAK,KAAG,MAAI,KAAG;AACvB,UAAE,KAAK,GAAG,IAAI,IAAE;AAAA,MAClB;AACA,aAAO;AAAA,IACT;AAGA,QAAG,OAAO,cAAe,aACzB;AACG,iBAAW,UAAU,KAAK;AAC1B,cAAQ;AAAA,IACX,WACQ,QAAS,UAAU,WAAW,+BAAgC;AACpE,iBAAW,UAAU,KAAK;AAC1B,cAAQ;AAAA,IACV,WACQ,QAAS,UAAU,WAAW,YAAa;AACjD,iBAAW,UAAU,KAAK;AAC1B,cAAQ;AAAA,IACV,OACK;AACH,iBAAW,UAAU,KAAK;AAC1B,cAAQ;AAAA,IACV;AAEA,eAAW,UAAU,KAAK;AAC1B,eAAW,UAAU,MAAO,KAAG,SAAO;AACtC,eAAW,UAAU,KAAM,KAAG;AAE9B,QAAI,QAAQ;AACZ,eAAW,UAAU,KAAK,KAAK,IAAI,GAAE,KAAK;AAC1C,eAAW,UAAU,KAAK,QAAM;AAChC,eAAW,UAAU,KAAK,IAAE,QAAM;AAGlC,QAAI,QAAQ;AACZ,QAAI,QAAQ,IAAI,MAAM;AACtB,QAAI;AAAJ,QAAO;AACP,SAAK,IAAI,WAAW,CAAC;AACrB,SAAI,KAAK,GAAG,MAAM,GAAG,EAAE,GAAI,OAAM,IAAI,IAAI;AACzC,SAAK,IAAI,WAAW,CAAC;AACrB,SAAI,KAAK,IAAI,KAAK,IAAI,EAAE,GAAI,OAAM,IAAI,IAAI;AAC1C,SAAK,IAAI,WAAW,CAAC;AACrB,SAAI,KAAK,IAAI,KAAK,IAAI,EAAE,GAAI,OAAM,IAAI,IAAI;AAE1C,aAAS,SAAS,GAAG;AAAE,aAAO,MAAM,OAAO,CAAC;AAAA,IAAG;AAC/C,aAAS,MAAM,GAAE,GAAG;AAClB,UAAI,IAAI,MAAM,EAAE,WAAW,CAAC,CAAC;AAC7B,aAAQ,KAAG,OAAM,KAAG;AAAA,IACtB;AAGA,aAAS,UAAU,GAAG;AACpB,eAAQ,IAAI,KAAK,IAAE,GAAG,KAAK,GAAG,EAAE,EAAG,GAAE,KAAK,CAAC,IAAI,KAAK,KAAK,CAAC;AAC1D,QAAE,IAAI,KAAK;AACX,QAAE,IAAI,KAAK;AAAA,IACb;AAGA,aAAS,WAAW,GAAG;AACrB,WAAK,IAAI;AACT,WAAK,IAAK,IAAE,IAAG,KAAG;AAClB,UAAG,IAAI,EAAG,MAAK,KAAK,CAAC,IAAI;AAAA,eACjB,IAAI,GAAI,MAAK,KAAK,CAAC,IAAI,IAAE;AAAA,UAC5B,MAAK,IAAI;AAAA,IAChB;AAGA,aAAS,IAAI,GAAG;AAAE,UAAI,IAAI,IAAI;AAAG,QAAE,QAAQ,CAAC;AAAG,aAAO;AAAA,IAAG;AAGzD,aAAS,cAAc,GAAE,GAAG;AAC1B,UAAI;AACJ,UAAG,KAAK,GAAI,KAAI;AAAA,eACR,KAAK,EAAG,KAAI;AAAA,eACZ,KAAK,IAAK,KAAI;AAAA,eACd,KAAK,EAAG,KAAI;AAAA,eACZ,KAAK,GAAI,KAAI;AAAA,eACb,KAAK,EAAG,KAAI;AAAA,WACf;AAAE,aAAK,UAAU,GAAE,CAAC;AAAG;AAAA,MAAQ;AACpC,WAAK,IAAI;AACT,WAAK,IAAI;AACT,UAAI,IAAI,EAAE,QAAQ,KAAK,OAAO,KAAK;AACnC,aAAM,EAAE,KAAK,GAAG;AACd,YAAI,IAAK,KAAG,IAAG,EAAE,CAAC,IAAE,MAAK,MAAM,GAAE,CAAC;AAClC,YAAG,IAAI,GAAG;AACR,cAAG,EAAE,OAAO,CAAC,KAAK,IAAK,MAAK;AAC5B;AAAA,QACF;AACA,aAAK;AACL,YAAG,MAAM;AACP,eAAK,KAAK,KAAK,GAAG,IAAI;AAAA,iBAChB,KAAG,IAAI,KAAK,IAAI;AACtB,eAAK,KAAK,KAAK,IAAE,CAAC,MAAM,KAAI,KAAI,KAAK,KAAG,MAAK,MAAK;AAClD,eAAK,KAAK,KAAK,GAAG,IAAK,KAAI,KAAK,KAAG;AAAA,QACrC;AAEE,eAAK,KAAK,KAAK,IAAE,CAAC,KAAK,KAAG;AAC5B,cAAM;AACN,YAAG,MAAM,KAAK,GAAI,OAAM,KAAK;AAAA,MAC/B;AACA,UAAG,KAAK,MAAM,EAAE,CAAC,IAAE,QAAS,GAAG;AAC7B,aAAK,IAAI;AACT,YAAG,KAAK,EAAG,MAAK,KAAK,KAAK,IAAE,CAAC,MAAO,KAAI,KAAK,KAAG,MAAK,KAAI;AAAA,MAC3D;AACA,WAAK,MAAM;AACX,UAAG,GAAI,YAAW,KAAK,MAAM,MAAK,IAAI;AAAA,IACxC;AAGA,aAAS,WAAW;AAClB,UAAI,IAAI,KAAK,IAAE,KAAK;AACpB,aAAM,KAAK,IAAI,KAAK,KAAK,KAAK,KAAK,IAAE,CAAC,KAAK,EAAG,GAAE,KAAK;AAAA,IACvD;AAGA,aAAS,WAAW,GAAG;AACrB,UAAG,KAAK,IAAI,EAAG,QAAO,MAAI,KAAK,OAAO,EAAE,SAAS,CAAC;AAClD,UAAI;AACJ,UAAG,KAAK,GAAI,KAAI;AAAA,eACR,KAAK,EAAG,KAAI;AAAA,eACZ,KAAK,EAAG,KAAI;AAAA,eACZ,KAAK,GAAI,KAAI;AAAA,eACb,KAAK,EAAG,KAAI;AAAA,UACf,QAAO,KAAK,QAAQ,CAAC;AAC1B,UAAI,MAAM,KAAG,KAAG,GAAG,GAAG,IAAI,OAAO,IAAI,IAAI,IAAI,KAAK;AAClD,UAAI,IAAI,KAAK,KAAI,IAAE,KAAK,KAAI;AAC5B,UAAG,MAAM,GAAG;AACV,YAAG,IAAI,KAAK,OAAO,IAAI,KAAK,KAAK,CAAC,KAAG,KAAK,GAAG;AAAE,cAAI;AAAM,cAAI,SAAS,CAAC;AAAA,QAAG;AAC1E,eAAM,KAAK,GAAG;AACZ,cAAG,IAAI,GAAG;AACR,iBAAK,KAAK,KAAK,CAAC,KAAI,KAAG,KAAG,MAAM,IAAE;AAClC,iBAAK,KAAK,KAAK,EAAE,CAAC,MAAI,KAAG,KAAK,KAAG;AAAA,UACnC,OACK;AACH,gBAAK,KAAK,KAAK,CAAC,MAAI,KAAG,KAAI;AAC3B,gBAAG,KAAK,GAAG;AAAE,mBAAK,KAAK;AAAI,gBAAE;AAAA,YAAG;AAAA,UAClC;AACA,cAAG,IAAI,EAAG,KAAI;AACd,cAAG,EAAG,MAAK,SAAS,CAAC;AAAA,QACvB;AAAA,MACF;AACA,aAAO,IAAE,IAAE;AAAA,IACb;AAGA,aAAS,WAAW;AAAE,UAAI,IAAI,IAAI;AAAG,iBAAW,KAAK,MAAM,MAAK,CAAC;AAAG,aAAO;AAAA,IAAG;AAG9E,aAAS,QAAQ;AAAE,aAAQ,KAAK,IAAE,IAAG,KAAK,OAAO,IAAE;AAAA,IAAM;AAGzD,aAAS,YAAY,GAAG;AACtB,UAAI,IAAI,KAAK,IAAE,EAAE;AACjB,UAAG,KAAK,EAAG,QAAO;AAClB,UAAI,IAAI,KAAK;AACb,UAAI,IAAE,EAAE;AACR,UAAG,KAAK,EAAG,QAAQ,KAAK,IAAE,IAAG,CAAC,IAAE;AAChC,aAAM,EAAE,KAAK,EAAG,MAAI,IAAE,KAAK,KAAK,CAAC,IAAE,EAAE,KAAK,CAAC,MAAM,EAAG,QAAO;AAC3D,aAAO;AAAA,IACT;AAGA,aAAS,MAAM,GAAG;AAChB,UAAI,IAAI,GAAG;AACX,WAAI,IAAE,MAAI,OAAO,GAAG;AAAE,YAAI;AAAG,aAAK;AAAA,MAAI;AACtC,WAAI,IAAE,KAAG,MAAM,GAAG;AAAE,YAAI;AAAG,aAAK;AAAA,MAAG;AACnC,WAAI,IAAE,KAAG,MAAM,GAAG;AAAE,YAAI;AAAG,aAAK;AAAA,MAAG;AACnC,WAAI,IAAE,KAAG,MAAM,GAAG;AAAE,YAAI;AAAG,aAAK;AAAA,MAAG;AACnC,WAAI,IAAE,KAAG,MAAM,GAAG;AAAE,YAAI;AAAG,aAAK;AAAA,MAAG;AACnC,aAAO;AAAA,IACT;AAGA,aAAS,cAAc;AACrB,UAAG,KAAK,KAAK,EAAG,QAAO;AACvB,aAAO,KAAK,MAAI,KAAK,IAAE,KAAG,MAAM,KAAK,KAAK,KAAK,IAAE,CAAC,IAAG,KAAK,IAAE,KAAK,EAAG;AAAA,IACtE;AAGA,aAAS,aAAa,GAAE,GAAG;AACzB,UAAI;AACJ,WAAI,IAAI,KAAK,IAAE,GAAG,KAAK,GAAG,EAAE,EAAG,GAAE,KAAK,IAAE,CAAC,IAAI,KAAK,KAAK,CAAC;AACxD,WAAI,IAAI,IAAE,GAAG,KAAK,GAAG,EAAE,EAAG,GAAE,KAAK,CAAC,IAAI;AACtC,QAAE,IAAI,KAAK,IAAE;AACb,QAAE,IAAI,KAAK;AAAA,IACb;AAGA,aAAS,aAAa,GAAE,GAAG;AACzB,eAAQ,IAAI,GAAG,IAAI,KAAK,GAAG,EAAE,EAAG,GAAE,KAAK,IAAE,CAAC,IAAI,KAAK,KAAK,CAAC;AACzD,QAAE,IAAI,KAAK,IAAI,KAAK,IAAE,GAAE,CAAC;AACzB,QAAE,IAAI,KAAK;AAAA,IACb;AAGA,aAAS,YAAY,GAAE,GAAG;AACxB,UAAI,KAAK,IAAE,KAAK;AAChB,UAAI,MAAM,KAAK,KAAG;AAClB,UAAI,MAAM,KAAG,OAAK;AAClB,UAAI,KAAK,KAAK,MAAM,IAAE,KAAK,EAAE,GAAG,IAAK,KAAK,KAAG,KAAI,KAAK,IAAI;AAC1D,WAAI,IAAI,KAAK,IAAE,GAAG,KAAK,GAAG,EAAE,GAAG;AAC7B,UAAE,KAAK,IAAE,KAAG,CAAC,IAAK,KAAK,KAAK,CAAC,KAAG,MAAK;AACrC,aAAK,KAAK,KAAK,CAAC,IAAE,OAAK;AAAA,MACzB;AACA,WAAI,IAAI,KAAG,GAAG,KAAK,GAAG,EAAE,EAAG,GAAE,KAAK,CAAC,IAAI;AACvC,QAAE,KAAK,EAAE,IAAI;AACb,QAAE,IAAI,KAAK,IAAE,KAAG;AAChB,QAAE,IAAI,KAAK;AACX,QAAE,MAAM;AAAA,IACV;AAGA,aAAS,YAAY,GAAE,GAAG;AACxB,QAAE,IAAI,KAAK;AACX,UAAI,KAAK,KAAK,MAAM,IAAE,KAAK,EAAE;AAC7B,UAAG,MAAM,KAAK,GAAG;AAAE,UAAE,IAAI;AAAG;AAAA,MAAQ;AACpC,UAAI,KAAK,IAAE,KAAK;AAChB,UAAI,MAAM,KAAK,KAAG;AAClB,UAAI,MAAM,KAAG,MAAI;AACjB,QAAE,KAAK,CAAC,IAAI,KAAK,KAAK,EAAE,KAAG;AAC3B,eAAQ,IAAI,KAAG,GAAG,IAAI,KAAK,GAAG,EAAE,GAAG;AACjC,UAAE,KAAK,IAAE,KAAG,CAAC,MAAM,KAAK,KAAK,CAAC,IAAE,OAAK;AACrC,UAAE,KAAK,IAAE,EAAE,IAAI,KAAK,KAAK,CAAC,KAAG;AAAA,MAC/B;AACA,UAAG,KAAK,EAAG,GAAE,KAAK,KAAK,IAAE,KAAG,CAAC,MAAM,KAAK,IAAE,OAAK;AAC/C,QAAE,IAAI,KAAK,IAAE;AACb,QAAE,MAAM;AAAA,IACV;AAGA,aAAS,SAAS,GAAE,GAAG;AACrB,UAAI,IAAI,GAAG,IAAI,GAAG,IAAI,KAAK,IAAI,EAAE,GAAE,KAAK,CAAC;AACzC,aAAM,IAAI,GAAG;AACX,aAAK,KAAK,KAAK,CAAC,IAAE,EAAE,KAAK,CAAC;AAC1B,UAAE,KAAK,GAAG,IAAI,IAAE,KAAK;AACrB,cAAM,KAAK;AAAA,MACb;AACA,UAAG,EAAE,IAAI,KAAK,GAAG;AACf,aAAK,EAAE;AACP,eAAM,IAAI,KAAK,GAAG;AAChB,eAAK,KAAK,KAAK,CAAC;AAChB,YAAE,KAAK,GAAG,IAAI,IAAE,KAAK;AACrB,gBAAM,KAAK;AAAA,QACb;AACA,aAAK,KAAK;AAAA,MACZ,OACK;AACH,aAAK,KAAK;AACV,eAAM,IAAI,EAAE,GAAG;AACb,eAAK,EAAE,KAAK,CAAC;AACb,YAAE,KAAK,GAAG,IAAI,IAAE,KAAK;AACrB,gBAAM,KAAK;AAAA,QACb;AACA,aAAK,EAAE;AAAA,MACT;AACA,QAAE,IAAK,IAAE,IAAG,KAAG;AACf,UAAG,IAAI,GAAI,GAAE,KAAK,GAAG,IAAI,KAAK,KAAG;AAAA,eACzB,IAAI,EAAG,GAAE,KAAK,GAAG,IAAI;AAC7B,QAAE,IAAI;AACN,QAAE,MAAM;AAAA,IACV;AAIA,aAAS,cAAc,GAAE,GAAG;AAC1B,UAAI,IAAI,KAAK,IAAI,GAAG,IAAI,EAAE,IAAI;AAC9B,UAAI,IAAI,EAAE;AACV,QAAE,IAAI,IAAE,EAAE;AACV,aAAM,EAAE,KAAK,EAAG,GAAE,KAAK,CAAC,IAAI;AAC5B,WAAI,IAAI,GAAG,IAAI,EAAE,GAAG,EAAE,EAAG,GAAE,KAAK,IAAE,EAAE,CAAC,IAAI,EAAE,GAAG,GAAE,EAAE,KAAK,CAAC,GAAE,GAAE,GAAE,GAAE,EAAE,CAAC;AACnE,QAAE,IAAI;AACN,QAAE,MAAM;AACR,UAAG,KAAK,KAAK,EAAE,EAAG,YAAW,KAAK,MAAM,GAAE,CAAC;AAAA,IAC7C;AAGA,aAAS,YAAY,GAAG;AACtB,UAAI,IAAI,KAAK,IAAI;AACjB,UAAI,IAAI,EAAE,IAAI,IAAE,EAAE;AAClB,aAAM,EAAE,KAAK,EAAG,GAAE,KAAK,CAAC,IAAI;AAC5B,WAAI,IAAI,GAAG,IAAI,EAAE,IAAE,GAAG,EAAE,GAAG;AACzB,YAAI,IAAI,EAAE,GAAG,GAAE,EAAE,KAAK,CAAC,GAAE,GAAE,IAAE,GAAE,GAAE,CAAC;AAClC,aAAI,EAAE,KAAK,IAAE,EAAE,CAAC,KAAG,EAAE,GAAG,IAAE,GAAE,IAAE,EAAE,KAAK,CAAC,GAAE,GAAE,IAAE,IAAE,GAAE,GAAE,EAAE,IAAE,IAAE,CAAC,MAAM,EAAE,IAAI;AACnE,YAAE,KAAK,IAAE,EAAE,CAAC,KAAK,EAAE;AACnB,YAAE,KAAK,IAAE,EAAE,IAAE,CAAC,IAAI;AAAA,QACpB;AAAA,MACF;AACA,UAAG,EAAE,IAAI,EAAG,GAAE,KAAK,EAAE,IAAE,CAAC,KAAK,EAAE,GAAG,GAAE,EAAE,KAAK,CAAC,GAAE,GAAE,IAAE,GAAE,GAAE,CAAC;AACvD,QAAE,IAAI;AACN,QAAE,MAAM;AAAA,IACV;AAIA,aAAS,YAAY,GAAE,GAAE,GAAG;AAC1B,UAAI,KAAK,EAAE,IAAI;AACf,UAAG,GAAG,KAAK,EAAG;AACd,UAAI,KAAK,KAAK,IAAI;AAClB,UAAG,GAAG,IAAI,GAAG,GAAG;AACd,YAAG,KAAK,KAAM,GAAE,QAAQ,CAAC;AACzB,YAAG,KAAK,KAAM,MAAK,OAAO,CAAC;AAC3B;AAAA,MACF;AACA,UAAG,KAAK,KAAM,KAAI,IAAI;AACtB,UAAI,IAAI,IAAI,GAAG,KAAK,KAAK,GAAG,KAAK,EAAE;AACnC,UAAI,MAAM,KAAK,KAAG,MAAM,GAAG,KAAK,GAAG,IAAE,CAAC,CAAC;AACvC,UAAG,MAAM,GAAG;AAAE,WAAG,SAAS,KAAI,CAAC;AAAG,WAAG,SAAS,KAAI,CAAC;AAAA,MAAG,OACjD;AAAE,WAAG,OAAO,CAAC;AAAG,WAAG,OAAO,CAAC;AAAA,MAAG;AACnC,UAAI,KAAK,EAAE;AACX,UAAI,KAAK,EAAE,KAAK,KAAG,CAAC;AACpB,UAAG,MAAM,EAAG;AACZ,UAAI,KAAK,MAAI,KAAG,KAAK,OAAM,KAAG,IAAG,EAAE,KAAK,KAAG,CAAC,KAAG,KAAK,KAAG;AACvD,UAAI,KAAK,KAAK,KAAG,IAAI,MAAM,KAAG,KAAK,MAAI,IAAI,IAAI,KAAG,KAAK;AACvD,UAAI,IAAI,EAAE,GAAG,IAAI,IAAE,IAAI,IAAK,KAAG,OAAM,IAAI,IAAE;AAC3C,QAAE,UAAU,GAAE,CAAC;AACf,UAAG,EAAE,UAAU,CAAC,KAAK,GAAG;AACtB,UAAE,KAAK,EAAE,GAAG,IAAI;AAChB,UAAE,MAAM,GAAE,CAAC;AAAA,MACb;AACA,iBAAW,IAAI,UAAU,IAAG,CAAC;AAC7B,QAAE,MAAM,GAAE,CAAC;AACX,aAAM,EAAE,IAAI,GAAI,GAAE,KAAK,EAAE,GAAG,IAAI;AAChC,aAAM,EAAE,KAAK,GAAG;AAEd,YAAI,KAAM,EAAE,KAAK,EAAE,CAAC,KAAG,KAAI,KAAK,KAAG,KAAK,MAAM,EAAE,KAAK,CAAC,IAAE,MAAI,EAAE,KAAK,IAAE,CAAC,IAAE,KAAG,EAAE;AAC7E,aAAI,EAAE,KAAK,CAAC,KAAG,EAAE,GAAG,GAAE,IAAG,GAAE,GAAE,GAAE,EAAE,KAAK,IAAI;AACxC,YAAE,UAAU,GAAE,CAAC;AACf,YAAE,MAAM,GAAE,CAAC;AACX,iBAAM,EAAE,KAAK,CAAC,IAAI,EAAE,GAAI,GAAE,MAAM,GAAE,CAAC;AAAA,QACrC;AAAA,MACF;AACA,UAAG,KAAK,MAAM;AACZ,UAAE,UAAU,IAAG,CAAC;AAChB,YAAG,MAAM,GAAI,YAAW,KAAK,MAAM,GAAE,CAAC;AAAA,MACxC;AACA,QAAE,IAAI;AACN,QAAE,MAAM;AACR,UAAG,MAAM,EAAG,GAAE,SAAS,KAAI,CAAC;AAC5B,UAAG,KAAK,EAAG,YAAW,KAAK,MAAM,GAAE,CAAC;AAAA,IACtC;AAGA,aAAS,MAAM,GAAG;AAChB,UAAI,IAAI,IAAI;AACZ,WAAK,IAAI,EAAE,SAAS,GAAE,MAAK,CAAC;AAC5B,UAAG,KAAK,IAAI,KAAK,EAAE,UAAU,WAAW,IAAI,IAAI,EAAG,GAAE,MAAM,GAAE,CAAC;AAC9D,aAAO;AAAA,IACT;AAGA,aAAS,QAAQ,GAAG;AAAE,WAAK,IAAI;AAAA,IAAG;AAClC,aAAS,SAAS,GAAG;AACnB,UAAG,EAAE,IAAI,KAAK,EAAE,UAAU,KAAK,CAAC,KAAK,EAAG,QAAO,EAAE,IAAI,KAAK,CAAC;AAAA,UACtD,QAAO;AAAA,IACd;AACA,aAAS,QAAQ,GAAG;AAAE,aAAO;AAAA,IAAG;AAChC,aAAS,QAAQ,GAAG;AAAE,QAAE,SAAS,KAAK,GAAE,MAAK,CAAC;AAAA,IAAG;AACjD,aAAS,OAAO,GAAE,GAAE,GAAG;AAAE,QAAE,WAAW,GAAE,CAAC;AAAG,WAAK,OAAO,CAAC;AAAA,IAAG;AAC5D,aAAS,OAAO,GAAE,GAAG;AAAE,QAAE,SAAS,CAAC;AAAG,WAAK,OAAO,CAAC;AAAA,IAAG;AAEtD,YAAQ,UAAU,UAAU;AAC5B,YAAQ,UAAU,SAAS;AAC3B,YAAQ,UAAU,SAAS;AAC3B,YAAQ,UAAU,QAAQ;AAC1B,YAAQ,UAAU,QAAQ;AAY1B,aAAS,cAAc;AACrB,UAAG,KAAK,IAAI,EAAG,QAAO;AACtB,UAAI,IAAI,KAAK,KAAK,CAAC;AACnB,WAAI,IAAE,MAAM,EAAG,QAAO;AACtB,UAAI,IAAI,IAAE;AACV,UAAK,KAAG,KAAG,IAAE,MAAK,KAAI;AACtB,UAAK,KAAG,KAAG,IAAE,OAAM,KAAI;AACvB,UAAK,KAAG,MAAK,IAAE,SAAQ,IAAG,UAAU;AAGpC,UAAK,KAAG,IAAE,IAAE,IAAE,KAAK,MAAK,KAAK;AAE7B,aAAQ,IAAE,IAAG,KAAK,KAAG,IAAE,CAAC;AAAA,IAC1B;AAGA,aAAS,WAAW,GAAG;AACrB,WAAK,IAAI;AACT,WAAK,KAAK,EAAE,SAAS;AACrB,WAAK,MAAM,KAAK,KAAG;AACnB,WAAK,MAAM,KAAK,MAAI;AACpB,WAAK,MAAM,KAAI,EAAE,KAAG,MAAK;AACzB,WAAK,MAAM,IAAE,EAAE;AAAA,IACjB;AAGA,aAAS,YAAY,GAAG;AACtB,UAAI,IAAI,IAAI;AACZ,QAAE,IAAI,EAAE,UAAU,KAAK,EAAE,GAAE,CAAC;AAC5B,QAAE,SAAS,KAAK,GAAE,MAAK,CAAC;AACxB,UAAG,EAAE,IAAI,KAAK,EAAE,UAAU,WAAW,IAAI,IAAI,EAAG,MAAK,EAAE,MAAM,GAAE,CAAC;AAChE,aAAO;AAAA,IACT;AAGA,aAAS,WAAW,GAAG;AACrB,UAAI,IAAI,IAAI;AACZ,QAAE,OAAO,CAAC;AACV,WAAK,OAAO,CAAC;AACb,aAAO;AAAA,IACT;AAGA,aAAS,WAAW,GAAG;AACrB,aAAM,EAAE,KAAK,KAAK;AAChB,UAAE,KAAK,EAAE,GAAG,IAAI;AAClB,eAAQ,IAAI,GAAG,IAAI,KAAK,EAAE,GAAG,EAAE,GAAG;AAEhC,YAAI,IAAI,EAAE,KAAK,CAAC,IAAE;AAClB,YAAI,KAAM,IAAE,KAAK,QAAO,IAAE,KAAK,OAAK,EAAE,KAAK,CAAC,KAAG,MAAI,KAAK,MAAK,KAAK,OAAK,MAAK,EAAE;AAE9E,YAAI,IAAE,KAAK,EAAE;AACb,UAAE,KAAK,CAAC,KAAK,KAAK,EAAE,GAAG,GAAE,IAAG,GAAE,GAAE,GAAE,KAAK,EAAE,CAAC;AAE1C,eAAM,EAAE,KAAK,CAAC,KAAK,EAAE,IAAI;AAAE,YAAE,KAAK,CAAC,KAAK,EAAE;AAAI,YAAE,KAAK,EAAE,CAAC;AAAA,QAAK;AAAA,MAC/D;AACA,QAAE,MAAM;AACR,QAAE,UAAU,KAAK,EAAE,GAAE,CAAC;AACtB,UAAG,EAAE,UAAU,KAAK,CAAC,KAAK,EAAG,GAAE,MAAM,KAAK,GAAE,CAAC;AAAA,IAC/C;AAGA,aAAS,UAAU,GAAE,GAAG;AAAE,QAAE,SAAS,CAAC;AAAG,WAAK,OAAO,CAAC;AAAA,IAAG;AAGzD,aAAS,UAAU,GAAE,GAAE,GAAG;AAAE,QAAE,WAAW,GAAE,CAAC;AAAG,WAAK,OAAO,CAAC;AAAA,IAAG;AAE/D,eAAW,UAAU,UAAU;AAC/B,eAAW,UAAU,SAAS;AAC9B,eAAW,UAAU,SAAS;AAC9B,eAAW,UAAU,QAAQ;AAC7B,eAAW,UAAU,QAAQ;AAG7B,aAAS,YAAY;AAAE,cAAS,KAAK,IAAE,IAAI,KAAK,KAAK,CAAC,IAAE,IAAG,KAAK,MAAM;AAAA,IAAG;AAGzE,aAAS,OAAO,GAAE,GAAG;AACnB,UAAG,IAAI,cAAc,IAAI,EAAG,QAAO,WAAW;AAC9C,UAAI,IAAI,IAAI,GAAG,KAAK,IAAI,GAAG,IAAI,EAAE,QAAQ,IAAI,GAAG,IAAI,MAAM,CAAC,IAAE;AAC7D,QAAE,OAAO,CAAC;AACV,aAAM,EAAE,KAAK,GAAG;AACd,UAAE,MAAM,GAAE,EAAE;AACZ,aAAI,IAAG,KAAG,KAAM,EAAG,GAAE,MAAM,IAAG,GAAE,CAAC;AAAA,aAC5B;AAAE,cAAI,IAAI;AAAG,cAAI;AAAI,eAAK;AAAA,QAAG;AAAA,MACpC;AACA,aAAO,EAAE,OAAO,CAAC;AAAA,IACnB;AAGA,aAAS,YAAY,GAAE,GAAG;AACxB,UAAI;AACJ,UAAG,IAAI,OAAO,EAAE,OAAO,EAAG,KAAI,IAAI,QAAQ,CAAC;AAAA,UAAQ,KAAI,IAAI,WAAW,CAAC;AACvE,aAAO,KAAK,IAAI,GAAE,CAAC;AAAA,IACrB;AAGA,eAAW,UAAU,SAAS;AAC9B,eAAW,UAAU,UAAU;AAC/B,eAAW,UAAU,aAAa;AAClC,eAAW,UAAU,QAAQ;AAC7B,eAAW,UAAU,YAAY;AACjC,eAAW,UAAU,YAAY;AACjC,eAAW,UAAU,WAAW;AAChC,eAAW,UAAU,WAAW;AAChC,eAAW,UAAU,QAAQ;AAC7B,eAAW,UAAU,aAAa;AAClC,eAAW,UAAU,WAAW;AAChC,eAAW,UAAU,WAAW;AAChC,eAAW,UAAU,WAAW;AAChC,eAAW,UAAU,SAAS;AAC9B,eAAW,UAAU,MAAM;AAG3B,eAAW,UAAU,WAAW;AAChC,eAAW,UAAU,SAAS;AAC9B,eAAW,UAAU,MAAM;AAC3B,eAAW,UAAU,YAAY;AACjC,eAAW,UAAU,YAAY;AACjC,eAAW,UAAU,MAAM;AAC3B,eAAW,UAAU,YAAY;AAGjC,eAAW,OAAO,IAAI,CAAC;AACvB,eAAW,MAAM,IAAI,CAAC;AAatB,aAAS,UAAU;AAAE,UAAI,IAAI,IAAI;AAAG,WAAK,OAAO,CAAC;AAAG,aAAO;AAAA,IAAG;AAG9D,aAAS,aAAa;AACtB,UAAG,KAAK,IAAI,GAAG;AACd,YAAG,KAAK,KAAK,EAAG,QAAO,KAAK,KAAK,CAAC,IAAE,KAAK;AAAA,iBACjC,KAAK,KAAK,EAAG,QAAO;AAAA,MAC7B,WACQ,KAAK,KAAK,EAAG,QAAO,KAAK,KAAK,CAAC;AAAA,eAC/B,KAAK,KAAK,EAAG,QAAO;AAE5B,cAAS,KAAK,KAAK,CAAC,KAAI,KAAI,KAAG,KAAK,MAAK,MAAK,KAAK,KAAI,KAAK,KAAK,CAAC;AAAA,IAClE;AAGA,aAAS,cAAc;AAAE,aAAQ,KAAK,KAAG,IAAG,KAAK,IAAG,KAAK,KAAK,CAAC,KAAG,MAAK;AAAA,IAAI;AAG3E,aAAS,eAAe;AAAE,aAAQ,KAAK,KAAG,IAAG,KAAK,IAAG,KAAK,KAAK,CAAC,KAAG,MAAK;AAAA,IAAI;AAG5E,aAAS,aAAa,GAAG;AAAE,aAAO,KAAK,MAAM,KAAK,MAAI,KAAK,KAAG,KAAK,IAAI,CAAC,CAAC;AAAA,IAAG;AAG5E,aAAS,WAAW;AACpB,UAAG,KAAK,IAAI,EAAG,QAAO;AAAA,eACd,KAAK,KAAK,KAAM,KAAK,KAAK,KAAK,KAAK,KAAK,CAAC,KAAK,EAAI,QAAO;AAAA,UAC7D,QAAO;AAAA,IACZ;AAGA,aAAS,WAAW,GAAG;AACvB,UAAG,KAAK,KAAM,KAAI;AAClB,UAAG,KAAK,OAAO,KAAK,KAAK,IAAI,KAAK,IAAI,GAAI,QAAO;AACjD,UAAI,KAAK,KAAK,UAAU,CAAC;AACzB,UAAI,IAAI,KAAK,IAAI,GAAE,EAAE;AACrB,UAAI,IAAI,IAAI,CAAC,GAAG,IAAI,IAAI,GAAG,IAAI,IAAI,GAAG,IAAI;AAC1C,WAAK,SAAS,GAAE,GAAE,CAAC;AACnB,aAAM,EAAE,OAAO,IAAI,GAAG;AACrB,aAAK,IAAE,EAAE,SAAS,GAAG,SAAS,CAAC,EAAE,OAAO,CAAC,IAAI;AAC7C,UAAE,SAAS,GAAE,GAAE,CAAC;AAAA,MACjB;AACA,aAAO,EAAE,SAAS,EAAE,SAAS,CAAC,IAAI;AAAA,IAClC;AAGA,aAAS,aAAa,GAAE,GAAG;AAC3B,WAAK,QAAQ,CAAC;AACd,UAAG,KAAK,KAAM,KAAI;AAClB,UAAI,KAAK,KAAK,UAAU,CAAC;AACzB,UAAI,IAAI,KAAK,IAAI,GAAE,EAAE,GAAG,KAAK,OAAO,IAAI,GAAG,IAAI;AAC/C,eAAQ,IAAI,GAAG,IAAI,EAAE,QAAQ,EAAE,GAAG;AACjC,YAAI,IAAI,MAAM,GAAE,CAAC;AACjB,YAAG,IAAI,GAAG;AACR,cAAG,EAAE,OAAO,CAAC,KAAK,OAAO,KAAK,OAAO,KAAK,EAAG,MAAK;AAClD;AAAA,QACF;AACA,YAAI,IAAE,IAAE;AACR,YAAG,EAAE,KAAK,IAAI;AACZ,eAAK,UAAU,CAAC;AAChB,eAAK,WAAW,GAAE,CAAC;AACnB,cAAI;AACJ,cAAI;AAAA,QACN;AAAA,MACD;AACA,UAAG,IAAI,GAAG;AACT,aAAK,UAAU,KAAK,IAAI,GAAE,CAAC,CAAC;AAC5B,aAAK,WAAW,GAAE,CAAC;AAAA,MACpB;AACA,UAAG,GAAI,YAAW,KAAK,MAAM,MAAK,IAAI;AAAA,IACtC;AAGA,aAAS,cAAc,GAAE,GAAE,GAAG;AAC9B,UAAG,YAAY,OAAO,GAAG;AAExB,YAAG,IAAI,EAAG,MAAK,QAAQ,CAAC;AAAA,aACnB;AACH,eAAK,WAAW,GAAE,CAAC;AACnB,cAAG,CAAC,KAAK,QAAQ,IAAE,CAAC;AAClB,iBAAK,UAAU,WAAW,IAAI,UAAU,IAAE,CAAC,GAAE,OAAM,IAAI;AACzD,cAAG,KAAK,OAAO,EAAG,MAAK,WAAW,GAAE,CAAC;AACrC,iBAAM,CAAC,KAAK,gBAAgB,CAAC,GAAG;AAC9B,iBAAK,WAAW,GAAE,CAAC;AACnB,gBAAG,KAAK,UAAU,IAAI,EAAG,MAAK,MAAM,WAAW,IAAI,UAAU,IAAE,CAAC,GAAE,IAAI;AAAA,UACxE;AAAA,QACF;AAAA,MACD,OACK;AAEJ,YAAI,IAAI,IAAI,MAAM,GAAG,IAAI,IAAE;AAC3B,UAAE,UAAU,KAAG,KAAG;AAClB,UAAE,UAAU,CAAC;AACb,YAAG,IAAI,EAAG,GAAE,CAAC,MAAO,KAAG,KAAG;AAAA,YAAS,GAAE,CAAC,IAAI;AAC1C,aAAK,WAAW,GAAE,GAAG;AAAA,MACtB;AAAA,IACA;AAGA,aAAS,gBAAgB;AACzB,UAAI,IAAI,KAAK,GAAG,IAAI,IAAI,MAAM;AAC9B,QAAE,CAAC,IAAI,KAAK;AACZ,UAAI,IAAI,KAAK,KAAI,IAAE,KAAK,KAAI,GAAG,GAAG,IAAI;AACtC,UAAG,MAAM,GAAG;AACX,YAAG,IAAI,KAAK,OAAO,IAAI,KAAK,KAAK,CAAC,KAAG,OAAO,KAAK,IAAE,KAAK,OAAK;AAC3D,YAAE,GAAG,IAAI,IAAG,KAAK,KAAI,KAAK,KAAG;AAC/B,eAAM,KAAK,GAAG;AACZ,cAAG,IAAI,GAAG;AACR,iBAAK,KAAK,KAAK,CAAC,KAAI,KAAG,KAAG,MAAM,IAAE;AAClC,iBAAK,KAAK,KAAK,EAAE,CAAC,MAAI,KAAG,KAAK,KAAG;AAAA,UACnC,OACK;AACH,gBAAK,KAAK,KAAK,CAAC,MAAI,KAAG,KAAI;AAC3B,gBAAG,KAAK,GAAG;AAAE,mBAAK,KAAK;AAAI,gBAAE;AAAA,YAAG;AAAA,UAClC;AACA,eAAI,IAAE,QAAS,EAAG,MAAK;AACvB,cAAG,KAAK,MAAM,KAAK,IAAE,SAAU,IAAE,KAAO,GAAE;AAC1C,cAAG,IAAI,KAAK,KAAK,KAAK,EAAG,GAAE,GAAG,IAAI;AAAA,QACpC;AAAA,MACD;AACA,aAAO;AAAA,IACP;AAEA,aAAS,SAAS,GAAG;AAAE,aAAO,KAAK,UAAU,CAAC,KAAG;AAAA,IAAI;AACrD,aAAS,MAAM,GAAG;AAAE,aAAO,KAAK,UAAU,CAAC,IAAE,IAAG,OAAK;AAAA,IAAG;AACxD,aAAS,MAAM,GAAG;AAAE,aAAO,KAAK,UAAU,CAAC,IAAE,IAAG,OAAK;AAAA,IAAG;AAGxD,aAAS,aAAa,GAAE,IAAG,GAAG;AAC9B,UAAI,GAAG,GAAG,IAAI,KAAK,IAAI,EAAE,GAAE,KAAK,CAAC;AACjC,WAAI,IAAI,GAAG,IAAI,GAAG,EAAE,EAAG,GAAE,KAAK,CAAC,IAAI,GAAG,KAAK,KAAK,CAAC,GAAE,EAAE,KAAK,CAAC,CAAC;AAC5D,UAAG,EAAE,IAAI,KAAK,GAAG;AAChB,YAAI,EAAE,IAAE,KAAK;AACb,aAAI,IAAI,GAAG,IAAI,KAAK,GAAG,EAAE,EAAG,GAAE,KAAK,CAAC,IAAI,GAAG,KAAK,KAAK,CAAC,GAAE,CAAC;AACzD,UAAE,IAAI,KAAK;AAAA,MACZ,OACK;AACJ,YAAI,KAAK,IAAE,KAAK;AAChB,aAAI,IAAI,GAAG,IAAI,EAAE,GAAG,EAAE,EAAG,GAAE,KAAK,CAAC,IAAI,GAAG,GAAE,EAAE,KAAK,CAAC,CAAC;AACnD,UAAE,IAAI,EAAE;AAAA,MACT;AACA,QAAE,IAAI,GAAG,KAAK,GAAE,EAAE,CAAC;AACnB,QAAE,MAAM;AAAA,IACR;AAGA,aAAS,OAAO,GAAE,GAAG;AAAE,aAAO,IAAE;AAAA,IAAG;AACnC,aAAS,MAAM,GAAG;AAAE,UAAI,IAAI,IAAI;AAAG,WAAK,UAAU,GAAE,QAAO,CAAC;AAAG,aAAO;AAAA,IAAG;AAGzE,aAAS,MAAM,GAAE,GAAG;AAAE,aAAO,IAAE;AAAA,IAAG;AAClC,aAAS,KAAK,GAAG;AAAE,UAAI,IAAI,IAAI;AAAG,WAAK,UAAU,GAAE,OAAM,CAAC;AAAG,aAAO;AAAA,IAAG;AAGvE,aAAS,OAAO,GAAE,GAAG;AAAE,aAAO,IAAE;AAAA,IAAG;AACnC,aAAS,MAAM,GAAG;AAAE,UAAI,IAAI,IAAI;AAAG,WAAK,UAAU,GAAE,QAAO,CAAC;AAAG,aAAO;AAAA,IAAG;AAGzE,aAAS,UAAU,GAAE,GAAG;AAAE,aAAO,IAAE,CAAC;AAAA,IAAG;AACvC,aAAS,SAAS,GAAG;AAAE,UAAI,IAAI,IAAI;AAAG,WAAK,UAAU,GAAE,WAAU,CAAC;AAAG,aAAO;AAAA,IAAG;AAG/E,aAAS,QAAQ;AACjB,UAAI,IAAI,IAAI;AACZ,eAAQ,IAAI,GAAG,IAAI,KAAK,GAAG,EAAE,EAAG,GAAE,KAAK,CAAC,IAAI,KAAK,KAAG,CAAC,KAAK,KAAK,CAAC;AAChE,QAAE,IAAI,KAAK;AACX,QAAE,IAAI,CAAC,KAAK;AACZ,aAAO;AAAA,IACP;AAGA,aAAS,YAAY,GAAG;AACxB,UAAI,IAAI,IAAI;AACZ,UAAG,IAAI,EAAG,MAAK,SAAS,CAAC,GAAE,CAAC;AAAA,UAAQ,MAAK,SAAS,GAAE,CAAC;AACrD,aAAO;AAAA,IACP;AAGA,aAAS,aAAa,GAAG;AACzB,UAAI,IAAI,IAAI;AACZ,UAAG,IAAI,EAAG,MAAK,SAAS,CAAC,GAAE,CAAC;AAAA,UAAQ,MAAK,SAAS,GAAE,CAAC;AACrD,aAAO;AAAA,IACP;AAGA,aAAS,KAAK,GAAG;AACjB,UAAG,KAAK,EAAG,QAAO;AAClB,UAAI,IAAI;AACR,WAAI,IAAE,UAAW,GAAG;AAAE,cAAM;AAAI,aAAK;AAAA,MAAI;AACzC,WAAI,IAAE,QAAS,GAAG;AAAE,cAAM;AAAG,aAAK;AAAA,MAAG;AACrC,WAAI,IAAE,OAAQ,GAAG;AAAE,cAAM;AAAG,aAAK;AAAA,MAAG;AACpC,WAAI,IAAE,MAAM,GAAG;AAAE,cAAM;AAAG,aAAK;AAAA,MAAG;AAClC,WAAI,IAAE,MAAM,EAAG,GAAE;AACjB,aAAO;AAAA,IACP;AAGA,aAAS,oBAAoB;AAC7B,eAAQ,IAAI,GAAG,IAAI,KAAK,GAAG,EAAE;AAC5B,YAAG,KAAK,KAAK,CAAC,KAAK,EAAG,QAAO,IAAE,KAAK,KAAG,KAAK,KAAK,KAAK,CAAC,CAAC;AACzD,UAAG,KAAK,IAAI,EAAG,QAAO,KAAK,IAAE,KAAK;AAClC,aAAO;AAAA,IACP;AAGA,aAAS,KAAK,GAAG;AACjB,UAAI,IAAI;AACR,aAAM,KAAK,GAAG;AAAE,aAAK,IAAE;AAAG,UAAE;AAAA,MAAG;AAC/B,aAAO;AAAA,IACP;AAGA,aAAS,aAAa;AACtB,UAAI,IAAI,GAAG,IAAI,KAAK,IAAE,KAAK;AAC3B,eAAQ,IAAI,GAAG,IAAI,KAAK,GAAG,EAAE,EAAG,MAAK,KAAK,KAAK,KAAK,CAAC,IAAE,CAAC;AACxD,aAAO;AAAA,IACP;AAGA,aAAS,UAAU,GAAG;AACtB,UAAI,IAAI,KAAK,MAAM,IAAE,KAAK,EAAE;AAC5B,UAAG,KAAK,KAAK,EAAG,QAAO,KAAK,KAAG;AAC/B,cAAQ,KAAK,KAAK,CAAC,IAAG,KAAI,IAAE,KAAK,OAAO;AAAA,IACxC;AAGA,aAAS,aAAa,GAAE,IAAI;AAC5B,UAAI,IAAI,WAAW,IAAI,UAAU,CAAC;AAClC,WAAK,UAAU,GAAE,IAAG,CAAC;AACrB,aAAO;AAAA,IACP;AAGA,aAAS,SAAS,GAAG;AAAE,aAAO,KAAK,UAAU,GAAE,KAAK;AAAA,IAAG;AAGvD,aAAS,WAAW,GAAG;AAAE,aAAO,KAAK,UAAU,GAAE,SAAS;AAAA,IAAG;AAG7D,aAAS,UAAU,GAAG;AAAE,aAAO,KAAK,UAAU,GAAE,MAAM;AAAA,IAAG;AAGzD,aAAS,SAAS,GAAE,GAAG;AACvB,UAAI,IAAI,GAAG,IAAI,GAAG,IAAI,KAAK,IAAI,EAAE,GAAE,KAAK,CAAC;AACzC,aAAM,IAAI,GAAG;AACZ,aAAK,KAAK,KAAK,CAAC,IAAE,EAAE,KAAK,CAAC;AAC1B,UAAE,KAAK,GAAG,IAAI,IAAE,KAAK;AACrB,cAAM,KAAK;AAAA,MACZ;AACA,UAAG,EAAE,IAAI,KAAK,GAAG;AAChB,aAAK,EAAE;AACP,eAAM,IAAI,KAAK,GAAG;AAChB,eAAK,KAAK,KAAK,CAAC;AAChB,YAAE,KAAK,GAAG,IAAI,IAAE,KAAK;AACrB,gBAAM,KAAK;AAAA,QACb;AACA,aAAK,KAAK;AAAA,MACX,OACK;AACJ,aAAK,KAAK;AACV,eAAM,IAAI,EAAE,GAAG;AACb,eAAK,EAAE,KAAK,CAAC;AACb,YAAE,KAAK,GAAG,IAAI,IAAE,KAAK;AACrB,gBAAM,KAAK;AAAA,QACb;AACA,aAAK,EAAE;AAAA,MACR;AACA,QAAE,IAAK,IAAE,IAAG,KAAG;AACf,UAAG,IAAI,EAAG,GAAE,KAAK,GAAG,IAAI;AAAA,eAChB,IAAI,GAAI,GAAE,KAAK,GAAG,IAAI,KAAK,KAAG;AACtC,QAAE,IAAI;AACN,QAAE,MAAM;AAAA,IACR;AAGA,aAAS,MAAM,GAAG;AAAE,UAAI,IAAI,IAAI;AAAG,WAAK,MAAM,GAAE,CAAC;AAAG,aAAO;AAAA,IAAG;AAG9D,aAAS,WAAW,GAAG;AAAE,UAAI,IAAI,IAAI;AAAG,WAAK,MAAM,GAAE,CAAC;AAAG,aAAO;AAAA,IAAG;AAGnE,aAAS,WAAW,GAAG;AAAE,UAAI,IAAI,IAAI;AAAG,WAAK,WAAW,GAAE,CAAC;AAAG,aAAO;AAAA,IAAG;AAGxE,aAAS,SAAS,GAAG;AAAE,UAAI,IAAI,IAAI;AAAG,WAAK,SAAS,GAAE,GAAE,IAAI;AAAG,aAAO;AAAA,IAAG;AAGzE,aAAS,YAAY,GAAG;AAAE,UAAI,IAAI,IAAI;AAAG,WAAK,SAAS,GAAE,MAAK,CAAC;AAAG,aAAO;AAAA,IAAG;AAG5E,aAAS,qBAAqB,GAAG;AACjC,UAAI,IAAI,IAAI,GAAG,IAAI,IAAI;AACvB,WAAK,SAAS,GAAE,GAAE,CAAC;AACnB,aAAO,IAAI,MAAM,GAAE,CAAC;AAAA,IACpB;AAGA,aAAS,aAAa,GAAG;AACzB,WAAK,KAAK,KAAK,CAAC,IAAI,KAAK,GAAG,GAAE,IAAE,GAAE,MAAK,GAAE,GAAE,KAAK,CAAC;AACjD,QAAE,KAAK;AACP,WAAK,MAAM;AAAA,IACX;AAGA,aAAS,cAAc,GAAE,GAAG;AAC5B,UAAG,KAAK,EAAG;AACX,aAAM,KAAK,KAAK,EAAG,MAAK,KAAK,KAAK,GAAG,IAAI;AACzC,WAAK,KAAK,CAAC,KAAK;AAChB,aAAM,KAAK,KAAK,CAAC,KAAK,KAAK,IAAI;AAC9B,aAAK,KAAK,CAAC,KAAK,KAAK;AACrB,YAAG,EAAE,KAAK,KAAK,EAAG,MAAK,KAAK,KAAK,GAAG,IAAI;AACxC,UAAE,KAAK,KAAK,CAAC;AAAA,MACd;AAAA,IACA;AAGA,aAAS,UAAU;AAAA,IAAC;AACpB,aAAS,KAAK,GAAG;AAAE,aAAO;AAAA,IAAG;AAC7B,aAAS,OAAO,GAAE,GAAE,GAAG;AAAE,QAAE,WAAW,GAAE,CAAC;AAAA,IAAG;AAC5C,aAAS,OAAO,GAAE,GAAG;AAAE,QAAE,SAAS,CAAC;AAAA,IAAG;AAEtC,YAAQ,UAAU,UAAU;AAC5B,YAAQ,UAAU,SAAS;AAC3B,YAAQ,UAAU,QAAQ;AAC1B,YAAQ,UAAU,QAAQ;AAG1B,aAAS,MAAM,GAAG;AAAE,aAAO,KAAK,IAAI,GAAE,IAAI,QAAQ,CAAC;AAAA,IAAG;AAItD,aAAS,mBAAmB,GAAE,GAAE,GAAG;AACnC,UAAI,IAAI,KAAK,IAAI,KAAK,IAAE,EAAE,GAAE,CAAC;AAC7B,QAAE,IAAI;AACN,QAAE,IAAI;AACN,aAAM,IAAI,EAAG,GAAE,KAAK,EAAE,CAAC,IAAI;AAC3B,UAAI;AACJ,WAAI,IAAI,EAAE,IAAE,KAAK,GAAG,IAAI,GAAG,EAAE,EAAG,GAAE,KAAK,IAAE,KAAK,CAAC,IAAI,KAAK,GAAG,GAAE,EAAE,KAAK,CAAC,GAAE,GAAE,GAAE,GAAE,KAAK,CAAC;AACnF,WAAI,IAAI,KAAK,IAAI,EAAE,GAAE,CAAC,GAAG,IAAI,GAAG,EAAE,EAAG,MAAK,GAAG,GAAE,EAAE,KAAK,CAAC,GAAE,GAAE,GAAE,GAAE,IAAE,CAAC;AAClE,QAAE,MAAM;AAAA,IACR;AAIA,aAAS,mBAAmB,GAAE,GAAE,GAAG;AACnC,QAAE;AACF,UAAI,IAAI,EAAE,IAAI,KAAK,IAAE,EAAE,IAAE;AACzB,QAAE,IAAI;AACN,aAAM,EAAE,KAAK,EAAG,GAAE,KAAK,CAAC,IAAI;AAC5B,WAAI,IAAI,KAAK,IAAI,IAAE,KAAK,GAAE,CAAC,GAAG,IAAI,EAAE,GAAG,EAAE;AACxC,UAAE,KAAK,KAAK,IAAE,IAAE,CAAC,IAAI,KAAK,GAAG,IAAE,GAAE,EAAE,KAAK,CAAC,GAAE,GAAE,GAAE,GAAE,KAAK,IAAE,IAAE,CAAC;AAC5D,QAAE,MAAM;AACR,QAAE,UAAU,GAAE,CAAC;AAAA,IACf;AAGA,aAAS,QAAQ,GAAG;AAEpB,WAAK,KAAK,IAAI;AACd,WAAK,KAAK,IAAI;AACd,iBAAW,IAAI,UAAU,IAAE,EAAE,GAAE,KAAK,EAAE;AACtC,WAAK,KAAK,KAAK,GAAG,OAAO,CAAC;AAC1B,WAAK,IAAI;AAAA,IACT;AAEA,aAAS,eAAe,GAAG;AAC3B,UAAG,EAAE,IAAI,KAAK,EAAE,IAAI,IAAE,KAAK,EAAE,EAAG,QAAO,EAAE,IAAI,KAAK,CAAC;AAAA,eAC3C,EAAE,UAAU,KAAK,CAAC,IAAI,EAAG,QAAO;AAAA,WACnC;AAAE,YAAI,IAAI,IAAI;AAAG,UAAE,OAAO,CAAC;AAAG,aAAK,OAAO,CAAC;AAAG,eAAO;AAAA,MAAG;AAAA,IAC7D;AAEA,aAAS,cAAc,GAAG;AAAE,aAAO;AAAA,IAAG;AAGtC,aAAS,cAAc,GAAG;AAC1B,QAAE,UAAU,KAAK,EAAE,IAAE,GAAE,KAAK,EAAE;AAC9B,UAAG,EAAE,IAAI,KAAK,EAAE,IAAE,GAAG;AAAE,UAAE,IAAI,KAAK,EAAE,IAAE;AAAG,UAAE,MAAM;AAAA,MAAG;AACpD,WAAK,GAAG,gBAAgB,KAAK,IAAG,KAAK,EAAE,IAAE,GAAE,KAAK,EAAE;AAClD,WAAK,EAAE,gBAAgB,KAAK,IAAG,KAAK,EAAE,IAAE,GAAE,KAAK,EAAE;AACjD,aAAM,EAAE,UAAU,KAAK,EAAE,IAAI,EAAG,GAAE,WAAW,GAAE,KAAK,EAAE,IAAE,CAAC;AACzD,QAAE,MAAM,KAAK,IAAG,CAAC;AACjB,aAAM,EAAE,UAAU,KAAK,CAAC,KAAK,EAAG,GAAE,MAAM,KAAK,GAAE,CAAC;AAAA,IAChD;AAGA,aAAS,aAAa,GAAE,GAAG;AAAE,QAAE,SAAS,CAAC;AAAG,WAAK,OAAO,CAAC;AAAA,IAAG;AAG5D,aAAS,aAAa,GAAE,GAAE,GAAG;AAAE,QAAE,WAAW,GAAE,CAAC;AAAG,WAAK,OAAO,CAAC;AAAA,IAAG;AAElE,YAAQ,UAAU,UAAU;AAC5B,YAAQ,UAAU,SAAS;AAC3B,YAAQ,UAAU,SAAS;AAC3B,YAAQ,UAAU,QAAQ;AAC1B,YAAQ,UAAU,QAAQ;AAG1B,aAAS,SAAS,GAAE,GAAG;AACvB,UAAI,IAAI,EAAE,UAAU,GAAG,GAAG,IAAI,IAAI,CAAC,GAAG;AACtC,UAAG,KAAK,EAAG,QAAO;AAAA,eACV,IAAI,GAAI,KAAI;AAAA,eACZ,IAAI,GAAI,KAAI;AAAA,eACZ,IAAI,IAAK,KAAI;AAAA,eACb,IAAI,IAAK,KAAI;AAAA,UAChB,KAAI;AACT,UAAG,IAAI;AACN,YAAI,IAAI,QAAQ,CAAC;AAAA,eACV,EAAE,OAAO;AAChB,YAAI,IAAI,QAAQ,CAAC;AAAA;AAEjB,YAAI,IAAI,WAAW,CAAC;AAGrB,UAAI,IAAI,IAAI,MAAM,GAAG,IAAI,GAAG,KAAK,IAAE,GAAG,MAAM,KAAG,KAAG;AAClD,QAAE,CAAC,IAAI,EAAE,QAAQ,IAAI;AACrB,UAAG,IAAI,GAAG;AACT,YAAI,KAAK,IAAI;AACb,UAAE,MAAM,EAAE,CAAC,GAAE,EAAE;AACf,eAAM,KAAK,IAAI;AACb,YAAE,CAAC,IAAI,IAAI;AACX,YAAE,MAAM,IAAG,EAAE,IAAE,CAAC,GAAE,EAAE,CAAC,CAAC;AACtB,eAAK;AAAA,QACP;AAAA,MACD;AAEA,UAAI,IAAI,EAAE,IAAE,GAAG,GAAG,MAAM,MAAM,KAAK,IAAI,GAAG;AAC1C,UAAI,MAAM,EAAE,KAAK,CAAC,CAAC,IAAE;AACrB,aAAM,KAAK,GAAG;AACb,YAAG,KAAK,GAAI,KAAK,EAAE,KAAK,CAAC,KAAI,IAAE,KAAK;AAAA,aAC/B;AACH,eAAK,EAAE,KAAK,CAAC,KAAI,KAAI,IAAE,KAAI,MAAM,KAAG;AACpC,cAAG,IAAI,EAAG,MAAK,EAAE,KAAK,IAAE,CAAC,KAAI,KAAK,KAAG,IAAE;AAAA,QACzC;AAEA,YAAI;AACJ,gBAAO,IAAE,MAAM,GAAG;AAAE,gBAAM;AAAG,YAAE;AAAA,QAAG;AAClC,aAAI,KAAK,KAAK,GAAG;AAAE,eAAK,KAAK;AAAI,YAAE;AAAA,QAAG;AACtC,YAAG,KAAK;AACN,YAAE,CAAC,EAAE,OAAO,CAAC;AACb,gBAAM;AAAA,QACR,OACK;AACH,iBAAM,IAAI,GAAG;AAAE,cAAE,MAAM,GAAE,EAAE;AAAG,cAAE,MAAM,IAAG,CAAC;AAAG,iBAAK;AAAA,UAAG;AACrD,cAAG,IAAI,EAAG,GAAE,MAAM,GAAE,EAAE;AAAA,eAAQ;AAAE,gBAAI;AAAG,gBAAI;AAAI,iBAAK;AAAA,UAAG;AACvD,YAAE,MAAM,IAAG,EAAE,CAAC,GAAE,CAAC;AAAA,QACnB;AAEA,eAAM,KAAK,MAAM,EAAE,KAAK,CAAC,IAAG,KAAG,MAAO,GAAG;AACvC,YAAE,MAAM,GAAE,EAAE;AAAG,cAAI;AAAG,cAAI;AAAI,eAAK;AACnC,cAAG,EAAE,IAAI,GAAG;AAAE,gBAAI,KAAK,KAAG;AAAG,cAAE;AAAA,UAAG;AAAA,QACpC;AAAA,MACD;AACA,aAAO,EAAE,OAAO,CAAC;AAAA,IACjB;AAGA,aAAS,MAAM,GAAG;AAClB,UAAI,IAAK,KAAK,IAAE,IAAG,KAAK,OAAO,IAAE,KAAK,MAAM;AAC5C,UAAI,IAAK,EAAE,IAAE,IAAG,EAAE,OAAO,IAAE,EAAE,MAAM;AACnC,UAAG,EAAE,UAAU,CAAC,IAAI,GAAG;AAAE,YAAI,IAAI;AAAG,YAAI;AAAG,YAAI;AAAA,MAAG;AAClD,UAAI,IAAI,EAAE,gBAAgB,GAAG,IAAI,EAAE,gBAAgB;AACnD,UAAG,IAAI,EAAG,QAAO;AACjB,UAAG,IAAI,EAAG,KAAI;AACd,UAAG,IAAI,GAAG;AACT,UAAE,SAAS,GAAE,CAAC;AACd,UAAE,SAAS,GAAE,CAAC;AAAA,MACf;AACA,aAAM,EAAE,OAAO,IAAI,GAAG;AACrB,aAAI,IAAI,EAAE,gBAAgB,KAAK,EAAG,GAAE,SAAS,GAAE,CAAC;AAChD,aAAI,IAAI,EAAE,gBAAgB,KAAK,EAAG,GAAE,SAAS,GAAE,CAAC;AAChD,YAAG,EAAE,UAAU,CAAC,KAAK,GAAG;AACtB,YAAE,MAAM,GAAE,CAAC;AACX,YAAE,SAAS,GAAE,CAAC;AAAA,QAChB,OACK;AACH,YAAE,MAAM,GAAE,CAAC;AACX,YAAE,SAAS,GAAE,CAAC;AAAA,QAChB;AAAA,MACD;AACA,UAAG,IAAI,EAAG,GAAE,SAAS,GAAE,CAAC;AACxB,aAAO;AAAA,IACP;AAGA,aAAS,UAAU,GAAG;AACtB,UAAG,KAAK,EAAG,QAAO;AAClB,UAAI,IAAI,KAAK,KAAG,GAAG,IAAK,KAAK,IAAE,IAAG,IAAE,IAAE;AACtC,UAAG,KAAK,IAAI;AACX,YAAG,KAAK,EAAG,KAAI,KAAK,KAAK,CAAC,IAAE;AAAA,YACvB,UAAQ,IAAI,KAAK,IAAE,GAAG,KAAK,GAAG,EAAE,EAAG,MAAK,IAAE,IAAE,KAAK,KAAK,CAAC,KAAG;AAChE,aAAO;AAAA,IACP;AAGA,aAAS,aAAa,GAAG;AACzB,UAAI,KAAK,EAAE,OAAO;AAClB,UAAI,KAAK,OAAO,KAAK,MAAO,EAAE,OAAO,KAAK,EAAG,QAAO,WAAW;AAC/D,UAAI,IAAI,EAAE,MAAM,GAAG,IAAI,KAAK,MAAM;AAClC,UAAI,IAAI,IAAI,CAAC,GAAG,IAAI,IAAI,CAAC,GAAG,IAAI,IAAI,CAAC,GAAG,IAAI,IAAI,CAAC;AACjD,aAAM,EAAE,OAAO,KAAK,GAAG;AACtB,eAAM,EAAE,OAAO,GAAG;AAChB,YAAE,SAAS,GAAE,CAAC;AACd,cAAG,IAAI;AACL,gBAAG,CAAC,EAAE,OAAO,KAAK,CAAC,EAAE,OAAO,GAAG;AAAE,gBAAE,MAAM,MAAK,CAAC;AAAG,gBAAE,MAAM,GAAE,CAAC;AAAA,YAAG;AAChE,cAAE,SAAS,GAAE,CAAC;AAAA,UAChB,WACQ,CAAC,EAAE,OAAO,EAAG,GAAE,MAAM,GAAE,CAAC;AAChC,YAAE,SAAS,GAAE,CAAC;AAAA,QAChB;AACA,eAAM,EAAE,OAAO,GAAG;AAChB,YAAE,SAAS,GAAE,CAAC;AACd,cAAG,IAAI;AACL,gBAAG,CAAC,EAAE,OAAO,KAAK,CAAC,EAAE,OAAO,GAAG;AAAE,gBAAE,MAAM,MAAK,CAAC;AAAG,gBAAE,MAAM,GAAE,CAAC;AAAA,YAAG;AAChE,cAAE,SAAS,GAAE,CAAC;AAAA,UAChB,WACQ,CAAC,EAAE,OAAO,EAAG,GAAE,MAAM,GAAE,CAAC;AAChC,YAAE,SAAS,GAAE,CAAC;AAAA,QAChB;AACA,YAAG,EAAE,UAAU,CAAC,KAAK,GAAG;AACtB,YAAE,MAAM,GAAE,CAAC;AACX,cAAG,GAAI,GAAE,MAAM,GAAE,CAAC;AAClB,YAAE,MAAM,GAAE,CAAC;AAAA,QACb,OACK;AACH,YAAE,MAAM,GAAE,CAAC;AACX,cAAG,GAAI,GAAE,MAAM,GAAE,CAAC;AAClB,YAAE,MAAM,GAAE,CAAC;AAAA,QACb;AAAA,MACD;AACA,UAAG,EAAE,UAAU,WAAW,GAAG,KAAK,EAAG,QAAO,WAAW;AACvD,UAAG,EAAE,UAAU,CAAC,KAAK,EAAG,QAAO,EAAE,SAAS,CAAC;AAC3C,UAAG,EAAE,OAAO,IAAI,EAAG,GAAE,MAAM,GAAE,CAAC;AAAA,UAAQ,QAAO;AAC7C,UAAG,EAAE,OAAO,IAAI,EAAG,QAAO,EAAE,IAAI,CAAC;AAAA,UAAQ,QAAO;AAAA,IAChD;AAEA,QAAI,YAAY,CAAC,GAAE,GAAE,GAAE,GAAE,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,GAAG;AACvX,QAAI,SAAS,KAAG,MAAI,UAAU,UAAU,SAAO,CAAC;AAGhD,aAAS,kBAAkB,GAAG;AAC9B,UAAI,GAAG,IAAI,KAAK,IAAI;AACpB,UAAG,EAAE,KAAK,KAAK,EAAE,KAAK,CAAC,KAAK,UAAU,UAAU,SAAO,CAAC,GAAG;AAC1D,aAAI,IAAI,GAAG,IAAI,UAAU,QAAQ,EAAE;AACjC,cAAG,EAAE,KAAK,CAAC,KAAK,UAAU,CAAC,EAAG,QAAO;AACvC,eAAO;AAAA,MACR;AACA,UAAG,EAAE,OAAO,EAAG,QAAO;AACtB,UAAI;AACJ,aAAM,IAAI,UAAU,QAAQ;AAC3B,YAAI,IAAI,UAAU,CAAC,GAAG,IAAI,IAAE;AAC5B,eAAM,IAAI,UAAU,UAAU,IAAI,MAAO,MAAK,UAAU,GAAG;AAC3D,YAAI,EAAE,OAAO,CAAC;AACd,eAAM,IAAI,EAAG,KAAG,IAAE,UAAU,GAAG,KAAK,EAAG,QAAO;AAAA,MAC/C;AACA,aAAO,EAAE,YAAY,CAAC;AAAA,IACtB;AAGA,aAAS,eAAe,GAAG;AAC3B,UAAI,KAAK,KAAK,SAAS,WAAW,GAAG;AACrC,UAAI,IAAI,GAAG,gBAAgB;AAC3B,UAAG,KAAK,EAAG,QAAO;AAClB,UAAI,IAAI,GAAG,WAAW,CAAC;AACvB,UAAK,IAAE,KAAI;AACX,UAAG,IAAI,UAAU,OAAQ,KAAI,UAAU;AACvC,UAAI,IAAI,IAAI;AACZ,eAAQ,IAAI,GAAG,IAAI,GAAG,EAAE,GAAG;AAC1B,UAAE,QAAQ,UAAU,CAAC,CAAC;AACtB,YAAI,IAAI,EAAE,OAAO,GAAE,IAAI;AACvB,YAAG,EAAE,UAAU,WAAW,GAAG,KAAK,KAAK,EAAE,UAAU,EAAE,KAAK,GAAG;AAC3D,cAAI,IAAI;AACR,iBAAM,MAAM,KAAK,EAAE,UAAU,EAAE,KAAK,GAAG;AACrC,gBAAI,EAAE,UAAU,GAAE,IAAI;AACtB,gBAAG,EAAE,UAAU,WAAW,GAAG,KAAK,EAAG,QAAO;AAAA,UAC9C;AACA,cAAG,EAAE,UAAU,EAAE,KAAK,EAAG,QAAO;AAAA,QAClC;AAAA,MACD;AACA,aAAO;AAAA,IACP;AAGA,eAAW,UAAU,YAAY;AACjC,eAAW,UAAU,UAAU;AAC/B,eAAW,UAAU,YAAY;AACjC,eAAW,UAAU,aAAa;AAClC,eAAW,UAAU,YAAY;AACjC,eAAW,UAAU,YAAY;AACjC,eAAW,UAAU,QAAQ;AAC7B,eAAW,UAAU,YAAY;AACjC,eAAW,UAAU,aAAa;AAClC,eAAW,UAAU,kBAAkB;AACvC,eAAW,UAAU,kBAAkB;AACvC,eAAW,UAAU,SAAS;AAC9B,eAAW,UAAU,cAAc;AAGnC,eAAW,UAAU,QAAQ;AAC7B,eAAW,UAAU,WAAW;AAChC,eAAW,UAAU,YAAY;AACjC,eAAW,UAAU,aAAa;AAClC,eAAW,UAAU,SAAS;AAC9B,eAAW,UAAU,cAAc;AACnC,eAAW,UAAU,SAAS;AAC9B,eAAW,UAAU,MAAM;AAC3B,eAAW,UAAU,MAAM;AAC3B,eAAW,UAAU,MAAM;AAC3B,eAAW,UAAU,KAAK;AAC1B,eAAW,UAAU,MAAM;AAC3B,eAAW,UAAU,SAAS;AAC9B,eAAW,UAAU,MAAM;AAC3B,eAAW,UAAU,YAAY;AACjC,eAAW,UAAU,aAAa;AAClC,eAAW,UAAU,kBAAkB;AACvC,eAAW,UAAU,WAAW;AAChC,eAAW,UAAU,UAAU;AAC/B,eAAW,UAAU,SAAS;AAC9B,eAAW,UAAU,WAAW;AAChC,eAAW,UAAU,UAAU;AAC/B,eAAW,UAAU,MAAM;AAC3B,eAAW,UAAU,WAAW;AAChC,eAAW,UAAU,WAAW;AAChC,eAAW,UAAU,SAAS;AAC9B,eAAW,UAAU,YAAY;AACjC,eAAW,UAAU,qBAAqB;AAC1C,eAAW,UAAU,SAAS;AAC9B,eAAW,UAAU,aAAa;AAClC,eAAW,UAAU,MAAM;AAC3B,eAAW,UAAU,MAAM;AAC3B,eAAW,UAAU,kBAAkB;AAWvC,UAAM,OAAO,MAAM,QAAQ,CAAC;AAC5B,UAAM,KAAK,aAAa;AAOxB,QAAI,OAAO,MAAM,OAAO,MAAM,QAAQ,CAAC;AAGvC,QAAG,OAAO,YAAY,eAAe,CAAC,QAAQ,UAAU;AACtD,UAAG,OAAO,iBAAiB,YAAY;AACrC,aAAK,eAAe;AACpB,aAAK,WAAW,SAAS,UAAU;AACjC,iBAAO,aAAa,QAAQ;AAAA,QAC9B;AAAA,MACF,OACK;AACH,aAAK,eAAe,SAAS,UAAU;AACrC,qBAAW,UAAU,CAAC;AAAA,QACxB;AACA,aAAK,WAAW,KAAK;AAAA,MACvB;AAAA,IACF,OACK;AACH,WAAK,WAAW,QAAQ;AACxB,UAAG,OAAO,iBAAiB,YAAY;AACrC,aAAK,eAAe;AAAA,MACtB,OACK;AACH,aAAK,eAAe,KAAK;AAAA,MAC3B;AAAA,IACF;AAIA,QAAI,UAAU,SAAS,GAAGA,MAAK,KAAK;AAClC,UAAI;AAEJ,UAAG,KAAK;AACN,YAAI,EAAE,OAAOA,KAAI,GAAGA,KAAI,CAAC;AAAA,MAC3B,OACK;AAEH,YAAG,CAACA,KAAI,IAAI;AACV,UAAAA,KAAI,KAAKA,KAAI,EAAE,IAAIA,KAAI,EAAE,SAAS,WAAW,GAAG,CAAC;AAAA,QACnD;AACA,YAAG,CAACA,KAAI,IAAI;AACV,UAAAA,KAAI,KAAKA,KAAI,EAAE,IAAIA,KAAI,EAAE,SAAS,WAAW,GAAG,CAAC;AAAA,QACnD;AACA,YAAG,CAACA,KAAI,MAAM;AACZ,UAAAA,KAAI,OAAOA,KAAI,EAAE,WAAWA,KAAI,CAAC;AAAA,QACnC;AAsFA,YAAI,KAAK,EAAE,IAAIA,KAAI,CAAC,EAAE,OAAOA,KAAI,IAAIA,KAAI,CAAC;AAC1C,YAAI,KAAK,EAAE,IAAIA,KAAI,CAAC,EAAE,OAAOA,KAAI,IAAIA,KAAI,CAAC;AAG1C,eAAM,GAAG,UAAU,EAAE,IAAI,GAAG;AAC1B,eAAK,GAAG,IAAIA,KAAI,CAAC;AAAA,QACnB;AAGA,YAAI,GAAG,SAAS,EAAE,EACf,SAASA,KAAI,IAAI,EAAE,IAAIA,KAAI,CAAC,EAC5B,SAASA,KAAI,CAAC,EAAE,IAAI,EAAE;AAAA,MAC3B;AAEA,aAAO;AAAA,IACT;AAMA,SAAK,aAAa,SAAS,KAAK;AAC9B,aAAO,SAAS,mBAAmB,GAAG,CAAC;AAAA,IACzC;AAMA,SAAK,aAAa,SAAS,KAAK;AAC9B,aAAO,mBAAmB,OAAO,GAAG,CAAC;AAAA,IACvC;AAYA,SAAK,eAAe,SAAS,OAAO,UAAU;AAC5C,iBAAW,YAAY;AACvB,UAAG,UAAU,UAAa,aAAa,QAAQ;AAC7C,gBAAQ,KAAK,WAAW,KAAK;AAAA,MAC/B;AACA,aAAO,IAAI,KAAK,WAAW,KAAK;AAAA,IAClC;AAMA,SAAK,aAAa,SAAS,KAAK;AAC9B,UAAI,OAAO;AACX,UAAI,IAAI;AACR,UAAG,IAAI,SAAS,MAAQ;AAEtB,YAAI;AACJ,gBAAQ,OAAO,aAAa,SAAS,IAAI,CAAC,GAAG,EAAE,CAAC;AAAA,MAClD;AAEA,aAAM,IAAI,IAAI,QAAQ,KAAK,GAAG;AAC5B,gBAAQ,OAAO,aAAa,SAAS,IAAI,OAAO,GAAG,CAAC,GAAG,EAAE,CAAC;AAAA,MAC5D;AACA,aAAO;AAAA,IACT;AAMA,QAAI,IAAI,UAAU,SAAS,IAAIA,MAAK,KAAK,IAAI;AAE3C,UAAI,IAAI,KAAK,KAAKA,KAAI,EAAE,UAAU,IAAI,CAAC;AAGvC,UAAG,GAAG,UAAU,GAAG;AACjB,cAAM;AAAA,UACJ,SAAS;AAAA,UACT,QAAQ,GAAG;AAAA,UACX,UAAU;AAAA,QACZ;AAAA,MACF;AAIA,UAAI,IAAI,IAAI,WAAW,MAAM,KAAK,aAAa,EAAE,EAAE,MAAM,GAAG,EAAE;AAG9D,UAAI,IAAI,QAAQ,GAAGA,MAAK,GAAG;AAK3B,UAAI,OAAO,EAAE,SAAS,EAAE;AACxB,UAAI,KAAK,MAAM,KAAK,aAAa;AACjC,UAAI,QAAQ,IAAI,KAAK,KAAK,KAAK,SAAS,CAAC;AACzC,aAAM,QAAQ,GAAG;AACf,WAAG,QAAQ,CAAI;AACf,UAAE;AAAA,MACJ;AACA,SAAG,SAAS,MAAM,KAAK,WAAW,IAAI,CAAC;AAEvC,UAAG,OAAO,OAAO;AAYf,YAAI,QAAQ,GAAG,QAAQ;AACvB,YAAI,KAAK,GAAG,QAAQ;AACpB,YAAG,UAAU,KACV,OAAO,OAAO,KAAQ,OAAO,KAC7B,CAAC,OAAO,MAAM,KACd,OAAO,OAAO,KAAQ,OAAO,OAAQ,aAAc;AACpD,gBAAM;AAAA,YACJ,SAAS;AAAA,UACX;AAAA,QACF;AAEA,YAAI,SAAS;AACb,YAAG,OAAO,GAAM;AAEd,mBAAS,IAAI,IAAI;AACjB,mBAAQ,IAAI,GAAG,IAAI,QAAQ,EAAE,GAAG;AAC9B,gBAAG,GAAG,QAAQ,MAAM,GAAM;AACxB,oBAAM;AAAA,gBACJ,SAAS;AAAA,cACX;AAAA,YACF;AAAA,UACF;AAAA,QACF,WACQ,OAAO,GAAM;AAEnB,mBAAS;AACT,iBAAM,GAAG,OAAO,IAAI,GAAG;AACrB,gBAAG,GAAG,QAAQ,MAAM,KAAM;AACxB,gBAAE,GAAG;AACL;AAAA,YACF;AACA,cAAE;AAAA,UACJ;AAAA,QACF,WACQ,OAAO,GAAM;AAEnB,mBAAS;AACT,iBAAM,GAAG,OAAO,IAAI,GAAG;AACrB,gBAAG,GAAG,QAAQ,MAAM,GAAM;AACxB,gBAAE,GAAG;AACL;AAAA,YACF;AACA,cAAE;AAAA,UACJ;AAAA,QACF;AAGA,YAAI,OAAO,GAAG,QAAQ;AACtB,YAAG,SAAS,KAAQ,WAAY,IAAI,IAAI,GAAG,OAAO,GAAI;AACpD,gBAAM;AAAA,YACJ,SAAS;AAAA,UACX;AAAA,QACF;AAAA,MACF;AAGA,aAAO,GAAG,SAAS;AAAA,IACrB;AAMA,QAAI,IAAI,UAAU,SAAS,GAAGA,MAAK,IAAI;AACrC,UAAI,MAAM;AACV,UAAI,KAAK,MAAM,KAAK,aAAa;AAGjC,UAAI,IAAI,KAAK,KAAKA,KAAI,EAAE,UAAU,IAAI,CAAC;AAEvC,UAAG,OAAO,SAAS,OAAO,MAAM;AAE9B,YAAG,EAAE,SAAU,IAAI,IAAK;AACtB,gBAAM;AAAA,YACJ,SAAS;AAAA,YACT,QAAQ,EAAE;AAAA,YACV,KAAM,IAAI;AAAA,UACZ;AAAA,QACF;AAmBA,WAAG,QAAQ,CAAI;AACf,WAAG,QAAQ,EAAE;AAGb,YAAI,SAAS,IAAI,IAAI,EAAE;AACvB,YAAI;AACJ,YAAG,OAAO,KAAQ,OAAO,GAAM;AAC7B,gBAAM;AACN,oBAAW,OAAO,IAAQ,IAAO;AACjC,mBAAQ,IAAI,GAAG,IAAI,QAAQ,EAAE,GAAG;AAC9B,eAAG,QAAQ,OAAO;AAAA,UACpB;AAAA,QACF,OACK;AACH,gBAAM;AACN,mBAAQ,IAAI,GAAG,IAAI,QAAQ,EAAE,GAAG;AAC9B,sBAAU,KAAK,MAAM,KAAK,OAAO,IAAI,GAAG,IAAI;AAC5C,eAAG,QAAQ,OAAO;AAAA,UACpB;AAAA,QACF;AAGA,WAAG,QAAQ,CAAI;AAAA,MACjB;AAEA,SAAG,SAAS,CAAC;AAIb,UAAI,IAAI,IAAI,WAAW,GAAG,MAAM,GAAG,EAAE;AAGrC,UAAI,IAAI,QAAQ,GAAGA,MAAK,GAAG;AAK3B,UAAI,OAAO,EAAE,SAAS,EAAE;AACxB,UAAI,KAAK,MAAM,KAAK,aAAa;AACjC,UAAI,QAAQ,IAAI,KAAK,KAAK,KAAK,SAAS,CAAC;AACzC,aAAM,QAAQ,GAAG;AACf,WAAG,QAAQ,CAAI;AACf,UAAE;AAAA,MACJ;AACA,SAAG,SAAS,MAAM,KAAK,WAAW,IAAI,CAAC;AACvC,aAAO,GAAG,SAAS;AAAA,IACrB;AAMA,QAAI,IAAI,gBAAgB,SAAS,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,IAAI,MAAM;AAC5D,UAAIA,OAAM;AAAA,QACR;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACF;AASA,MAAAA,KAAI,UAAU,SAAS,MAAM;AAC3B,eAAO,IAAI,IAAI,QAAQ,MAAMA,MAAK,KAAK;AAAA,MACzC;AAiBA,MAAAA,KAAI,OAAO,SAASH,KAAI,QAAQ;AAC9B,YAAI,KAAK;AAET,YAAG,WAAW,QAAW;AACvB,mBAAS,EAAE,QAAQ,mBAAmB;AACtC,eAAK;AAAA,QACP;AAEA,YAAII,KAAI,OAAO,OAAOJ,KAAIG,KAAI,EAAE,UAAU,CAAC;AAC3C,eAAO,IAAI,IAAI,QAAQC,IAAGD,MAAK,EAAE;AAAA,MACnC;AAEA,aAAOA;AAAA,IACT;AAMA,QAAI,kBAAkB,SAAS,GAAG;AAChC,UAAI,KAAK,EAAE,QAAQ;AACnB,UAAG,MAAM,KAAM;AACb,eAAO;AAAA,MACT;AAGA,UAAI;AACJ,UAAI,WAAW,KAAK;AACpB,UAAG,CAAC,UAAU;AAEZ,iBAAS;AAAA,MACX,OACK;AAGH,iBAAS,EAAE,QAAQ,KAAK,QAAS,CAAC;AAAA,MACpC;AACA,aAAO;AAAA,IACT;AAUA,QAAI,OAAO,MAAM,OAAO,MAAM,QAAQ,CAAC;AACvC,SAAK,OAAO;AAAA,MACV,MAAkB;AAAA,MAClB,SAAkB;AAAA,MAClB,SAAkB;AAAA,MAClB,WAAkB;AAAA,MAClB,aAAkB;AAAA,MAClB,MAAkB;AAAA,MAClB,KAAkB;AAAA,MAClB,OAAkB;AAAA,MAClB,UAAkB;AAAA,MAClB,MAAkB;AAAA,MAClB,YAAiB;AAAA,MACjB,UAAiB;AAAA,MACjB,MAAiB;AAAA,MACjB,MAAiB;AAAA,MACjB,UAAiB;AAAA,MACjB,KAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,WAAiB;AAAA,MACjB,SAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,WAAiB;AAAA,IACnB;AAMA,SAAK,QAAQ;AAAA,MACX,WAAkB;AAAA,MAClB,aAAkB;AAAA,MAClB,kBAAkB;AAAA,MAClB,SAAkB;AAAA,IACpB;AAMA,SAAK,SAAS,SAAS,UAAU,MAAM,aAAa,OAAO;AAQzD,UAAG,MAAM,eAAe,OAAO;AAC7B,YAAI,MAAM,CAAC;AACX,iBAAQ,IAAI,GAAG,IAAI,MAAM,QAAQ,EAAE,GAAG;AACpC,cAAG,MAAM,CAAC,MAAM,QAAW;AACzB,gBAAI,KAAK,MAAM,CAAC,CAAC;AAAA,UACnB;AAAA,QACF;AACA,gBAAQ;AAAA,MACV;AAEA,aAAO;AAAA,QACL;AAAA,QACA;AAAA,QACA;AAAA,QACA,UAAU,eAAgB,MAAM,eAAe;AAAA,QAC/C;AAAA,MACF;AAAA,IACF;AAMA,SAAK,UAAU,SAAS,OAAO;AAE7B,UAAG,MAAM,eAAe,QAAQ;AAC9B,gBAAQ,MAAM,KAAK,aAAa,KAAK;AAAA,MACvC;AAGA,UAAG,MAAM,OAAO,IAAI,GAAM;AACxB,cAAM;AAAA,UACJ,SAAS;AAAA,UACT,OAAO,MAAM,OAAO;AAAA,QACtB;AAAA,MACF;AAGA,UAAI,KAAK,MAAM,QAAQ;AAGvB,UAAI,WAAY,KAAK;AAGrB,UAAI,OAAO,KAAK;AAGhB,UAAI,SAAS,gBAAgB,KAAK;AAGlC,UAAG,MAAM,OAAO,IAAI,QAAQ;AAC1B,cAAM;AAAA,UACJ,SAAS;AAAA,UACT,QAAQ,MAAM,OAAO,IAAI,QAAQ;AAAA,QACnC;AAAA,MACF;AAGA,UAAI;AAGJ,UAAI,eAAgB,KAAK,OAAS;AAIlC,UAAI,WAAW;AACf,UAAG,CAAC,YAAY,aAAa,KAAK,MAAM,aACtC,SAAS,KAAK,KAAK,aAAa,SAAS,GAAG;AAQ5C,YAAI,OAAO,MAAM;AACjB,YAAI,SAAS,MAAM,QAAQ;AAC3B,YAAG,WAAW,GAAG;AAGf,eAAK,MAAM,QAAQ;AACnB,cAAI,KAAM,KAAK;AACf,cAAG,OAAO,KAAK,MAAM,aACnB,OAAO,KAAK,MAAM,kBAAkB;AACpC,gBAAI;AACF,kBAAI,MAAM,gBAAgB,KAAK;AAC/B,yBAAY,QAAQ,UAAU,MAAM,OAAO;AAC3C,kBAAG,UAAU;AAEX,kBAAE;AACF,kBAAE;AAAA,cACJ;AAAA,YACF,SACM,IAAI;AAAA,YAAC;AAAA,UACb;AAAA,QACF;AAEA,cAAM,OAAO;AAAA,MACf;AAEA,UAAG,UAAU;AAEX,gBAAQ,CAAC;AACT,YAAG,WAAW,QAAW;AAEvB,qBAAQ;AACN,gBAAG,MAAM,MAAM,CAAC,MAAM,OAAO,aAAa,GAAG,CAAC,GAAG;AAC/C,oBAAM,SAAS,CAAC;AAChB;AAAA,YACF;AACA,kBAAM,KAAK,KAAK,QAAQ,KAAK,CAAC;AAAA,UAChC;AAAA,QACF,OACK;AAEH,cAAI,QAAQ,MAAM,OAAO;AACzB,iBAAM,SAAS,GAAG;AAChB,kBAAM,KAAK,KAAK,QAAQ,KAAK,CAAC;AAC9B,sBAAU,QAAQ,MAAM,OAAO;AAC/B,oBAAQ,MAAM,OAAO;AAAA,UACvB;AAAA,QACF;AAAA,MACF,OAEK;AAGH,YAAG,WAAW,QAAW;AACvB,gBAAM;AAAA,YACJ,SAAS;AAAA,UACX;AAAA,QACF;AAEA,YAAG,SAAS,KAAK,KAAK,WAAW;AAC/B,kBAAQ;AACR,mBAAQ,IAAI,GAAG,IAAI,QAAQ,KAAK,GAAG;AACjC,qBAAS,OAAO,aAAa,MAAM,SAAS,CAAC;AAAA,UAC/C;AAAA,QACF,OACK;AACH,kBAAQ,MAAM,SAAS,MAAM;AAAA,QAC/B;AAAA,MACF;AAGA,aAAO,KAAK,OAAO,UAAU,MAAM,aAAa,KAAK;AAAA,IACvD;AAMA,SAAK,QAAQ,SAAS,KAAK;AACzB,UAAI,QAAQ,MAAM,KAAK,aAAa;AAGpC,UAAI,KAAK,IAAI,WAAW,IAAI;AAG5B,UAAI,QAAQ,MAAM,KAAK,aAAa;AAGpC,UAAG,IAAI,UAAU;AAGf,YAAG,IAAI,aAAa;AAClB,gBAAM;AAAA,QACR,OAEK;AACH,gBAAM,QAAQ,CAAI;AAAA,QACpB;AAGA,iBAAQ,IAAI,GAAG,IAAI,IAAI,MAAM,QAAQ,EAAE,GAAG;AACxC,cAAG,IAAI,MAAM,CAAC,MAAM,QAAW;AAC7B,kBAAM,UAAU,KAAK,MAAM,IAAI,MAAM,CAAC,CAAC,CAAC;AAAA,UAC1C;AAAA,QACF;AAAA,MACF,OAEK;AACH,YAAG,IAAI,SAAS,KAAK,KAAK,WAAW;AACnC,mBAAQ,IAAI,GAAG,IAAI,IAAI,MAAM,QAAQ,EAAE,GAAG;AACxC,kBAAM,SAAS,IAAI,MAAM,WAAW,CAAC,CAAC;AAAA,UACxC;AAAA,QACF,OACK;AACH,gBAAM,SAAS,IAAI,KAAK;AAAA,QAC1B;AAAA,MACF;AAGA,YAAM,QAAQ,EAAE;AAGhB,UAAG,MAAM,OAAO,KAAK,KAAK;AAGxB,cAAM,QAAQ,MAAM,OAAO,IAAI,GAAI;AAAA,MACrC,OAEK;AAIH,YAAI,MAAM,MAAM,OAAO;AACvB,YAAI,WAAW;AACf,WAAG;AACD,sBAAY,OAAO,aAAa,MAAM,GAAI;AAC1C,gBAAM,QAAQ;AAAA,QAChB,SACM,MAAM;AAIZ,cAAM,QAAQ,SAAS,SAAS,GAAI;AAIpC,iBAAQ,IAAI,SAAS,SAAS,GAAG,KAAK,GAAG,EAAE,GAAG;AAC5C,gBAAM,QAAQ,SAAS,WAAW,CAAC,CAAC;AAAA,QACtC;AAAA,MACF;AAGA,YAAM,UAAU,KAAK;AACrB,aAAO;AAAA,IACT;AAMA,QAAI,IAAI,eAAe,SAAS,GAAG,GAAG;AACpC,UAAIA,OAAM;AAAA,QACR;AAAA,QACA;AAAA,MACF;AASA,MAAAA,KAAI,UAAU,SAAS,MAAM;AAC3B,eAAO,IAAI,IAAI,QAAQ,MAAMA,MAAK,CAAI;AAAA,MACxC;AA4BC,MAAAA,KAAI,SAAS,SAAS,QAAQ,WAAW,QAAQ;AAE/C,YAAI,KAAK,WAAW,SAAY,SAAY;AAC5C,YAAI,IAAI,IAAI,IAAI,QAAQ,WAAWA,MAAK,MAAM,EAAE;AAEhD,YAAG,WAAW,QAAW;AAEvB,cAAI,MAAM,KAAK,QAAQ,CAAC;AAGxB,iBAAO,WAAW,IAAI,MAAM,CAAC,EAAE;AAAA,QACjC,OACK;AACH,iBAAO,OAAO,OAAO,QAAQ,GAAGA,KAAI,EAAE,UAAU,CAAC;AAAA,QACnD;AAAA,MACH;AAEA,aAAOA;AAAA,IACT;AAMA,QAAI,eAAe,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAE1C,QAAI,IAAI,6BAA6B,SAAS,OAAO,GAAG;AAKtD,UAAI,SAAS,IAAI,WAAW,IAAI;AAChC,aAAO,QAAQ,EAAE;AACjB,UAAI,WAAW;AACf,UAAIE,SAAQ,SAAS,GAAE,GAAG;AAAE,eAAO,IAAE;AAAA,MAAG;AAGxC,UAAI,KAAK,CAAC,oBAAI,KAAK;AACnB,UAAI;AACJ,UAAI,QAAQ;AACZ,aAAM,MAAM,SAAS,SAAS,KAAK,KAAK,QAAQ,IAAI;AAElD,YAAG,MAAM,UAAU,GAAG;AAQpB,cAAI,OAAQ,MAAM,MAAM,OAAQ,MAAM,QAAQ,MAAM;AACpD,cAAI,QAAQ,OAAO;AAGnB,cAAG,MAAM,YAAY,GAAG;AACtB,kBAAM,MAAM,IAAI,WAAW,MAAM,MAAM,GAAG;AAE1C,gBAAG,CAAC,MAAM,IAAI,QAAQ,KAAK,GAAG;AAC5B,oBAAM,IAAI;AAAA,gBACR,WAAW,IAAI,UAAU,KAAK;AAAA,gBAAGA;AAAA,gBAAO,MAAM;AAAA,cAAG;AAAA,YACrD;AAEA,kBAAM,IAAI,WAAW,KAAK,MAAM,IAAI,IAAI,MAAM,EAAE,UAAU,GAAG,CAAC;AAC9D,uBAAW;AAEX,cAAE,MAAM;AAAA,UACV,WAEQ,MAAM,YAAY,GAAG;AAE3B,gBAAG,MAAM,IAAI,UAAU,IAAI,MAAM;AAC/B,oBAAM,UAAU;AAAA,YAClB,WAEQ,MAAM,IAAI,gBAAgB,CAAC,GAAG;AACpC,gBAAE,MAAM;AAAA,YACV,OACK;AAEH,oBAAM,IAAI,WAAW,aAAa,aAAa,CAAC,GAAG,CAAC;AAAA,YACtD;AAAA,UACF,WAEQ,MAAM,YAAY,GAAG;AAC3B,kBAAM,UACH,MAAM,IAAI,SAAS,WAAW,GAAG,EAAE,IAAI,MAAM,CAAC,EAC9C,UAAU,WAAW,GAAG,MAAM,IAAK,IAAI;AAAA,UAC5C,WAEQ,MAAM,YAAY,GAAG;AAC3B,kBAAM,UAAU;AAChB,gBAAG,MAAM,IAAI,gBAAgB,EAAE,GAAG;AAChC,kBAAG,MAAM,MAAM,MAAM;AACnB,sBAAM,IAAI,MAAM;AAAA,cAClB,OACK;AACH,sBAAM,IAAI,MAAM;AAAA,cAClB;AAGA,kBAAG,MAAM,MAAM,QAAQ,MAAM,MAAM,MAAM;AACvC,kBAAE,MAAM;AAAA,cACV;AAAA,YACF;AACA,kBAAM,MAAM;AAAA,UACd;AAAA,QACF,WAEQ,MAAM,UAAU,GAAG;AACzB,cAAG,MAAM,EAAE,UAAU,MAAM,CAAC,IAAI,GAAG;AACjC,kBAAM,MAAM,MAAM;AAClB,kBAAM,IAAI,MAAM;AAChB,kBAAM,IAAI,MAAM;AAAA,UAClB;AACA,YAAE,MAAM;AAAA,QACV,WAEQ,MAAM,UAAU,GAAG;AACzB,gBAAM,KAAK,MAAM,EAAE,SAAS,WAAW,GAAG;AAC1C,gBAAM,KAAK,MAAM,EAAE,SAAS,WAAW,GAAG;AAC1C,gBAAM,MAAM,MAAM,GAAG,SAAS,MAAM,EAAE;AACtC,YAAE,MAAM;AAAA,QACV,WAEQ,MAAM,UAAU,GAAG;AACzB,cAAG,MAAM,IAAI,IAAI,MAAM,CAAC,EAAE,UAAU,WAAW,GAAG,MAAM,GAAG;AAEzD,cAAE,MAAM;AAAA,UACV,OACK;AAEH,kBAAM,IAAI;AACV,kBAAM,IAAI;AACV,kBAAM,QAAQ;AAAA,UAChB;AAAA,QACF,WAEQ,MAAM,UAAU,GAAG;AACzB,gBAAM,IAAI,MAAM,EAAE,SAAS,MAAM,CAAC;AAGlC,cAAG,MAAM,EAAE,UAAU,MAAM,MAAM,MAAM;AAErC,cAAE,MAAM;AAAA,UACV,OACK;AAEH,kBAAM,IAAI;AACV,kBAAM,QAAQ;AAAA,UAChB;AAAA,QACF,WAEQ,MAAM,UAAU,GAAG;AACzB,cAAI,IAAI,MAAM,EAAE,WAAW,MAAM,GAAG;AACpC,gBAAM,OAAO;AAAA,YACX,YAAY,MAAM,IAAI,IAAI;AAAA,cACxB,MAAM;AAAA,cAAG,MAAM;AAAA,cAAG;AAAA,cAAG,MAAM;AAAA,cAAG,MAAM;AAAA,cACpC,EAAE,IAAI,MAAM,EAAE;AAAA,cAAG,EAAE,IAAI,MAAM,EAAE;AAAA,cAC/B,MAAM,EAAE,WAAW,MAAM,CAAC;AAAA,YAAC;AAAA,YAC7B,WAAW,MAAM,IAAI,IAAI,aAAa,MAAM,GAAG,MAAM,CAAC;AAAA,UACxD;AAAA,QACF;AAGA,aAAK,CAAC,oBAAI,KAAK;AACf,iBAAS,KAAK;AACd,aAAK;AAAA,MACP;AAEA,aAAO,MAAM,SAAS;AAAA,IACxB;AAMA,aAAS,iBAAiB,OAAO,SAAS,UAAU;AAClD,UAAG,OAAO,YAAY,YAAY;AAChC,mBAAW;AACX,kBAAU,CAAC;AAAA,MACb;AAGA,UAAY,OAAO,WAAY,aAAa;AAC1C,YAASC,QAAT,WAAgB;AAId,cAAG,MAAM,IAAI,IAAI,2BAA2B,OAAO,EAAE,GAAG;AACtD,mBAAO,SAAS,MAAM,MAAM,IAAI;AAAA,UAClC;AACA,gBAAM,KAAK,aAAaA,KAAI;AAAA,QAC9B;AARS,mBAAAA;AAST,eAAOA,MAAK;AAAA,MACd;AAGA,UAAI,aAAa,QAAQ,WAAW;AACpC,UAAI,WAAW,QAAQ,YAAY;AACnC,UAAI,QAAQ,WAAW,KAAG;AAC1B,UAAI,eAAe,QAAQ,gBAAgB;AAC3C,UAAI,SAAS,IAAI,WAAW,IAAI;AAChC,aAAO,QAAQ,EAAE;AACjB,UAAID,SAAQ,SAAS,GAAE,GAAG;AAAE,eAAO,IAAE;AAAA,MAAG;AACxC,eAAS;AAET,eAAS,WAAW;AAElB,iBAAS,MAAM,OAAO,SAAS,KAAK,KAAK;AACvC,cAAG,KAAK;AACN,mBAAO,SAAS,GAAG;AAAA,UACrB;AACA,gBAAM,IAAI;AACV,mBAAS,MAAM,OAAO,MAAM;AAAA,QAC9B,CAAC;AAAA,MACH;AAGA,eAAS,SAAS,MAAME,WAAU;AAMhC,YAAI,UAAU,CAAC;AACf,iBAAQ,IAAI,GAAG,IAAI,YAAY,EAAE,GAAG;AAElC,kBAAQ,CAAC,IAAI,IAAI,OAAO,YAAY;AAAA,QACtC;AACA,YAAI,UAAU;AAGd,YAAI,MAAM,eAAe;AAGzB,iBAAQ,IAAI,GAAG,IAAI,YAAY,EAAE,GAAG;AAClC,kBAAQ,CAAC,EAAE,iBAAiB,WAAW,aAAa;AAAA,QACtD;AAgBA,iBAAS,iBAAiB;AACxB,cAAI,QAAQ,OAAO;AACnB,cAAIC,OAAM,IAAI,WAAW,MAAM,MAAM,GAAG;AAExC,cAAG,CAACA,KAAI,QAAQ,KAAK,GAAG;AACtB,YAAAA,KAAI,UAAU,WAAW,IAAI,UAAU,KAAK,GAAGH,QAAOG,IAAG;AAAA,UAC3D;AAEA,UAAAA,KAAI,WAAW,KAAKA,KAAI,IAAI,MAAM,EAAE,UAAU,GAAG,CAAC;AAClD,iBAAOA;AAAA,QACT;AAEA,YAAI,QAAQ;AACZ,iBAAS,cAAc,GAAG;AAExB,cAAG,OAAO;AACR;AAAA,UACF;AAEA,YAAE;AACF,cAAI,OAAO,EAAE;AACb,cAAG,KAAK,OAAO;AAEb,qBAAQP,KAAI,GAAGA,KAAI,QAAQ,QAAQ,EAAEA,IAAG;AACtC,sBAAQA,EAAC,EAAE,UAAU;AAAA,YACvB;AACA,oBAAQ;AACR,mBAAOM,UAAS,MAAM,IAAI,WAAW,KAAK,OAAO,EAAE,CAAC;AAAA,UACtD;AAGA,cAAG,IAAI,UAAU,IAAI,MAAM;AACzB,kBAAM,eAAe;AAAA,UACvB;AAGA,cAAI,MAAM,IAAI,SAAS,EAAE;AAGzB,YAAE,OAAO,YAAY;AAAA,YACnB,GAAG,MAAM;AAAA,YACT;AAAA,YACA;AAAA,UACF,CAAC;AAED,cAAI,WAAW,OAAO,CAAC;AAAA,QACzB;AAAA,MACF;AAEA,eAAS,OAAO,KAAK,KAAK;AAExB,cAAM,IAAI;AAGV,YAAG,MAAM,EAAE,UAAU,MAAM,CAAC,IAAI,GAAG;AACjC,cAAI,MAAM,MAAM;AAChB,gBAAM,IAAI,MAAM;AAChB,gBAAM,IAAI;AAAA,QACZ;AAGA,cAAM,KAAK,MAAM,EAAE,SAAS,WAAW,GAAG;AAC1C,cAAM,KAAK,MAAM,EAAE,SAAS,WAAW,GAAG;AAC1C,cAAM,MAAM,MAAM,GAAG,SAAS,MAAM,EAAE;AAGtC,YAAG,MAAM,IAAI,IAAI,MAAM,CAAC,EAAE,UAAU,WAAW,GAAG,MAAM,GAAG;AAEzD,gBAAM,IAAI,MAAM,IAAI;AACpB,mBAAS;AACT;AAAA,QACF;AAGA,cAAM,IAAI,MAAM,EAAE,SAAS,MAAM,CAAC;AAClC,YAAG,MAAM,EAAE,UAAU,MAAM,MAAM,MAAM;AAErC,gBAAM,IAAI;AACV,mBAAS,MAAM,OAAO,MAAM;AAC5B;AAAA,QACF;AAGA,YAAI,IAAI,MAAM,EAAE,WAAW,MAAM,GAAG;AACpC,cAAM,OAAO;AAAA,UACX,YAAY,MAAM,IAAI,IAAI;AAAA,YACxB,MAAM;AAAA,YAAG,MAAM;AAAA,YAAG;AAAA,YAAG,MAAM;AAAA,YAAG,MAAM;AAAA,YACpC,EAAE,IAAI,MAAM,EAAE;AAAA,YAAG,EAAE,IAAI,MAAM,EAAE;AAAA,YAC/B,MAAM,EAAE,WAAW,MAAM,CAAC;AAAA,UAAC;AAAA,UAC7B,WAAW,MAAM,IAAI,IAAI,aAAa,MAAM,GAAG,MAAM,CAAC;AAAA,QACxD;AAEA,iBAAS,MAAM,MAAM,IAAI;AAAA,MAC3B;AAAA,IACF;AAMA,QAAI,IAAI,kBAAkB,SAAS,MAAM,GAAG,SAAS,UAAU;AAE7D,UAAG,UAAU,WAAW,GAAG;AACzB,YAAG,OAAO,SAAS,UAAU;AAC3B,oBAAU;AACV,iBAAO;AAAA,QACT,WACQ,OAAO,SAAS,YAAY;AAClC,qBAAW;AACX,iBAAO;AAAA,QACT;AAAA,MACF,WAEQ,UAAU,WAAW,GAAG;AAC9B,YAAG,OAAO,SAAS,UAAU;AAC3B,cAAG,OAAO,MAAM,YAAY;AAC1B,uBAAW;AAAA,UACb,OACK;AACH,sBAAU;AAAA,UACZ;AAAA,QACF,OACK;AACH,oBAAU;AACV,qBAAW;AACX,iBAAO;AAAA,QACT;AACA,YAAI;AAAA,MACN,WAEQ,UAAU,WAAW,GAAG;AAC9B,YAAG,OAAO,MAAM,UAAU;AACxB,cAAG,OAAO,YAAY,YAAY;AAChC,uBAAW;AACX,sBAAU;AAAA,UACZ;AAAA,QACF,OACK;AACH,qBAAW;AACX,oBAAU;AACV,cAAI;AAAA,QACN;AAAA,MACF;AACA,gBAAU,WAAW,CAAC;AACtB,UAAG,SAAS,QAAW;AACrB,eAAO,QAAQ,QAAQ;AAAA,MACzB;AACA,UAAG,MAAM,QAAW;AAClB,YAAI,QAAQ,KAAK;AAAA,MACnB;AACA,UAAI,QAAQ,IAAI,IAAI,6BAA6B,MAAM,CAAC;AACxD,UAAG,CAAC,UAAU;AACZ,YAAI,IAAI,2BAA2B,OAAO,CAAC;AAC3C,eAAO,MAAM;AAAA,MACf;AACA,uBAAiB,OAAO,SAAS,QAAQ;AAAA,IAC3C;AAMA,QAAI,aAAa,SAAS,GAAG;AAE3B,UAAI,MAAM,EAAE,SAAS,EAAE;AACvB,UAAG,IAAI,CAAC,KAAK,KAAK;AAChB,cAAM,OAAO;AAAA,MACf;AACA,aAAO,MAAM,KAAK,WAAW,GAAG;AAAA,IAClC;AAMA,QAAI,0BAA0B,SAASJ,MAAK;AAE1C,aAAO,KAAK,OAAO,KAAK,MAAM,WAAW,KAAK,KAAK,UAAU,MAAM;AAAA;AAAA,QAEjE,KAAK;AAAA,UAAO,KAAK,MAAM;AAAA,UAAW,KAAK,KAAK;AAAA,UAAS;AAAA,UACnD,WAAWA,KAAI,CAAC;AAAA,QAAC;AAAA;AAAA,QAEnB,KAAK;AAAA,UAAO,KAAK,MAAM;AAAA,UAAW,KAAK,KAAK;AAAA,UAAS;AAAA,UACnD,WAAWA,KAAI,CAAC;AAAA,QAAC;AAAA,MACrB,CAAC;AAAA,IACH;AAMA,QAAI,UACF;AAEF,SAAK,WAAW,SAAS,OAAO,SAAS;AACvC,UAAI,OAAO;AACX,UAAI,SAAS;AACb,UAAI,MAAM,MAAM;AAChB,UAAI,IAAI;AACR,aAAM,IAAI,MAAM,QAAQ;AACtB,eAAO,MAAM,WAAW,GAAG;AAC3B,eAAO,MAAM,WAAW,GAAG;AAC3B,eAAO,MAAM,WAAW,GAAG;AAG3B,gBAAQ,QAAQ,OAAO,QAAQ,CAAC;AAChC,gBAAQ,QAAQ,QAAS,OAAO,MAAM,IAAM,QAAQ,CAAE;AACtD,YAAG,MAAM,IAAI,GAAG;AACd,kBAAQ;AAAA,QACV,OACK;AACH,kBAAQ,QAAQ,QAAS,OAAO,OAAO,IAAM,QAAQ,CAAE;AACvD,kBAAQ,MAAM,IAAI,IAAI,MAAM,QAAQ,OAAO,OAAO,EAAE;AAAA,QACtD;AAEA,YAAG,WAAW,KAAK,SAAS,SAAS;AACnC,oBAAU,KAAK,OAAO,GAAG,OAAO,IAAI;AACpC,iBAAO,KAAK,OAAO,OAAO;AAAA,QAC5B;AAAA,MACF;AACA,gBAAU;AAEV,aAAO;AAAA,IACT;AAMA,QAAI,6BAA6B,SAASA,MAAK,SAAS;AAEtD,UAAI,MAAM,KAAK,MAAM,IAAI,wBAAwBA,IAAG,CAAC;AACrD,YAAM,MAAM,KAAK,SAAS,IAAI,SAAS,GAAG,WAAW,EAAE;AACvD,aACE,uCACA,MACA;AAAA,IACJ;AAMA,QAAI,mBAAmB,IAAI,4BAA4B,SAASA,MAAK;AAEnE,aAAO,KAAK,OAAO,KAAK,MAAM,WAAW,KAAK,KAAK,UAAU,MAAM;AAAA;AAAA,QAEjE,KAAK;AAAA,UAAO,KAAK,MAAM;AAAA,UAAW,KAAK,KAAK;AAAA,UAAS;AAAA,UACnD,OAAO,aAAa,CAAI;AAAA,QAAC;AAAA;AAAA,QAE3B,KAAK;AAAA,UAAO,KAAK,MAAM;AAAA,UAAW,KAAK,KAAK;AAAA,UAAS;AAAA,UACnD,WAAWA,KAAI,CAAC;AAAA,QAAC;AAAA;AAAA,QAEnB,KAAK;AAAA,UAAO,KAAK,MAAM;AAAA,UAAW,KAAK,KAAK;AAAA,UAAS;AAAA,UACnD,WAAWA,KAAI,CAAC;AAAA,QAAC;AAAA;AAAA,QAEnB,KAAK;AAAA,UAAO,KAAK,MAAM;AAAA,UAAW,KAAK,KAAK;AAAA,UAAS;AAAA,UACnD,WAAWA,KAAI,CAAC;AAAA,QAAC;AAAA;AAAA,QAEnB,KAAK;AAAA,UAAO,KAAK,MAAM;AAAA,UAAW,KAAK,KAAK;AAAA,UAAS;AAAA,UACnD,WAAWA,KAAI,CAAC;AAAA,QAAC;AAAA;AAAA,QAEnB,KAAK;AAAA,UAAO,KAAK,MAAM;AAAA,UAAW,KAAK,KAAK;AAAA,UAAS;AAAA,UACnD,WAAWA,KAAI,CAAC;AAAA,QAAC;AAAA;AAAA,QAEnB,KAAK;AAAA,UAAO,KAAK,MAAM;AAAA,UAAW,KAAK,KAAK;AAAA,UAAS;AAAA,UACnD,WAAWA,KAAI,EAAE;AAAA,QAAC;AAAA;AAAA,QAEpB,KAAK;AAAA,UAAO,KAAK,MAAM;AAAA,UAAW,KAAK,KAAK;AAAA,UAAS;AAAA,UACnD,WAAWA,KAAI,EAAE;AAAA,QAAC;AAAA;AAAA,QAEpB,KAAK;AAAA,UAAO,KAAK,MAAM;AAAA,UAAW,KAAK,KAAK;AAAA,UAAS;AAAA,UACnD,WAAWA,KAAI,IAAI;AAAA,QAAC;AAAA,MACxB,CAAC;AAAA,IACH;AAMA,QAAI,kBAAkB,SAASA,MAAK,SAAS;AAE3C,UAAI,MAAM,KAAK,MAAM,IAAI,iBAAiBA,IAAG,CAAC;AAC9C,YAAM,MAAM,KAAK,SAAS,IAAI,SAAS,GAAG,WAAW,EAAE;AACvD,aACE,wCACA,MACA;AAAA,IACJ;AAAA;AAAA;;;ACr2IA;AAAA;AAAA,QAAM,SAAS;AACf,QAAM,UAAU;AAEhB,QAAM,eAAe,CAACM,aAAY,IAAI,MAAM,+BAA+BA,QAAO,EAAE;AAEpF,QAAM,qBAAqB,CAAC,MAAM,IAAI;AAEtC,YAAQ,WAAW,CAAC,eAAe;AACjC,UAAI,CAAC,mBAAmB,SAAS,UAAU,EAAG,OAAM,MAAM,wIAAwI;AAClM,aAAO,QAAQ,EAAE,MAAM,WAAW,CAAC;AAAA,IACrC;AAEA,YAAQ,UAAU,CAAC,eAAe,cAAc;AAC9C,UAAI,OAAO,kBAAkB,YAAY,OAAO,cAAc,SAAU,OAAM,MAAM,sMAAsM;AAC1R,UAAI;AACF,eAAO,OAAO,cAAc,WAAW,OAAO,KAAK,eAAe,MAAM,CAAC,EAAE,SAAS,KAAK;AAAA,MAC3F,SAAS,OAAO;AACd,cAAM,aAAa,YAAY;AAAA,MACjC;AAAA,IACF;AAEA,YAAQ,UAAU,CAAC,iBAAiB,eAAe;AACjD,UAAI,OAAO,oBAAoB,YAAY,OAAO,eAAe,SAAU,OAAM,MAAM,gNAAgN;AACvS,UAAI;AACF,eAAO,OAAO,eAAe,EAAE,KAAK,WAAW,GAAG,OAAO,KAAK,iBAAiB,KAAK,CAAC,EAAE,SAAS;AAAA,MAClG,SAAS,OAAO;AACd,cAAM,aAAa,YAAY;AAAA,MACjC;AAAA,IACF;AAAA;AAAA;",
  "names": ["md", "i", "listener", "key", "d", "op_or", "step", "callback", "num", "process"]
}
