/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace Messenger {
  export type MessageStruct = {
    sender: AddressLike;
    receiver: AddressLike;
    encryptedContent: string;
    timestamp: BigNumberish;
  };

  export type MessageStructOutput = [
    sender: string,
    receiver: string,
    encryptedContent: string,
    timestamp: bigint
  ] & {
    sender: string;
    receiver: string;
    encryptedContent: string;
    timestamp: bigint;
  };
}

export interface MessengerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getMessage"
      | "getMessagesCount"
      | "getPublicKey"
      | "messages"
      | "publicKeys"
      | "sendMessage"
      | "setPublicKey"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "MessageSent" | "PublicKeyUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "getMessage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMessagesCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPublicKey",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "messages",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "publicKeys",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "sendMessage",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPublicKey",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "getMessage", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMessagesCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPublicKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "messages", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "publicKeys", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sendMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPublicKey",
    data: BytesLike
  ): Result;
}

export namespace MessageSentEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    encryptedContent: string,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    from: string,
    to: string,
    encryptedContent: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    from: string;
    to: string;
    encryptedContent: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PublicKeyUpdatedEvent {
  export type InputTuple = [user: AddressLike, publicKey: string];
  export type OutputTuple = [user: string, publicKey: string];
  export interface OutputObject {
    user: string;
    publicKey: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Messenger extends BaseContract {
  connect(runner?: ContractRunner | null): Messenger;
  waitForDeployment(): Promise<this>;

  interface: MessengerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getMessage: TypedContractMethod<
    [_index: BigNumberish],
    [Messenger.MessageStructOutput],
    "view"
  >;

  getMessagesCount: TypedContractMethod<[], [bigint], "view">;

  getPublicKey: TypedContractMethod<[_user: AddressLike], [string], "view">;

  messages: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, bigint] & {
        sender: string;
        receiver: string;
        encryptedContent: string;
        timestamp: bigint;
      }
    ],
    "view"
  >;

  publicKeys: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  sendMessage: TypedContractMethod<
    [_to: AddressLike, _encryptedContent: string],
    [void],
    "nonpayable"
  >;

  setPublicKey: TypedContractMethod<[_publicKey: string], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getMessage"
  ): TypedContractMethod<
    [_index: BigNumberish],
    [Messenger.MessageStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getMessagesCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPublicKey"
  ): TypedContractMethod<[_user: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "messages"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, bigint] & {
        sender: string;
        receiver: string;
        encryptedContent: string;
        timestamp: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "publicKeys"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "sendMessage"
  ): TypedContractMethod<
    [_to: AddressLike, _encryptedContent: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPublicKey"
  ): TypedContractMethod<[_publicKey: string], [void], "nonpayable">;

  getEvent(
    key: "MessageSent"
  ): TypedContractEvent<
    MessageSentEvent.InputTuple,
    MessageSentEvent.OutputTuple,
    MessageSentEvent.OutputObject
  >;
  getEvent(
    key: "PublicKeyUpdated"
  ): TypedContractEvent<
    PublicKeyUpdatedEvent.InputTuple,
    PublicKeyUpdatedEvent.OutputTuple,
    PublicKeyUpdatedEvent.OutputObject
  >;

  filters: {
    "MessageSent(address,address,string,uint256)": TypedContractEvent<
      MessageSentEvent.InputTuple,
      MessageSentEvent.OutputTuple,
      MessageSentEvent.OutputObject
    >;
    MessageSent: TypedContractEvent<
      MessageSentEvent.InputTuple,
      MessageSentEvent.OutputTuple,
      MessageSentEvent.OutputObject
    >;

    "PublicKeyUpdated(address,string)": TypedContractEvent<
      PublicKeyUpdatedEvent.InputTuple,
      PublicKeyUpdatedEvent.OutputTuple,
      PublicKeyUpdatedEvent.OutputObject
    >;
    PublicKeyUpdated: TypedContractEvent<
      PublicKeyUpdatedEvent.InputTuple,
      PublicKeyUpdatedEvent.OutputTuple,
      PublicKeyUpdatedEvent.OutputObject
    >;
  };
}
